# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsEnvironmentToEnvironmentModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'room_name': 'str',
        'factor_id': 'str',
        'station_id': 'int',
        'factor_name': 'str',
        'factor_value': 'float',
        'valid_range_min': 'float',
        'valid_range_max': 'float',
        'unit_of_measure': 'str'
    }

    attribute_map = {
        'room_name': 'RoomName',
        'factor_id': 'FactorId',
        'station_id': 'StationId',
        'factor_name': 'FactorName',
        'factor_value': 'FactorValue',
        'valid_range_min': 'ValidRangeMin',
        'valid_range_max': 'ValidRangeMax',
        'unit_of_measure': 'UnitOfMeasure'
    }

    def __init__(self, room_name=None, factor_id=None, station_id=None, factor_name=None, factor_value=None, valid_range_min=None, valid_range_max=None, unit_of_measure=None, _configuration=None):  # noqa: E501
        """QualerApiModelsEnvironmentToEnvironmentModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._room_name = None
        self._factor_id = None
        self._station_id = None
        self._factor_name = None
        self._factor_value = None
        self._valid_range_min = None
        self._valid_range_max = None
        self._unit_of_measure = None
        self.discriminator = None

        if room_name is not None:
            self.room_name = room_name
        if factor_id is not None:
            self.factor_id = factor_id
        if station_id is not None:
            self.station_id = station_id
        if factor_name is not None:
            self.factor_name = factor_name
        if factor_value is not None:
            self.factor_value = factor_value
        if valid_range_min is not None:
            self.valid_range_min = valid_range_min
        if valid_range_max is not None:
            self.valid_range_max = valid_range_max
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure

    @property
    def room_name(self):
        """Gets the room_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The room_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: str
        """
        return self._room_name

    @room_name.setter
    def room_name(self, room_name):
        """Sets the room_name of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param room_name: The room_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: str
        """

        self._room_name = room_name

    @property
    def factor_id(self):
        """Gets the factor_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The factor_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: str
        """
        return self._factor_id

    @factor_id.setter
    def factor_id(self, factor_id):
        """Sets the factor_id of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param factor_id: The factor_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["AmbientTemperature", "AirHumidity", "BarometricPressure", "EvaporationRate", "AirBuoyancy", "ZFactor", "Altitude", "WindSpeed", "SolarRadiation", "LightIntensity", "NoiseLevel", "PhLevel", "WaterConductivity", "WaterTemperature"]  # noqa: E501
        if (self._configuration.client_side_validation and
                factor_id not in allowed_values):
            raise ValueError(
                "Invalid value for `factor_id` ({0}), must be one of {1}"  # noqa: E501
                .format(factor_id, allowed_values)
            )

        self._factor_id = factor_id

    @property
    def station_id(self):
        """Gets the station_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The station_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: int
        """
        return self._station_id

    @station_id.setter
    def station_id(self, station_id):
        """Sets the station_id of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param station_id: The station_id of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: int
        """

        self._station_id = station_id

    @property
    def factor_name(self):
        """Gets the factor_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The factor_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: str
        """
        return self._factor_name

    @factor_name.setter
    def factor_name(self, factor_name):
        """Sets the factor_name of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param factor_name: The factor_name of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: str
        """

        self._factor_name = factor_name

    @property
    def factor_value(self):
        """Gets the factor_value of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The factor_value of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: float
        """
        return self._factor_value

    @factor_value.setter
    def factor_value(self, factor_value):
        """Sets the factor_value of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param factor_value: The factor_value of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: float
        """

        self._factor_value = factor_value

    @property
    def valid_range_min(self):
        """Gets the valid_range_min of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The valid_range_min of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: float
        """
        return self._valid_range_min

    @valid_range_min.setter
    def valid_range_min(self, valid_range_min):
        """Sets the valid_range_min of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param valid_range_min: The valid_range_min of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: float
        """

        self._valid_range_min = valid_range_min

    @property
    def valid_range_max(self):
        """Gets the valid_range_max of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The valid_range_max of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: float
        """
        return self._valid_range_max

    @valid_range_max.setter
    def valid_range_max(self, valid_range_max):
        """Sets the valid_range_max of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param valid_range_max: The valid_range_max of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: float
        """

        self._valid_range_max = valid_range_max

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501


        :return: The unit_of_measure of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this QualerApiModelsEnvironmentToEnvironmentModel.


        :param unit_of_measure: The unit_of_measure of this QualerApiModelsEnvironmentToEnvironmentModel.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsEnvironmentToEnvironmentModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsEnvironmentToEnvironmentModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsEnvironmentToEnvironmentModel):
            return True

        return self.to_dict() != other.to_dict()
