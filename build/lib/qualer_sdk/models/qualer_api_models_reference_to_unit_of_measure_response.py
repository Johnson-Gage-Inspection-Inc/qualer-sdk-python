# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsReferenceToUnitOfMeasureResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_quantity_id': 'int',
        'measurement_quantity': 'str',
        'unit_of_measure_id': 'int',
        'unit_of_measure': 'str'
    }

    attribute_map = {
        'measurement_quantity_id': 'MeasurementQuantityId',
        'measurement_quantity': 'MeasurementQuantity',
        'unit_of_measure_id': 'UnitOfMeasureId',
        'unit_of_measure': 'UnitOfMeasure'
    }

    def __init__(self, measurement_quantity_id=None, measurement_quantity=None, unit_of_measure_id=None, unit_of_measure=None, _configuration=None):  # noqa: E501
        """QualerApiModelsReferenceToUnitOfMeasureResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._measurement_quantity_id = None
        self._measurement_quantity = None
        self._unit_of_measure_id = None
        self._unit_of_measure = None
        self.discriminator = None

        if measurement_quantity_id is not None:
            self.measurement_quantity_id = measurement_quantity_id
        if measurement_quantity is not None:
            self.measurement_quantity = measurement_quantity
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure

    @property
    def measurement_quantity_id(self):
        """Gets the measurement_quantity_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501


        :return: The measurement_quantity_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :rtype: int
        """
        return self._measurement_quantity_id

    @measurement_quantity_id.setter
    def measurement_quantity_id(self, measurement_quantity_id):
        """Sets the measurement_quantity_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.


        :param measurement_quantity_id: The measurement_quantity_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :type: int
        """

        self._measurement_quantity_id = measurement_quantity_id

    @property
    def measurement_quantity(self):
        """Gets the measurement_quantity of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501


        :return: The measurement_quantity of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :rtype: str
        """
        return self._measurement_quantity

    @measurement_quantity.setter
    def measurement_quantity(self, measurement_quantity):
        """Sets the measurement_quantity of this QualerApiModelsReferenceToUnitOfMeasureResponse.


        :param measurement_quantity: The measurement_quantity of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :type: str
        """

        self._measurement_quantity = measurement_quantity

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501


        :return: The unit_of_measure_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :rtype: int
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.


        :param unit_of_measure_id: The unit_of_measure_id of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :type: int
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501


        :return: The unit_of_measure of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this QualerApiModelsReferenceToUnitOfMeasureResponse.


        :param unit_of_measure: The unit_of_measure of this QualerApiModelsReferenceToUnitOfMeasureResponse.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsReferenceToUnitOfMeasureResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsReferenceToUnitOfMeasureResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsReferenceToUnitOfMeasureResponse):
            return True

        return self.to_dict() != other.to_dict()
