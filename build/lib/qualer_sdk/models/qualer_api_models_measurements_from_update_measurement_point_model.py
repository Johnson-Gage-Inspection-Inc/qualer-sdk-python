# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsMeasurementsFromUpdateMeasurementPointModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_point_id': 'int',
        'specification_name': 'str',
        'unit_of_measure': 'str',
        'expected_value': 'float',
        'expected_value_raw': 'str',
        'base_value': 'float',
        'test_value': 'float',
        'nominal': 'float',
        'range_min': 'float',
        'range_max': 'float',
        'tolerance_type': 'str',
        'precision_type': 'str',
        'precision': 'float',
        'tolerance_minimum': 'float',
        'tolerance_maximum': 'float',
        'resolution': 'float',
        'resolution_count': 'float',
        'is_accredited': 'bool',
        'specification_mode': 'str',
        'tolerance_mode': 'str',
        'tolerance_unit': 'str',
        'measurements': 'list[QualerApiModelsMeasurementsFromUpdateMeasurementModel]',
        'measurement_condition_factors': 'list[QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel]',
        'tool_application_mode': 'str',
        'primary_measurement_tool': 'QualerApiModelsMeasurementsFromUpdateMeasurementToolModel',
        'secondary_measurement_tool': 'QualerApiModelsMeasurementsFromUpdateMeasurementToolModel',
        'linked_measurement_point_id': 'int',
        'hysteresis_point': 'str',
        'influence_parameter1_parameter_id': 'int',
        'influence_parameter1_value': 'str',
        'influence_parameter2_parameter_id': 'int',
        'influence_parameter2_value': 'str',
        'measurement_not_taken_reason': 'str',
        'hide_from_certificate': 'bool',
        'measurement_not_taken_result': 'str',
        'is_measurement_not_taken': 'bool',
        'column_mean': 'str',
        'column_mean_result': 'str',
        'column_sd': 'str',
        'column_sd_result': 'str',
        'column_cv': 'str',
        'column_cv_result': 'str',
        'column_range': 'str',
        'column_range_result': 'str',
        'column_delta': 'str',
        'column_delta_result': 'str',
        'column_result': 'str'
    }

    attribute_map = {
        'measurement_point_id': 'MeasurementPointId',
        'specification_name': 'SpecificationName',
        'unit_of_measure': 'UnitOfMeasure',
        'expected_value': 'ExpectedValue',
        'expected_value_raw': 'ExpectedValueRaw',
        'base_value': 'BaseValue',
        'test_value': 'TestValue',
        'nominal': 'Nominal',
        'range_min': 'RangeMin',
        'range_max': 'RangeMax',
        'tolerance_type': 'ToleranceType',
        'precision_type': 'PrecisionType',
        'precision': 'Precision',
        'tolerance_minimum': 'ToleranceMinimum',
        'tolerance_maximum': 'ToleranceMaximum',
        'resolution': 'Resolution',
        'resolution_count': 'ResolutionCount',
        'is_accredited': 'IsAccredited',
        'specification_mode': 'SpecificationMode',
        'tolerance_mode': 'ToleranceMode',
        'tolerance_unit': 'ToleranceUnit',
        'measurements': 'Measurements',
        'measurement_condition_factors': 'MeasurementConditionFactors',
        'tool_application_mode': 'ToolApplicationMode',
        'primary_measurement_tool': 'PrimaryMeasurementTool',
        'secondary_measurement_tool': 'SecondaryMeasurementTool',
        'linked_measurement_point_id': 'LinkedMeasurementPointId',
        'hysteresis_point': 'HysteresisPoint',
        'influence_parameter1_parameter_id': 'InfluenceParameter1ParameterId',
        'influence_parameter1_value': 'InfluenceParameter1Value',
        'influence_parameter2_parameter_id': 'InfluenceParameter2ParameterId',
        'influence_parameter2_value': 'InfluenceParameter2Value',
        'measurement_not_taken_reason': 'MeasurementNotTakenReason',
        'hide_from_certificate': 'HideFromCertificate',
        'measurement_not_taken_result': 'MeasurementNotTakenResult',
        'is_measurement_not_taken': 'IsMeasurementNotTaken',
        'column_mean': 'ColumnMean',
        'column_mean_result': 'ColumnMeanResult',
        'column_sd': 'ColumnSD',
        'column_sd_result': 'ColumnSDResult',
        'column_cv': 'ColumnCV',
        'column_cv_result': 'ColumnCVResult',
        'column_range': 'ColumnRange',
        'column_range_result': 'ColumnRangeResult',
        'column_delta': 'ColumnDelta',
        'column_delta_result': 'ColumnDeltaResult',
        'column_result': 'ColumnResult'
    }

    def __init__(self, measurement_point_id=None, specification_name=None, unit_of_measure=None, expected_value=None, expected_value_raw=None, base_value=None, test_value=None, nominal=None, range_min=None, range_max=None, tolerance_type=None, precision_type=None, precision=None, tolerance_minimum=None, tolerance_maximum=None, resolution=None, resolution_count=None, is_accredited=None, specification_mode=None, tolerance_mode=None, tolerance_unit=None, measurements=None, measurement_condition_factors=None, tool_application_mode=None, primary_measurement_tool=None, secondary_measurement_tool=None, linked_measurement_point_id=None, hysteresis_point=None, influence_parameter1_parameter_id=None, influence_parameter1_value=None, influence_parameter2_parameter_id=None, influence_parameter2_value=None, measurement_not_taken_reason=None, hide_from_certificate=None, measurement_not_taken_result=None, is_measurement_not_taken=None, column_mean=None, column_mean_result=None, column_sd=None, column_sd_result=None, column_cv=None, column_cv_result=None, column_range=None, column_range_result=None, column_delta=None, column_delta_result=None, column_result=None, _configuration=None):  # noqa: E501
        """QualerApiModelsMeasurementsFromUpdateMeasurementPointModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._measurement_point_id = None
        self._specification_name = None
        self._unit_of_measure = None
        self._expected_value = None
        self._expected_value_raw = None
        self._base_value = None
        self._test_value = None
        self._nominal = None
        self._range_min = None
        self._range_max = None
        self._tolerance_type = None
        self._precision_type = None
        self._precision = None
        self._tolerance_minimum = None
        self._tolerance_maximum = None
        self._resolution = None
        self._resolution_count = None
        self._is_accredited = None
        self._specification_mode = None
        self._tolerance_mode = None
        self._tolerance_unit = None
        self._measurements = None
        self._measurement_condition_factors = None
        self._tool_application_mode = None
        self._primary_measurement_tool = None
        self._secondary_measurement_tool = None
        self._linked_measurement_point_id = None
        self._hysteresis_point = None
        self._influence_parameter1_parameter_id = None
        self._influence_parameter1_value = None
        self._influence_parameter2_parameter_id = None
        self._influence_parameter2_value = None
        self._measurement_not_taken_reason = None
        self._hide_from_certificate = None
        self._measurement_not_taken_result = None
        self._is_measurement_not_taken = None
        self._column_mean = None
        self._column_mean_result = None
        self._column_sd = None
        self._column_sd_result = None
        self._column_cv = None
        self._column_cv_result = None
        self._column_range = None
        self._column_range_result = None
        self._column_delta = None
        self._column_delta_result = None
        self._column_result = None
        self.discriminator = None

        if measurement_point_id is not None:
            self.measurement_point_id = measurement_point_id
        if specification_name is not None:
            self.specification_name = specification_name
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if expected_value is not None:
            self.expected_value = expected_value
        if expected_value_raw is not None:
            self.expected_value_raw = expected_value_raw
        if base_value is not None:
            self.base_value = base_value
        if test_value is not None:
            self.test_value = test_value
        if nominal is not None:
            self.nominal = nominal
        if range_min is not None:
            self.range_min = range_min
        if range_max is not None:
            self.range_max = range_max
        if tolerance_type is not None:
            self.tolerance_type = tolerance_type
        if precision_type is not None:
            self.precision_type = precision_type
        if precision is not None:
            self.precision = precision
        if tolerance_minimum is not None:
            self.tolerance_minimum = tolerance_minimum
        if tolerance_maximum is not None:
            self.tolerance_maximum = tolerance_maximum
        if resolution is not None:
            self.resolution = resolution
        if resolution_count is not None:
            self.resolution_count = resolution_count
        if is_accredited is not None:
            self.is_accredited = is_accredited
        if specification_mode is not None:
            self.specification_mode = specification_mode
        if tolerance_mode is not None:
            self.tolerance_mode = tolerance_mode
        if tolerance_unit is not None:
            self.tolerance_unit = tolerance_unit
        if measurements is not None:
            self.measurements = measurements
        if measurement_condition_factors is not None:
            self.measurement_condition_factors = measurement_condition_factors
        if tool_application_mode is not None:
            self.tool_application_mode = tool_application_mode
        if primary_measurement_tool is not None:
            self.primary_measurement_tool = primary_measurement_tool
        if secondary_measurement_tool is not None:
            self.secondary_measurement_tool = secondary_measurement_tool
        if linked_measurement_point_id is not None:
            self.linked_measurement_point_id = linked_measurement_point_id
        if hysteresis_point is not None:
            self.hysteresis_point = hysteresis_point
        if influence_parameter1_parameter_id is not None:
            self.influence_parameter1_parameter_id = influence_parameter1_parameter_id
        if influence_parameter1_value is not None:
            self.influence_parameter1_value = influence_parameter1_value
        if influence_parameter2_parameter_id is not None:
            self.influence_parameter2_parameter_id = influence_parameter2_parameter_id
        if influence_parameter2_value is not None:
            self.influence_parameter2_value = influence_parameter2_value
        if measurement_not_taken_reason is not None:
            self.measurement_not_taken_reason = measurement_not_taken_reason
        if hide_from_certificate is not None:
            self.hide_from_certificate = hide_from_certificate
        if measurement_not_taken_result is not None:
            self.measurement_not_taken_result = measurement_not_taken_result
        if is_measurement_not_taken is not None:
            self.is_measurement_not_taken = is_measurement_not_taken
        if column_mean is not None:
            self.column_mean = column_mean
        if column_mean_result is not None:
            self.column_mean_result = column_mean_result
        if column_sd is not None:
            self.column_sd = column_sd
        if column_sd_result is not None:
            self.column_sd_result = column_sd_result
        if column_cv is not None:
            self.column_cv = column_cv
        if column_cv_result is not None:
            self.column_cv_result = column_cv_result
        if column_range is not None:
            self.column_range = column_range
        if column_range_result is not None:
            self.column_range_result = column_range_result
        if column_delta is not None:
            self.column_delta = column_delta
        if column_delta_result is not None:
            self.column_delta_result = column_delta_result
        if column_result is not None:
            self.column_result = column_result

    @property
    def measurement_point_id(self):
        """Gets the measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: int
        """
        return self._measurement_point_id

    @measurement_point_id.setter
    def measurement_point_id(self, measurement_point_id):
        """Sets the measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param measurement_point_id: The measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: int
        """

        self._measurement_point_id = measurement_point_id

    @property
    def specification_name(self):
        """Gets the specification_name of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The specification_name of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._specification_name

    @specification_name.setter
    def specification_name(self, specification_name):
        """Sets the specification_name of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param specification_name: The specification_name of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._specification_name = specification_name

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The unit_of_measure of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param unit_of_measure: The unit_of_measure of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def expected_value(self):
        """Gets the expected_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The expected_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param expected_value: The expected_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._expected_value = expected_value

    @property
    def expected_value_raw(self):
        """Gets the expected_value_raw of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The expected_value_raw of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._expected_value_raw

    @expected_value_raw.setter
    def expected_value_raw(self, expected_value_raw):
        """Sets the expected_value_raw of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param expected_value_raw: The expected_value_raw of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._expected_value_raw = expected_value_raw

    @property
    def base_value(self):
        """Gets the base_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The base_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._base_value

    @base_value.setter
    def base_value(self, base_value):
        """Sets the base_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param base_value: The base_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._base_value = base_value

    @property
    def test_value(self):
        """Gets the test_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The test_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._test_value

    @test_value.setter
    def test_value(self, test_value):
        """Sets the test_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param test_value: The test_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._test_value = test_value

    @property
    def nominal(self):
        """Gets the nominal of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The nominal of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._nominal

    @nominal.setter
    def nominal(self, nominal):
        """Sets the nominal of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param nominal: The nominal of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._nominal = nominal

    @property
    def range_min(self):
        """Gets the range_min of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The range_min of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._range_min

    @range_min.setter
    def range_min(self, range_min):
        """Sets the range_min of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param range_min: The range_min of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._range_min = range_min

    @property
    def range_max(self):
        """Gets the range_max of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The range_max of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._range_max

    @range_max.setter
    def range_max(self, range_max):
        """Sets the range_max of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param range_max: The range_max of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._range_max = range_max

    @property
    def tolerance_type(self):
        """Gets the tolerance_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tolerance_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_type

    @tolerance_type.setter
    def tolerance_type(self, tolerance_type):
        """Sets the tolerance_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tolerance_type: The tolerance_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._tolerance_type = tolerance_type

    @property
    def precision_type(self):
        """Gets the precision_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The precision_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._precision_type

    @precision_type.setter
    def precision_type(self, precision_type):
        """Sets the precision_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param precision_type: The precision_type of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._precision_type = precision_type

    @property
    def precision(self):
        """Gets the precision of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The precision of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param precision: The precision of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._precision = precision

    @property
    def tolerance_minimum(self):
        """Gets the tolerance_minimum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tolerance_minimum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._tolerance_minimum

    @tolerance_minimum.setter
    def tolerance_minimum(self, tolerance_minimum):
        """Sets the tolerance_minimum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tolerance_minimum: The tolerance_minimum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._tolerance_minimum = tolerance_minimum

    @property
    def tolerance_maximum(self):
        """Gets the tolerance_maximum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tolerance_maximum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._tolerance_maximum

    @tolerance_maximum.setter
    def tolerance_maximum(self, tolerance_maximum):
        """Sets the tolerance_maximum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tolerance_maximum: The tolerance_maximum of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._tolerance_maximum = tolerance_maximum

    @property
    def resolution(self):
        """Gets the resolution of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The resolution of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param resolution: The resolution of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def resolution_count(self):
        """Gets the resolution_count of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The resolution_count of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: float
        """
        return self._resolution_count

    @resolution_count.setter
    def resolution_count(self, resolution_count):
        """Sets the resolution_count of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param resolution_count: The resolution_count of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: float
        """

        self._resolution_count = resolution_count

    @property
    def is_accredited(self):
        """Gets the is_accredited of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The is_accredited of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_accredited

    @is_accredited.setter
    def is_accredited(self, is_accredited):
        """Sets the is_accredited of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param is_accredited: The is_accredited of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: bool
        """

        self._is_accredited = is_accredited

    @property
    def specification_mode(self):
        """Gets the specification_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The specification_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._specification_mode

    @specification_mode.setter
    def specification_mode(self, specification_mode):
        """Sets the specification_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param specification_mode: The specification_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Point", "Range"]  # noqa: E501
        if (self._configuration.client_side_validation and
                specification_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `specification_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(specification_mode, allowed_values)
            )

        self._specification_mode = specification_mode

    @property
    def tolerance_mode(self):
        """Gets the tolerance_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tolerance_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_mode

    @tolerance_mode.setter
    def tolerance_mode(self, tolerance_mode):
        """Sets the tolerance_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tolerance_mode: The tolerance_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Symmetric", "Asymmetric", "Range"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tolerance_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `tolerance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tolerance_mode, allowed_values)
            )

        self._tolerance_mode = tolerance_mode

    @property
    def tolerance_unit(self):
        """Gets the tolerance_unit of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tolerance_unit of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_unit

    @tolerance_unit.setter
    def tolerance_unit(self, tolerance_unit):
        """Sets the tolerance_unit of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tolerance_unit: The tolerance_unit of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Percentage", "UnitOfMeasure", "Ppm"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tolerance_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `tolerance_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(tolerance_unit, allowed_values)
            )

        self._tolerance_unit = tolerance_unit

    @property
    def measurements(self):
        """Gets the measurements of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The measurements of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsFromUpdateMeasurementModel]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param measurements: The measurements of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsFromUpdateMeasurementModel]
        """

        self._measurements = measurements

    @property
    def measurement_condition_factors(self):
        """Gets the measurement_condition_factors of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The measurement_condition_factors of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel]
        """
        return self._measurement_condition_factors

    @measurement_condition_factors.setter
    def measurement_condition_factors(self, measurement_condition_factors):
        """Sets the measurement_condition_factors of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param measurement_condition_factors: The measurement_condition_factors of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel]
        """

        self._measurement_condition_factors = measurement_condition_factors

    @property
    def tool_application_mode(self):
        """Gets the tool_application_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The tool_application_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._tool_application_mode

    @tool_application_mode.setter
    def tool_application_mode(self, tool_application_mode):
        """Sets the tool_application_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param tool_application_mode: The tool_application_mode of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Range", "Point", "Combine"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tool_application_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `tool_application_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tool_application_mode, allowed_values)
            )

        self._tool_application_mode = tool_application_mode

    @property
    def primary_measurement_tool(self):
        """Gets the primary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The primary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: QualerApiModelsMeasurementsFromUpdateMeasurementToolModel
        """
        return self._primary_measurement_tool

    @primary_measurement_tool.setter
    def primary_measurement_tool(self, primary_measurement_tool):
        """Sets the primary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param primary_measurement_tool: The primary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: QualerApiModelsMeasurementsFromUpdateMeasurementToolModel
        """

        self._primary_measurement_tool = primary_measurement_tool

    @property
    def secondary_measurement_tool(self):
        """Gets the secondary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The secondary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: QualerApiModelsMeasurementsFromUpdateMeasurementToolModel
        """
        return self._secondary_measurement_tool

    @secondary_measurement_tool.setter
    def secondary_measurement_tool(self, secondary_measurement_tool):
        """Sets the secondary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param secondary_measurement_tool: The secondary_measurement_tool of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: QualerApiModelsMeasurementsFromUpdateMeasurementToolModel
        """

        self._secondary_measurement_tool = secondary_measurement_tool

    @property
    def linked_measurement_point_id(self):
        """Gets the linked_measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The linked_measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: int
        """
        return self._linked_measurement_point_id

    @linked_measurement_point_id.setter
    def linked_measurement_point_id(self, linked_measurement_point_id):
        """Sets the linked_measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param linked_measurement_point_id: The linked_measurement_point_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: int
        """

        self._linked_measurement_point_id = linked_measurement_point_id

    @property
    def hysteresis_point(self):
        """Gets the hysteresis_point of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The hysteresis_point of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._hysteresis_point

    @hysteresis_point.setter
    def hysteresis_point(self, hysteresis_point):
        """Sets the hysteresis_point of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param hysteresis_point: The hysteresis_point of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["None", "Zero", "First", "Second"]  # noqa: E501
        if (self._configuration.client_side_validation and
                hysteresis_point not in allowed_values):
            raise ValueError(
                "Invalid value for `hysteresis_point` ({0}), must be one of {1}"  # noqa: E501
                .format(hysteresis_point, allowed_values)
            )

        self._hysteresis_point = hysteresis_point

    @property
    def influence_parameter1_parameter_id(self):
        """Gets the influence_parameter1_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The influence_parameter1_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter1_parameter_id

    @influence_parameter1_parameter_id.setter
    def influence_parameter1_parameter_id(self, influence_parameter1_parameter_id):
        """Sets the influence_parameter1_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param influence_parameter1_parameter_id: The influence_parameter1_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter1_parameter_id = influence_parameter1_parameter_id

    @property
    def influence_parameter1_value(self):
        """Gets the influence_parameter1_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The influence_parameter1_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter1_value

    @influence_parameter1_value.setter
    def influence_parameter1_value(self, influence_parameter1_value):
        """Sets the influence_parameter1_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param influence_parameter1_value: The influence_parameter1_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter1_value = influence_parameter1_value

    @property
    def influence_parameter2_parameter_id(self):
        """Gets the influence_parameter2_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The influence_parameter2_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter2_parameter_id

    @influence_parameter2_parameter_id.setter
    def influence_parameter2_parameter_id(self, influence_parameter2_parameter_id):
        """Sets the influence_parameter2_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param influence_parameter2_parameter_id: The influence_parameter2_parameter_id of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter2_parameter_id = influence_parameter2_parameter_id

    @property
    def influence_parameter2_value(self):
        """Gets the influence_parameter2_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The influence_parameter2_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter2_value

    @influence_parameter2_value.setter
    def influence_parameter2_value(self, influence_parameter2_value):
        """Sets the influence_parameter2_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param influence_parameter2_value: The influence_parameter2_value of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter2_value = influence_parameter2_value

    @property
    def measurement_not_taken_reason(self):
        """Gets the measurement_not_taken_reason of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The measurement_not_taken_reason of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._measurement_not_taken_reason

    @measurement_not_taken_reason.setter
    def measurement_not_taken_reason(self, measurement_not_taken_reason):
        """Sets the measurement_not_taken_reason of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param measurement_not_taken_reason: The measurement_not_taken_reason of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._measurement_not_taken_reason = measurement_not_taken_reason

    @property
    def hide_from_certificate(self):
        """Gets the hide_from_certificate of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The hide_from_certificate of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: bool
        """
        return self._hide_from_certificate

    @hide_from_certificate.setter
    def hide_from_certificate(self, hide_from_certificate):
        """Sets the hide_from_certificate of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param hide_from_certificate: The hide_from_certificate of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: bool
        """

        self._hide_from_certificate = hide_from_certificate

    @property
    def measurement_not_taken_result(self):
        """Gets the measurement_not_taken_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The measurement_not_taken_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._measurement_not_taken_result

    @measurement_not_taken_result.setter
    def measurement_not_taken_result(self, measurement_not_taken_result):
        """Sets the measurement_not_taken_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param measurement_not_taken_result: The measurement_not_taken_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._measurement_not_taken_result = measurement_not_taken_result

    @property
    def is_measurement_not_taken(self):
        """Gets the is_measurement_not_taken of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The is_measurement_not_taken of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_measurement_not_taken

    @is_measurement_not_taken.setter
    def is_measurement_not_taken(self, is_measurement_not_taken):
        """Sets the is_measurement_not_taken of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param is_measurement_not_taken: The is_measurement_not_taken of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: bool
        """

        self._is_measurement_not_taken = is_measurement_not_taken

    @property
    def column_mean(self):
        """Gets the column_mean of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_mean of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_mean

    @column_mean.setter
    def column_mean(self, column_mean):
        """Sets the column_mean of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_mean: The column_mean of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_mean = column_mean

    @property
    def column_mean_result(self):
        """Gets the column_mean_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_mean_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_mean_result

    @column_mean_result.setter
    def column_mean_result(self, column_mean_result):
        """Sets the column_mean_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_mean_result: The column_mean_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_mean_result = column_mean_result

    @property
    def column_sd(self):
        """Gets the column_sd of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_sd of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_sd

    @column_sd.setter
    def column_sd(self, column_sd):
        """Sets the column_sd of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_sd: The column_sd of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_sd = column_sd

    @property
    def column_sd_result(self):
        """Gets the column_sd_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_sd_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_sd_result

    @column_sd_result.setter
    def column_sd_result(self, column_sd_result):
        """Sets the column_sd_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_sd_result: The column_sd_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_sd_result = column_sd_result

    @property
    def column_cv(self):
        """Gets the column_cv of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_cv of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_cv

    @column_cv.setter
    def column_cv(self, column_cv):
        """Sets the column_cv of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_cv: The column_cv of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_cv = column_cv

    @property
    def column_cv_result(self):
        """Gets the column_cv_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_cv_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_cv_result

    @column_cv_result.setter
    def column_cv_result(self, column_cv_result):
        """Sets the column_cv_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_cv_result: The column_cv_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_cv_result = column_cv_result

    @property
    def column_range(self):
        """Gets the column_range of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_range of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_range

    @column_range.setter
    def column_range(self, column_range):
        """Sets the column_range of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_range: The column_range of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_range = column_range

    @property
    def column_range_result(self):
        """Gets the column_range_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_range_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_range_result

    @column_range_result.setter
    def column_range_result(self, column_range_result):
        """Sets the column_range_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_range_result: The column_range_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_range_result = column_range_result

    @property
    def column_delta(self):
        """Gets the column_delta of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_delta of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_delta

    @column_delta.setter
    def column_delta(self, column_delta):
        """Sets the column_delta of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_delta: The column_delta of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_delta = column_delta

    @property
    def column_delta_result(self):
        """Gets the column_delta_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_delta_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_delta_result

    @column_delta_result.setter
    def column_delta_result(self, column_delta_result):
        """Sets the column_delta_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_delta_result: The column_delta_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_delta_result = column_delta_result

    @property
    def column_result(self):
        """Gets the column_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501


        :return: The column_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :rtype: str
        """
        return self._column_result

    @column_result.setter
    def column_result(self, column_result):
        """Sets the column_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.


        :param column_result: The column_result of this QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.  # noqa: E501
        :type: str
        """

        self._column_result = column_result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsMeasurementsFromUpdateMeasurementPointModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsMeasurementsFromUpdateMeasurementPointModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsMeasurementsFromUpdateMeasurementPointModel):
            return True

        return self.to_dict() != other.to_dict()
