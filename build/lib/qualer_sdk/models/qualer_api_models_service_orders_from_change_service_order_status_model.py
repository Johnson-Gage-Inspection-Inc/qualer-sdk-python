# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_order_status': 'str',
        'reset_status': 'bool',
        'email': 'str',
        'password': 'str'
    }

    attribute_map = {
        'service_order_status': 'ServiceOrderStatus',
        'reset_status': 'ResetStatus',
        'email': 'Email',
        'password': 'Password'
    }

    def __init__(self, service_order_status=None, reset_status=None, email=None, password=None, _configuration=None):  # noqa: E501
        """QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_order_status = None
        self._reset_status = None
        self._email = None
        self._password = None
        self.discriminator = None

        if service_order_status is not None:
            self.service_order_status = service_order_status
        if reset_status is not None:
            self.reset_status = reset_status
        if email is not None:
            self.email = email
        if password is not None:
            self.password = password

    @property
    def service_order_status(self):
        """Gets the service_order_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501


        :return: The service_order_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._service_order_status

    @service_order_status.setter
    def service_order_status(self, service_order_status):
        """Sets the service_order_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.


        :param service_order_status: The service_order_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["New", "Draft", "WaitingForApproval", "Submitted", "Processing", "QualityControl", "Cancelled", "WaitingForClientSignOff", "Completed", "Denied", "Delayed", "Scheduling", "Closed", "WaitingForVendorSignOff", "DelayedApproval", "Ready"]  # noqa: E501
        if (self._configuration.client_side_validation and
                service_order_status not in allowed_values):
            raise ValueError(
                "Invalid value for `service_order_status` ({0}), must be one of {1}"  # noqa: E501
                .format(service_order_status, allowed_values)
            )

        self._service_order_status = service_order_status

    @property
    def reset_status(self):
        """Gets the reset_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501


        :return: The reset_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :rtype: bool
        """
        return self._reset_status

    @reset_status.setter
    def reset_status(self, reset_status):
        """Sets the reset_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.


        :param reset_status: The reset_status of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :type: bool
        """

        self._reset_status = reset_status

    @property
    def email(self):
        """Gets the email of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501


        :return: The email of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.


        :param email: The email of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def password(self):
        """Gets the password of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501


        :return: The password of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :rtype: str
        """
        return self._password

    @password.setter
    def password(self, password):
        """Sets the password of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.


        :param password: The password of this QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel.  # noqa: E501
        :type: str
        """

        self._password = password

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel):
            return True

        return self.to_dict() != other.to_dict()
