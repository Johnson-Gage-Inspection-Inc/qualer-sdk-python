# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_set_id': 'int',
        'measurement_name': 'str',
        'is_accredited': 'bool',
        'use_expected_value': 'bool',
        'decimal_places': 'int',
        'significant_figures': 'int',
        'influence_parameter1_type': 'str',
        'influence_parameter1_tool_type_id': 'int',
        'influence_parameter1_parameter_id': 'int',
        'influence_parameter1_source': 'str',
        'influence_parameter1_value': 'str',
        'influence_parameter2_type': 'str',
        'influence_parameter2_tool_type_id': 'int',
        'influence_parameter2_parameter_id': 'int',
        'influence_parameter2_source': 'str',
        'influence_parameter2_value': 'str',
        'measurement_points': 'list[QualerApiModelsMeasurementsToUpdateMeasurementPointResponseModel]',
        'measurement_fields': 'list[QualerApiModelsMeasurementsToUpdateMeasurementFieldResponseModel]'
    }

    attribute_map = {
        'measurement_set_id': 'MeasurementSetId',
        'measurement_name': 'MeasurementName',
        'is_accredited': 'IsAccredited',
        'use_expected_value': 'UseExpectedValue',
        'decimal_places': 'DecimalPlaces',
        'significant_figures': 'SignificantFigures',
        'influence_parameter1_type': 'InfluenceParameter1Type',
        'influence_parameter1_tool_type_id': 'InfluenceParameter1ToolTypeId',
        'influence_parameter1_parameter_id': 'InfluenceParameter1ParameterId',
        'influence_parameter1_source': 'InfluenceParameter1Source',
        'influence_parameter1_value': 'InfluenceParameter1Value',
        'influence_parameter2_type': 'InfluenceParameter2Type',
        'influence_parameter2_tool_type_id': 'InfluenceParameter2ToolTypeId',
        'influence_parameter2_parameter_id': 'InfluenceParameter2ParameterId',
        'influence_parameter2_source': 'InfluenceParameter2Source',
        'influence_parameter2_value': 'InfluenceParameter2Value',
        'measurement_points': 'MeasurementPoints',
        'measurement_fields': 'MeasurementFields'
    }

    def __init__(self, measurement_set_id=None, measurement_name=None, is_accredited=None, use_expected_value=None, decimal_places=None, significant_figures=None, influence_parameter1_type=None, influence_parameter1_tool_type_id=None, influence_parameter1_parameter_id=None, influence_parameter1_source=None, influence_parameter1_value=None, influence_parameter2_type=None, influence_parameter2_tool_type_id=None, influence_parameter2_parameter_id=None, influence_parameter2_source=None, influence_parameter2_value=None, measurement_points=None, measurement_fields=None, _configuration=None):  # noqa: E501
        """QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._measurement_set_id = None
        self._measurement_name = None
        self._is_accredited = None
        self._use_expected_value = None
        self._decimal_places = None
        self._significant_figures = None
        self._influence_parameter1_type = None
        self._influence_parameter1_tool_type_id = None
        self._influence_parameter1_parameter_id = None
        self._influence_parameter1_source = None
        self._influence_parameter1_value = None
        self._influence_parameter2_type = None
        self._influence_parameter2_tool_type_id = None
        self._influence_parameter2_parameter_id = None
        self._influence_parameter2_source = None
        self._influence_parameter2_value = None
        self._measurement_points = None
        self._measurement_fields = None
        self.discriminator = None

        if measurement_set_id is not None:
            self.measurement_set_id = measurement_set_id
        if measurement_name is not None:
            self.measurement_name = measurement_name
        if is_accredited is not None:
            self.is_accredited = is_accredited
        if use_expected_value is not None:
            self.use_expected_value = use_expected_value
        if decimal_places is not None:
            self.decimal_places = decimal_places
        if significant_figures is not None:
            self.significant_figures = significant_figures
        if influence_parameter1_type is not None:
            self.influence_parameter1_type = influence_parameter1_type
        if influence_parameter1_tool_type_id is not None:
            self.influence_parameter1_tool_type_id = influence_parameter1_tool_type_id
        if influence_parameter1_parameter_id is not None:
            self.influence_parameter1_parameter_id = influence_parameter1_parameter_id
        if influence_parameter1_source is not None:
            self.influence_parameter1_source = influence_parameter1_source
        if influence_parameter1_value is not None:
            self.influence_parameter1_value = influence_parameter1_value
        if influence_parameter2_type is not None:
            self.influence_parameter2_type = influence_parameter2_type
        if influence_parameter2_tool_type_id is not None:
            self.influence_parameter2_tool_type_id = influence_parameter2_tool_type_id
        if influence_parameter2_parameter_id is not None:
            self.influence_parameter2_parameter_id = influence_parameter2_parameter_id
        if influence_parameter2_source is not None:
            self.influence_parameter2_source = influence_parameter2_source
        if influence_parameter2_value is not None:
            self.influence_parameter2_value = influence_parameter2_value
        if measurement_points is not None:
            self.measurement_points = measurement_points
        if measurement_fields is not None:
            self.measurement_fields = measurement_fields

    @property
    def measurement_set_id(self):
        """Gets the measurement_set_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The measurement_set_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._measurement_set_id

    @measurement_set_id.setter
    def measurement_set_id(self, measurement_set_id):
        """Sets the measurement_set_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param measurement_set_id: The measurement_set_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._measurement_set_id = measurement_set_id

    @property
    def measurement_name(self):
        """Gets the measurement_name of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The measurement_name of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._measurement_name

    @measurement_name.setter
    def measurement_name(self, measurement_name):
        """Sets the measurement_name of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param measurement_name: The measurement_name of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """

        self._measurement_name = measurement_name

    @property
    def is_accredited(self):
        """Gets the is_accredited of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The is_accredited of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_accredited

    @is_accredited.setter
    def is_accredited(self, is_accredited):
        """Sets the is_accredited of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param is_accredited: The is_accredited of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_accredited = is_accredited

    @property
    def use_expected_value(self):
        """Gets the use_expected_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The use_expected_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._use_expected_value

    @use_expected_value.setter
    def use_expected_value(self, use_expected_value):
        """Sets the use_expected_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param use_expected_value: The use_expected_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: bool
        """

        self._use_expected_value = use_expected_value

    @property
    def decimal_places(self):
        """Gets the decimal_places of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The decimal_places of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._decimal_places

    @decimal_places.setter
    def decimal_places(self, decimal_places):
        """Sets the decimal_places of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param decimal_places: The decimal_places of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._decimal_places = decimal_places

    @property
    def significant_figures(self):
        """Gets the significant_figures of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The significant_figures of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._significant_figures

    @significant_figures.setter
    def significant_figures(self, significant_figures):
        """Sets the significant_figures of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param significant_figures: The significant_figures of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._significant_figures = significant_figures

    @property
    def influence_parameter1_type(self):
        """Gets the influence_parameter1_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter1_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter1_type

    @influence_parameter1_type.setter
    def influence_parameter1_type(self, influence_parameter1_type):
        """Sets the influence_parameter1_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter1_type: The influence_parameter1_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["MeasurementQuantity", "StaticValue", "UutAttribute", "ToolAttribute", "CustomField", "ManuallySelected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                influence_parameter1_type not in allowed_values):
            raise ValueError(
                "Invalid value for `influence_parameter1_type` ({0}), must be one of {1}"  # noqa: E501
                .format(influence_parameter1_type, allowed_values)
            )

        self._influence_parameter1_type = influence_parameter1_type

    @property
    def influence_parameter1_tool_type_id(self):
        """Gets the influence_parameter1_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter1_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter1_tool_type_id

    @influence_parameter1_tool_type_id.setter
    def influence_parameter1_tool_type_id(self, influence_parameter1_tool_type_id):
        """Sets the influence_parameter1_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter1_tool_type_id: The influence_parameter1_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter1_tool_type_id = influence_parameter1_tool_type_id

    @property
    def influence_parameter1_parameter_id(self):
        """Gets the influence_parameter1_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter1_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter1_parameter_id

    @influence_parameter1_parameter_id.setter
    def influence_parameter1_parameter_id(self, influence_parameter1_parameter_id):
        """Sets the influence_parameter1_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter1_parameter_id: The influence_parameter1_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter1_parameter_id = influence_parameter1_parameter_id

    @property
    def influence_parameter1_source(self):
        """Gets the influence_parameter1_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter1_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter1_source

    @influence_parameter1_source.setter
    def influence_parameter1_source(self, influence_parameter1_source):
        """Sets the influence_parameter1_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter1_source: The influence_parameter1_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter1_source = influence_parameter1_source

    @property
    def influence_parameter1_value(self):
        """Gets the influence_parameter1_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter1_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter1_value

    @influence_parameter1_value.setter
    def influence_parameter1_value(self, influence_parameter1_value):
        """Sets the influence_parameter1_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter1_value: The influence_parameter1_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter1_value = influence_parameter1_value

    @property
    def influence_parameter2_type(self):
        """Gets the influence_parameter2_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter2_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter2_type

    @influence_parameter2_type.setter
    def influence_parameter2_type(self, influence_parameter2_type):
        """Sets the influence_parameter2_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter2_type: The influence_parameter2_type of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["MeasurementQuantity", "StaticValue", "UutAttribute", "ToolAttribute", "CustomField", "ManuallySelected"]  # noqa: E501
        if (self._configuration.client_side_validation and
                influence_parameter2_type not in allowed_values):
            raise ValueError(
                "Invalid value for `influence_parameter2_type` ({0}), must be one of {1}"  # noqa: E501
                .format(influence_parameter2_type, allowed_values)
            )

        self._influence_parameter2_type = influence_parameter2_type

    @property
    def influence_parameter2_tool_type_id(self):
        """Gets the influence_parameter2_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter2_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter2_tool_type_id

    @influence_parameter2_tool_type_id.setter
    def influence_parameter2_tool_type_id(self, influence_parameter2_tool_type_id):
        """Sets the influence_parameter2_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter2_tool_type_id: The influence_parameter2_tool_type_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter2_tool_type_id = influence_parameter2_tool_type_id

    @property
    def influence_parameter2_parameter_id(self):
        """Gets the influence_parameter2_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter2_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._influence_parameter2_parameter_id

    @influence_parameter2_parameter_id.setter
    def influence_parameter2_parameter_id(self, influence_parameter2_parameter_id):
        """Sets the influence_parameter2_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter2_parameter_id: The influence_parameter2_parameter_id of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: int
        """

        self._influence_parameter2_parameter_id = influence_parameter2_parameter_id

    @property
    def influence_parameter2_source(self):
        """Gets the influence_parameter2_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter2_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter2_source

    @influence_parameter2_source.setter
    def influence_parameter2_source(self, influence_parameter2_source):
        """Sets the influence_parameter2_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter2_source: The influence_parameter2_source of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter2_source = influence_parameter2_source

    @property
    def influence_parameter2_value(self):
        """Gets the influence_parameter2_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The influence_parameter2_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._influence_parameter2_value

    @influence_parameter2_value.setter
    def influence_parameter2_value(self, influence_parameter2_value):
        """Sets the influence_parameter2_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param influence_parameter2_value: The influence_parameter2_value of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: str
        """

        self._influence_parameter2_value = influence_parameter2_value

    @property
    def measurement_points(self):
        """Gets the measurement_points of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The measurement_points of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsToUpdateMeasurementPointResponseModel]
        """
        return self._measurement_points

    @measurement_points.setter
    def measurement_points(self, measurement_points):
        """Sets the measurement_points of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param measurement_points: The measurement_points of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsToUpdateMeasurementPointResponseModel]
        """

        self._measurement_points = measurement_points

    @property
    def measurement_fields(self):
        """Gets the measurement_fields of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501


        :return: The measurement_fields of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsToUpdateMeasurementFieldResponseModel]
        """
        return self._measurement_fields

    @measurement_fields.setter
    def measurement_fields(self, measurement_fields):
        """Sets the measurement_fields of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.


        :param measurement_fields: The measurement_fields of this QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsToUpdateMeasurementFieldResponseModel]
        """

        self._measurement_fields = measurement_fields

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToUpdateMeasurementSetResponseModel):
            return True

        return self.to_dict() != other.to_dict()
