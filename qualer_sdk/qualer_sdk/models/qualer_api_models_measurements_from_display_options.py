# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsMeasurementsFromDisplayOptions(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'err': 'bool',
        'mean': 'bool',
        'max': 'bool',
        'min': 'bool',
        'sd': 'bool',
        'cv': 'bool',
        'tar': 'bool',
        'tur': 'bool',
        'mu': 'bool',
        'cmc': 'bool',
        'tol': 'bool',
        'delta': 'bool',
        'range': 'bool'
    }

    attribute_map = {
        'err': 'Err',
        'mean': 'Mean',
        'max': 'Max',
        'min': 'Min',
        'sd': 'Sd',
        'cv': 'Cv',
        'tar': 'Tar',
        'tur': 'Tur',
        'mu': 'Mu',
        'cmc': 'Cmc',
        'tol': 'Tol',
        'delta': 'Delta',
        'range': 'Range'
    }

    def __init__(self, err=None, mean=None, max=None, min=None, sd=None, cv=None, tar=None, tur=None, mu=None, cmc=None, tol=None, delta=None, range=None, _configuration=None):  # noqa: E501
        """QualerApiModelsMeasurementsFromDisplayOptions - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._err = None
        self._mean = None
        self._max = None
        self._min = None
        self._sd = None
        self._cv = None
        self._tar = None
        self._tur = None
        self._mu = None
        self._cmc = None
        self._tol = None
        self._delta = None
        self._range = None
        self.discriminator = None

        if err is not None:
            self.err = err
        if mean is not None:
            self.mean = mean
        if max is not None:
            self.max = max
        if min is not None:
            self.min = min
        if sd is not None:
            self.sd = sd
        if cv is not None:
            self.cv = cv
        if tar is not None:
            self.tar = tar
        if tur is not None:
            self.tur = tur
        if mu is not None:
            self.mu = mu
        if cmc is not None:
            self.cmc = cmc
        if tol is not None:
            self.tol = tol
        if delta is not None:
            self.delta = delta
        if range is not None:
            self.range = range

    @property
    def err(self):
        """Gets the err of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The err of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._err

    @err.setter
    def err(self, err):
        """Sets the err of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param err: The err of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._err = err

    @property
    def mean(self):
        """Gets the mean of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The mean of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param mean: The mean of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._mean = mean

    @property
    def max(self):
        """Gets the max of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The max of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._max

    @max.setter
    def max(self, max):
        """Sets the max of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param max: The max of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._max = max

    @property
    def min(self):
        """Gets the min of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The min of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._min

    @min.setter
    def min(self, min):
        """Sets the min of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param min: The min of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._min = min

    @property
    def sd(self):
        """Gets the sd of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The sd of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._sd

    @sd.setter
    def sd(self, sd):
        """Sets the sd of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param sd: The sd of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._sd = sd

    @property
    def cv(self):
        """Gets the cv of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The cv of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._cv

    @cv.setter
    def cv(self, cv):
        """Sets the cv of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param cv: The cv of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._cv = cv

    @property
    def tar(self):
        """Gets the tar of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The tar of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tar

    @tar.setter
    def tar(self, tar):
        """Sets the tar of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param tar: The tar of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._tar = tar

    @property
    def tur(self):
        """Gets the tur of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The tur of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tur

    @tur.setter
    def tur(self, tur):
        """Sets the tur of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param tur: The tur of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._tur = tur

    @property
    def mu(self):
        """Gets the mu of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The mu of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._mu

    @mu.setter
    def mu(self, mu):
        """Sets the mu of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param mu: The mu of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._mu = mu

    @property
    def cmc(self):
        """Gets the cmc of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The cmc of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._cmc

    @cmc.setter
    def cmc(self, cmc):
        """Sets the cmc of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param cmc: The cmc of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._cmc = cmc

    @property
    def tol(self):
        """Gets the tol of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The tol of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._tol

    @tol.setter
    def tol(self, tol):
        """Sets the tol of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param tol: The tol of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._tol = tol

    @property
    def delta(self):
        """Gets the delta of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The delta of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param delta: The delta of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._delta = delta

    @property
    def range(self):
        """Gets the range of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501


        :return: The range of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :rtype: bool
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this QualerApiModelsMeasurementsFromDisplayOptions.


        :param range: The range of this QualerApiModelsMeasurementsFromDisplayOptions.  # noqa: E501
        :type: bool
        """

        self._range = range

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsMeasurementsFromDisplayOptions, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsMeasurementsFromDisplayOptions):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsMeasurementsFromDisplayOptions):
            return True

        return self.to_dict() != other.to_dict()
