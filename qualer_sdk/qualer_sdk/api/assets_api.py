# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AssetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clear_collected_assets(self, asset_ids, **kwargs):  # noqa: E501
        """ClearCollectedAssets(int[] assetIds)  # noqa: E501

        [123,234,567] removes assets with selected Ids                [] removes all assets from QuickCollection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_collected_assets(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clear_collected_assets_with_http_info(asset_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.clear_collected_assets_with_http_info(asset_ids, **kwargs)  # noqa: E501
            return data

    def clear_collected_assets_with_http_info(self, asset_ids, **kwargs):  # noqa: E501
        """ClearCollectedAssets(int[] assetIds)  # noqa: E501

        [123,234,567] removes assets with selected Ids                [] removes all assets from QuickCollection  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clear_collected_assets_with_http_info(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clear_collected_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_ids' is set
        if self.api_client.client_side_validation and ('asset_ids' not in params or
                                                       params['asset_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_ids` when calling `clear_collected_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'asset_ids' in params:
            body_params = params['asset_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/collection/remove', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def collect_assets(self, asset_ids, **kwargs):  # noqa: E501
        """CollectAssets(int[] assetIds)  # noqa: E501

        [123,234,567]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_assets(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.collect_assets_with_http_info(asset_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.collect_assets_with_http_info(asset_ids, **kwargs)  # noqa: E501
            return data

    def collect_assets_with_http_info(self, asset_ids, **kwargs):  # noqa: E501
        """CollectAssets(int[] assetIds)  # noqa: E501

        [123,234,567]  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.collect_assets_with_http_info(asset_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method collect_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_ids' is set
        if self.api_client.client_side_validation and ('asset_ids' not in params or
                                                       params['asset_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_ids` when calling `collect_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'asset_ids' in params:
            body_params = params['asset_ids']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/collection/add', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_assets(self, **kwargs):  # noqa: E501
        """get_all_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_assets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_assets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_all_assets_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_all_assets_with_http_info(self, **kwargs):  # noqa: E501
        """get_all_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_assets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_assets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset(self, id, **kwargs):  # noqa: E501
        """get_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: QualerApiModelsAssetToAssetResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_asset_with_http_info(self, id, **kwargs):  # noqa: E501
        """get_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: QualerApiModelsAssetToAssetResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetToAssetResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_by_asset_pool(self, asset_pool_id, **kwargs):  # noqa: E501
        """get_asset_by_asset_pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_asset_pool(asset_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_pool_id: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_by_asset_pool_with_http_info(asset_pool_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_by_asset_pool_with_http_info(asset_pool_id, **kwargs)  # noqa: E501
            return data

    def get_asset_by_asset_pool_with_http_info(self, asset_pool_id, **kwargs):  # noqa: E501
        """get_asset_by_asset_pool  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_asset_pool_with_http_info(asset_pool_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_pool_id: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_pool_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_asset_pool" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_pool_id' is set
        if self.api_client.client_side_validation and ('asset_pool_id' not in params or
                                                       params['asset_pool_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_pool_id` when calling `get_asset_by_asset_pool`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_pool_id' in params:
            path_params['assetPoolId'] = params['asset_pool_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byassetpool/{assetPoolId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_by_asset_tag(self, asset_tag, **kwargs):  # noqa: E501
        """get_asset_by_asset_tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_asset_tag(asset_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_tag: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_by_asset_tag_with_http_info(asset_tag, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_by_asset_tag_with_http_info(asset_tag, **kwargs)  # noqa: E501
            return data

    def get_asset_by_asset_tag_with_http_info(self, asset_tag, **kwargs):  # noqa: E501
        """get_asset_by_asset_tag  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_asset_tag_with_http_info(asset_tag, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_tag: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_tag']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_asset_tag" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_tag' is set
        if self.api_client.client_side_validation and ('asset_tag' not in params or
                                                       params['asset_tag'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_tag` when calling `get_asset_by_asset_tag`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_tag' in params:
            path_params['assetTag'] = params['asset_tag']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byassettag/{assetTag}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_by_attribute(self, **kwargs):  # noqa: E501
        """get_asset_by_attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_attribute(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name:
        :param str model_value:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_by_attribute_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_by_attribute_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_asset_by_attribute_with_http_info(self, **kwargs):  # noqa: E501
        """get_asset_by_attribute  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_attribute_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_name:
        :param str model_value:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_name', 'model_value']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_attribute" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_name' in params:
            query_params.append(('model.name', params['model_name']))  # noqa: E501
        if 'model_value' in params:
            query_params.append(('model.value', params['model_value']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byattribute', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_by_barcode(self, barcode, **kwargs):  # noqa: E501
        """get_asset_by_barcode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_barcode(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_by_barcode_with_http_info(barcode, **kwargs)  # noqa: E501
            return data

    def get_asset_by_barcode_with_http_info(self, barcode, **kwargs):  # noqa: E501
        """get_asset_by_barcode  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_barcode_with_http_info(barcode, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str barcode: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['barcode']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_barcode" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'barcode' is set
        if self.api_client.client_side_validation and ('barcode' not in params or
                                                       params['barcode'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `barcode` when calling `get_asset_by_barcode`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'barcode' in params:
            path_params['barcode'] = params['barcode']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/bybarcode/{barcode}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_by_serial_number(self, serial_number, **kwargs):  # noqa: E501
        """get_asset_by_serial_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_serial_number(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_by_serial_number_with_http_info(serial_number, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_by_serial_number_with_http_info(serial_number, **kwargs)  # noqa: E501
            return data

    def get_asset_by_serial_number_with_http_info(self, serial_number, **kwargs):  # noqa: E501
        """get_asset_by_serial_number  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_by_serial_number_with_http_info(serial_number, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str serial_number: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['serial_number']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_by_serial_number" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'serial_number' is set
        if self.api_client.client_side_validation and ('serial_number' not in params or
                                                       params['serial_number'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `serial_number` when calling `get_asset_by_serial_number`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'serial_number' in params:
            path_params['serialNumber'] = params['serial_number']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byserialnumber/{serialNumber}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_images(self, id, **kwargs):  # noqa: E501
        """GetAssetImages  # noqa: E501

        returns list of asset image urls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_images(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_images_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_images_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def get_asset_images_with_http_info(self, id, **kwargs):  # noqa: E501
        """GetAssetImages  # noqa: E501

        returns list of asset image urls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_images_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `get_asset_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_manager_counters(self, **kwargs):  # noqa: E501
        """GetAssetManagerCounters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_manager_counters(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_search_string:
        :return: QualerApiModelsAssetToAssetsCountResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_manager_counters_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_manager_counters_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_asset_manager_counters_with_http_info(self, **kwargs):  # noqa: E501
        """GetAssetManagerCounters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_manager_counters_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_search_string:
        :return: QualerApiModelsAssetToAssetsCountResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_search_string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_manager_counters" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_search_string' in params:
            query_params.append(('model.searchString', params['model_search_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetToAssetsCountResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_manager_list(self, **kwargs):  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        filterType: Unset, DueForService, RecentlyServiced, NotServiced, RecentlyPurchased,      WarrantyExpiring, DueForReplacement, OutOfService,      PastDue, ServicePending, CollectedAssets,  WithoutSchedule, WithoutVendor,      WithoutProduct, Added, Modified, Deleted,      NoAgreement, ExpiredAgreement, AgreementUpForRenewal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_manager_list(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_filter_type:
        :param str model_search_string:
        :param int model_page:
        :param int model_page_size:
        :return: list[QualerApiModelsAssetToAssetManageResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_manager_list_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_manager_list_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_asset_manager_list_with_http_info(self, **kwargs):  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        filterType: Unset, DueForService, RecentlyServiced, NotServiced, RecentlyPurchased,      WarrantyExpiring, DueForReplacement, OutOfService,      PastDue, ServicePending, CollectedAssets,  WithoutSchedule, WithoutVendor,      WithoutProduct, Added, Modified, Deleted,      NoAgreement, ExpiredAgreement, AgreementUpForRenewal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_manager_list_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_filter_type:
        :param str model_search_string:
        :param int model_page:
        :param int model_page_size:
        :return: list[QualerApiModelsAssetToAssetManageResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_filter_type', 'model_search_string', 'model_page', 'model_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_manager_list" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_filter_type' in params:
            query_params.append(('model.filterType', params['model_filter_type']))  # noqa: E501
        if 'model_search_string' in params:
            query_params.append(('model.searchString', params['model_search_string']))  # noqa: E501
        if 'model_page' in params:
            query_params.append(('model.page', params['model_page']))  # noqa: E501
        if 'model_page_size' in params:
            query_params.append(('model.pageSize', params['model_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byfilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetManageResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_assets_by_equipment_id(self, equipment_id, **kwargs):  # noqa: E501
        """get_assets_by_equipment_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assets_by_equipment_id(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str equipment_id: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_assets_by_equipment_id_with_http_info(equipment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_assets_by_equipment_id_with_http_info(equipment_id, **kwargs)  # noqa: E501
            return data

    def get_assets_by_equipment_id_with_http_info(self, equipment_id, **kwargs):  # noqa: E501
        """get_assets_by_equipment_id  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_assets_by_equipment_id_with_http_info(equipment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str equipment_id: (required)
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['equipment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assets_by_equipment_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'equipment_id' is set
        if self.api_client.client_side_validation and ('equipment_id' not in params or
                                                       params['equipment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `equipment_id` when calling `get_assets_by_equipment_id`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'equipment_id' in params:
            path_params['equipmentId'] = params['equipment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/byequipmentid/{equipmentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def post_asset_images(self, id, **kwargs):  # noqa: E501
        """PostAssetImages  # noqa: E501

        returns list of asset image urls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_asset_images(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.post_asset_images_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.post_asset_images_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def post_asset_images_with_http_info(self, id, **kwargs):  # noqa: E501
        """PostAssetImages  # noqa: E501

        returns list of asset image urls  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_asset_images_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_asset_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `post_asset_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_asset_class(self, id, model, **kwargs):  # noqa: E501
        """update_asset_class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_class(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetClassModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_asset_class_with_http_info(id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.update_asset_class_with_http_info(id, model, **kwargs)  # noqa: E501
            return data

    def update_asset_class_with_http_info(self, id, model, **kwargs):  # noqa: E501
        """update_asset_class  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_class_with_http_info(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetClassModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_class" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_asset_class`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `update_asset_class`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}/class', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_asset_department(self, id, model, **kwargs):  # noqa: E501
        """update_asset_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_department(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetDepartmentModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_asset_department_with_http_info(id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.update_asset_department_with_http_info(id, model, **kwargs)  # noqa: E501
            return data

    def update_asset_department_with_http_info(self, id, model, **kwargs):  # noqa: E501
        """update_asset_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_department_with_http_info(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetDepartmentModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_asset_department`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `update_asset_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}/department', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_asset_room(self, id, model, **kwargs):  # noqa: E501
        """update_asset_room  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_room(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetRoomModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_asset_room_with_http_info(id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.update_asset_room_with_http_info(id, model, **kwargs)  # noqa: E501
            return data

    def update_asset_room_with_http_info(self, id, model, **kwargs):  # noqa: E501
        """update_asset_room  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_room_with_http_info(id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int id: (required)
        :param QualerApiModelsAssetFromUpdateAssetRoomModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_room" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if self.api_client.client_side_validation and ('id' not in params or
                                                       params['id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `id` when calling `update_asset_room`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `update_asset_room`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{id}/room', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_room(self, model, **kwargs):  # noqa: E501
        """update_room  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_room(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetFromUpdateRoomModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_room_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.update_room_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def update_room_with_http_info(self, model, **kwargs):  # noqa: E501
        """update_room  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_room_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetFromUpdateRoomModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_room" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `update_room`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/room', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
