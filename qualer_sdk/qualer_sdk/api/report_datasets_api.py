# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ReportDatasetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def channel_uniformity_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """channel_uniformity_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channel_uniformity_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.channel_uniformity_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.channel_uniformity_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def channel_uniformity_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """channel_uniformity_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.channel_uniformity_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method channel_uniformity_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `channel_uniformity_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/ChannelUniformity', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_measurements(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_all_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_measurements(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementAllResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_all_measurements_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_all_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_measurements_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementAllResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_measurements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_all_measurements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/Measurements/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementAllResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_measurements_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_all_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_measurements_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementAllResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_all_measurements_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_all_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_measurements_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementAllResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_measurements_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_all_measurements_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/Measurements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementAllResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_as_found_measurements(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_as_found_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_found_measurements(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_as_found_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_as_found_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_as_found_measurements_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_as_found_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_found_measurements_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_as_found_measurements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_as_found_measurements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/MeasurementsAsFound/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_as_found_measurements_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_as_found_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_found_measurements_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_as_found_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_as_found_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_as_found_measurements_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_as_found_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_found_measurements_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_as_found_measurements_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_as_found_measurements_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/MeasurementsAsFound', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_as_left_measurements(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_as_left_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_left_measurements(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_as_left_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_as_left_measurements_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_as_left_measurements_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_as_left_measurements  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_left_measurements_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_as_left_measurements" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_as_left_measurements`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/MeasurementsAsLeft/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_as_left_measurements_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_as_left_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_left_measurements_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_as_left_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_as_left_measurements_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_as_left_measurements_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_as_left_measurements_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_as_left_measurements_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_as_left_measurements_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_as_left_measurements_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/MeasurementsAsLeft', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_attributes(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_asset_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_attributes(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToAssetAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_asset_attributes_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_asset_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_attributes_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToAssetAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_asset_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/AssetAttributes/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToAssetAttributeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_asset_service_records(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: QualerApiModelsReportDatasetsToAssetSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_asset_service_records_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_service_records_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_asset_service_records_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: QualerApiModelsReportDatasetsToAssetSummaryResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_records" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_asset_service_records`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/AssetServiceRecords/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsReportDatasetsToAssetSummaryResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_results(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_channel_results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_results(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_channel_results_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_channel_results_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_channel_results_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_channel_results  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_results_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_results" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_channel_results`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ChannelResults/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_results_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_channel_results_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_results_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_channel_results_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_channel_results_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_channel_results_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_channel_results_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_results_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_results_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_channel_results_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/ChannelResults', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementChannelResultResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_channel_uniformity(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_channel_uniformity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_uniformity(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_channel_uniformity_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_channel_uniformity_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_channel_uniformity_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_channel_uniformity  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_channel_uniformity_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_channel_uniformity" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_channel_uniformity`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ChannelUniformity/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_client_attributes(self, service_order_id, **kwargs):  # noqa: E501
        """get_client_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_attributes(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsReportDatasetsToClientAttributeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_client_attributes_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_client_attributes_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_client_attributes_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_client_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_client_attributes_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsReportDatasetsToClientAttributeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_client_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_client_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ClientAttributes/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsReportDatasetsToClientAttributeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_company_certifications(self, **kwargs):  # noqa: E501
        """get_company_certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company_certifications(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsReportDatasetsToCompanyCertificationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_company_certifications_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_company_certifications_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_company_certifications_with_http_info(self, **kwargs):  # noqa: E501
        """get_company_certifications  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_company_certifications_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsReportDatasetsToCompanyCertificationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company_certifications" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/CompanyCertifications', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToCompanyCertificationResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_external_data_reports(self, service_order_id, service_order_item_ids, **kwargs):  # noqa: E501
        """get_external_data_reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_external_data_reports(service_order_id, service_order_item_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param list[int] service_order_item_ids: (required)
        :return: list[QualerApiModelsReportDatasetsToExternalDataReportResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_external_data_reports_with_http_info(service_order_id, service_order_item_ids, **kwargs)  # noqa: E501
        else:
            (data) = self.get_external_data_reports_with_http_info(service_order_id, service_order_item_ids, **kwargs)  # noqa: E501
            return data

    def get_external_data_reports_with_http_info(self, service_order_id, service_order_item_ids, **kwargs):  # noqa: E501
        """get_external_data_reports  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_external_data_reports_with_http_info(service_order_id, service_order_item_ids, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param list[int] service_order_item_ids: (required)
        :return: list[QualerApiModelsReportDatasetsToExternalDataReportResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'service_order_item_ids']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_external_data_reports" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_external_data_reports`")  # noqa: E501
        # verify the required parameter 'service_order_item_ids' is set
        if self.api_client.client_side_validation and ('service_order_item_ids' not in params or
                                                       params['service_order_item_ids'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_ids` when calling `get_external_data_reports`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []
        if 'service_order_item_ids' in params:
            query_params.append(('serviceOrderItemIds', params['service_order_item_ids']))  # noqa: E501
            collection_formats['serviceOrderItemIds'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/{serviceOrderId}/ExternalDataReports', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToExternalDataReportResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_measurement_charts(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_measurement_charts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_charts(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChartResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measurement_charts_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measurement_charts_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_measurement_charts_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_measurement_charts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_charts_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementChartResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurement_charts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_measurement_charts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/MeasurementChart/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementChartResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_measurement_fields(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_measurement_fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_fields(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measurement_fields_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measurement_fields_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_measurement_fields_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_measurement_fields  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_fields_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurement_fields" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_measurement_fields`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/MeasurementFields/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_measurement_fields_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_measurement_fields_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_fields_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_measurement_fields_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_measurement_fields_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_measurement_fields_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_measurement_fields_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_measurement_fields_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_measurement_fields_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_measurement_fields_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/MeasurementFields', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToMeasurementFieldResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_item_documents(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_order_item_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_item_documents(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToOrderItemImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_item_documents_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_item_documents_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_order_item_documents_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_order_item_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_item_documents_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToOrderItemImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_item_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_order_item_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/OrderItemDocuments/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToOrderItemImageResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_order_item_images(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_order_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_item_images(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToOrderItemImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_order_item_images_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_order_item_images_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_order_item_images_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_order_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_order_item_images_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToOrderItemImageResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_item_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_order_item_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/OrderItemImages/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToOrderItemImageResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_standards(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_reference_standards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reference_standards(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToReferenceStandardResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reference_standards_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_standards_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_reference_standards_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_reference_standards  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reference_standards_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToReferenceStandardResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_standards" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_reference_standards`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ReferenceStandards/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToReferenceStandardResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_reference_standards_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_reference_standards_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reference_standards_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToReferenceStandardResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_reference_standards_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_reference_standards_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_reference_standards_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_reference_standards_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_reference_standards_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToReferenceStandardResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_reference_standards_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_reference_standards_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/ReferenceStandards', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToReferenceStandardResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_assignees(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_assignees  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_assignees(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderAssigneeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_assignees_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_assignees_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_assignees_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_assignees  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_assignees_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderAssigneeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_assignees" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_assignees`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderAssignees/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderAssigneeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_charges(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_charges(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderChargeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_charges_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_charges_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_charges_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_charges_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderChargeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderCharges/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderChargeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_components(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_components(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_components_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_components_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_components_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_components  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_components_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_components" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_service_order_item_components`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemComponents/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_components_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_components_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_components_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_components_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_components_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_components_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_components_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_components_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_components_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_item_components_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/ServiceOrderItemComponents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_fields_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_fields_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_fields_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_fields_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_fields_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_fields_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_fields_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_fields_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_fields_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_item_fields_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemFieldsByOrder/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_options(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_options(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemOptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_options_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_options_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_options_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_options  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_options_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemOptionResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_options" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_service_order_item_options`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemOptions/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemOptionResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_status_history_async(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_status_history_async  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_status_history_async(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_status_history_async_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_status_history_async_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_status_history_async_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_status_history_async  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_status_history_async_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_status_history_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_service_order_item_status_history_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemStatusHistory/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_tasks_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_tasks_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_tasks_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_tasks_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_tasks_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_tasks_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_item_tasks_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_tasks_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_tasks_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_item_tasks_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemTasksByOrder/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_item_tasks_by_order_items(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_tasks_by_order_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_tasks_by_order_items(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_item_tasks_by_order_items_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_item_tasks_by_order_items_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_item_tasks_by_order_items_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_item_tasks_by_order_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_item_tasks_by_order_items_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_item_tasks_by_order_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_service_order_item_tasks_by_order_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItemTasksByOrderItem/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemTaskResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_items(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_items(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_items_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_items_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_items_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_service_order_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_items_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_service_order_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderItems/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_items_by_order(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_items_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_items_by_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_items_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_items_by_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_items_by_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_items_by_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_items_by_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_items_by_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_items_by_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/orders/{serviceOrderId}/ServiceOrderItems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderItemResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_order_tasks(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_tasks(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_order_tasks_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_order_tasks_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_order_tasks_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_order_tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_order_tasks_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsReportDatasetsToServiceOrderTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_order_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_order_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrderTasks/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToServiceOrderTaskResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_service_orders(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_orders(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsReportDatasetsToServiceOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_service_orders_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_service_orders_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_service_orders_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_service_orders  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_service_orders_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsReportDatasetsToServiceOrderResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_service_orders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_service_orders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ServiceOrders/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsReportDatasetsToServiceOrderResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tool_attributes(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_tool_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_attributes(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToToolAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tool_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tool_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_tool_attributes_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_tool_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_attributes_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToToolAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tool_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_tool_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ToolAttributes/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToToolAttributeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tool_range_attributes(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_tool_range_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_range_attributes(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToToolRangeAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_tool_range_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tool_range_attributes_with_http_info(service_order_item_id, **kwargs)  # noqa: E501
            return data

    def get_tool_range_attributes_with_http_info(self, service_order_item_id, **kwargs):  # noqa: E501
        """get_tool_range_attributes  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_tool_range_attributes_with_http_info(service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :return: list[QualerApiModelsReportDatasetsToToolRangeAttributeResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tool_range_attributes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if self.api_client.client_side_validation and ('service_order_item_id' not in params or
                                                       params['service_order_item_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `get_tool_range_attributes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_item_id' in params:
            path_params['serviceOrderItemId'] = params['service_order_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/data/ToolRangeAttributes/{serviceOrderItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsReportDatasetsToToolRangeAttributeResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
