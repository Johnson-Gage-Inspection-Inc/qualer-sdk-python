# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderPaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def change_work_order_payment_status(self, service_order_id, model, **kwargs):  # noqa: E501
        """change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_work_order_payment_status(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromUpdatePaymentStatusModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.change_work_order_payment_status_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.change_work_order_payment_status_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
            return data

    def change_work_order_payment_status_with_http_info(self, service_order_id, model, **kwargs):  # noqa: E501
        """change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.change_work_order_payment_status_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromUpdatePaymentStatusModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_work_order_payment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `change_work_order_payment_status`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `change_work_order_payment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_work_order_payment(self, service_order_id, model, **kwargs):  # noqa: E501
        """create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_order_payment(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromAddPaymentModel model: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_work_order_payment_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.create_work_order_payment_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
            return data

    def create_work_order_payment_with_http_info(self, service_order_id, model, **kwargs):  # noqa: E501
        """create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_work_order_payment_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromAddPaymentModel model: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_work_order_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `create_work_order_payment`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `create_work_order_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_all_work_order_payments(self, service_order_id, **kwargs):  # noqa: E501
        """get_all_work_order_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_work_order_payments(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToPaymentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_all_work_order_payments_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_all_work_order_payments_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def get_all_work_order_payments_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_all_work_order_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_all_work_order_payments_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToPaymentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_work_order_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `get_all_work_order_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToPaymentResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_work_order_payment(self, service_order_payment_id, **kwargs):  # noqa: E501
        """get_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_order_payment(service_order_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_payment_id: (required)
        :return: QualerApiModelsServiceOrdersToPaymentResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_work_order_payment_with_http_info(service_order_payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_work_order_payment_with_http_info(service_order_payment_id, **kwargs)  # noqa: E501
            return data

    def get_work_order_payment_with_http_info(self, service_order_payment_id, **kwargs):  # noqa: E501
        """get_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_order_payment_with_http_info(service_order_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_payment_id: (required)
        :return: QualerApiModelsServiceOrdersToPaymentResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_order_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_payment_id' is set
        if self.api_client.client_side_validation and ('service_order_payment_id' not in params or
                                                       params['service_order_payment_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_payment_id` when calling `get_work_order_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_payment_id' in params:
            path_params['serviceOrderPaymentId'] = params['service_order_payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/payments/{serviceOrderPaymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToPaymentResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
