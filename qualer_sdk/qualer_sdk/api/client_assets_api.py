# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ClientAssetsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def client_assets_create_asset(self, model, **kwargs):  # noqa: E501
        """client_assets_create_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_create_asset(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromAssetModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_create_asset_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_create_asset_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def client_assets_create_asset_with_http_info(self, model, **kwargs):  # noqa: E501
        """client_assets_create_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_create_asset_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromAssetModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_create_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `client_assets_create_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/assets', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_assets_get_all_assets(self, **kwargs):  # noqa: E501
        """client_assets_get_all_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_all_assets(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_equipment_id:
        :param str query_serial_number:
        :param str query_asset_tag:
        :param str query_barcode:
        :param str query_legacy_id:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_get_all_assets_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_get_all_assets_with_http_info(**kwargs)  # noqa: E501
            return data

    def client_assets_get_all_assets_with_http_info(self, **kwargs):  # noqa: E501
        """client_assets_get_all_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_all_assets_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str query_equipment_id:
        :param str query_serial_number:
        :param str query_asset_tag:
        :param str query_barcode:
        :param str query_legacy_id:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['query_equipment_id', 'query_serial_number', 'query_asset_tag', 'query_barcode', 'query_legacy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_get_all_assets" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'query_equipment_id' in params:
            query_params.append(('query.equipmentId', params['query_equipment_id']))  # noqa: E501
        if 'query_serial_number' in params:
            query_params.append(('query.serialNumber', params['query_serial_number']))  # noqa: E501
        if 'query_asset_tag' in params:
            query_params.append(('query.assetTag', params['query_asset_tag']))  # noqa: E501
        if 'query_barcode' in params:
            query_params.append(('query.barcode', params['query_barcode']))  # noqa: E501
        if 'query_legacy_id' in params:
            query_params.append(('query.legacyId', params['query_legacy_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_assets_get_asset(self, asset_id, **kwargs):  # noqa: E501
        """client_assets_get_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: (required)
        :param int model_asset_id:
        :return: QualerApiModelsAssetToAssetResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_get_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_get_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def client_assets_get_asset_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """client_assets_get_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_id: (required)
        :param int model_asset_id:
        :return: QualerApiModelsAssetToAssetResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'model_asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_get_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if self.api_client.client_side_validation and ('asset_id' not in params or
                                                       params['asset_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `asset_id` when calling `client_assets_get_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_id' in params:
            query_params.append(('assetId', params['asset_id']))  # noqa: E501
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/assets/{AssetId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetToAssetResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_assets_get_asset_counters(self, client_company_id, **kwargs):  # noqa: E501
        """client_assets_get_asset_counters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset_counters(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: QualerApiModelsAssetToClientAssetCountersResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_get_asset_counters_with_http_info(client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_get_asset_counters_with_http_info(client_company_id, **kwargs)  # noqa: E501
            return data

    def client_assets_get_asset_counters_with_http_info(self, client_company_id, **kwargs):  # noqa: E501
        """client_assets_get_asset_counters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset_counters_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: QualerApiModelsAssetToClientAssetCountersResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_get_asset_counters" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_company_id' is set
        if self.api_client.client_side_validation and ('client_company_id' not in params or
                                                       params['client_company_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_assets_get_asset_counters`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/counters', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetToClientAssetCountersResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_assets_get_asset_manager_list(self, client_company_id, **kwargs):  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        assetFilterType: ClientUnset, ClientAssetsCollected, ClientPastDue, ClientDueForService, ClientOutOfService, ClientWithoutSchedule                ClientDueForService - depends on Employee Filter Preference  POST api/user/filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset_manager_list(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id:  (required)
        :param str query_filter_type:
        :param str query_search_string:
        :param int query_page:
        :param int query_page_size:
        :return: list[QualerApiModelsAssetToClientAssetManagerResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_get_asset_manager_list_with_http_info(client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_get_asset_manager_list_with_http_info(client_company_id, **kwargs)  # noqa: E501
            return data

    def client_assets_get_asset_manager_list_with_http_info(self, client_company_id, **kwargs):  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        assetFilterType: ClientUnset, ClientAssetsCollected, ClientPastDue, ClientDueForService, ClientOutOfService, ClientWithoutSchedule                ClientDueForService - depends on Employee Filter Preference  POST api/user/filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_asset_manager_list_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id:  (required)
        :param str query_filter_type:
        :param str query_search_string:
        :param int query_page:
        :param int query_page_size:
        :return: list[QualerApiModelsAssetToClientAssetManagerResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_company_id', 'query_filter_type', 'query_search_string', 'query_page', 'query_page_size']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_get_asset_manager_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_company_id' is set
        if self.api_client.client_side_validation and ('client_company_id' not in params or
                                                       params['client_company_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_assets_get_asset_manager_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []
        if 'query_filter_type' in params:
            query_params.append(('query.filterType', params['query_filter_type']))  # noqa: E501
        if 'query_search_string' in params:
            query_params.append(('query.searchString', params['query_search_string']))  # noqa: E501
        if 'query_page' in params:
            query_params.append(('query.page', params['query_page']))  # noqa: E501
        if 'query_page_size' in params:
            query_params.append(('query.pageSize', params['query_page_size']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/assets/byfilter', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToClientAssetManagerResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_assets_get_assets(self, client_company_id, **kwargs):  # noqa: E501
        """client_assets_get_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_assets(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :param str query_equipment_id:
        :param str query_serial_number:
        :param str query_asset_tag:
        :param str query_barcode:
        :param str query_legacy_id:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_assets_get_assets_with_http_info(client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_assets_get_assets_with_http_info(client_company_id, **kwargs)  # noqa: E501
            return data

    def client_assets_get_assets_with_http_info(self, client_company_id, **kwargs):  # noqa: E501
        """client_assets_get_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_assets_get_assets_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :param str query_equipment_id:
        :param str query_serial_number:
        :param str query_asset_tag:
        :param str query_barcode:
        :param str query_legacy_id:
        :return: list[QualerApiModelsAssetToAssetResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_company_id', 'query_equipment_id', 'query_serial_number', 'query_asset_tag', 'query_barcode', 'query_legacy_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_assets_get_assets" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_company_id' is set
        if self.api_client.client_side_validation and ('client_company_id' not in params or
                                                       params['client_company_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_assets_get_assets`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []
        if 'query_equipment_id' in params:
            query_params.append(('query.equipmentId', params['query_equipment_id']))  # noqa: E501
        if 'query_serial_number' in params:
            query_params.append(('query.serialNumber', params['query_serial_number']))  # noqa: E501
        if 'query_asset_tag' in params:
            query_params.append(('query.assetTag', params['query_asset_tag']))  # noqa: E501
        if 'query_barcode' in params:
            query_params.append(('query.barcode', params['query_barcode']))  # noqa: E501
        if 'query_legacy_id' in params:
            query_params.append(('query.legacyId', params['query_legacy_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/assets', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetToAssetResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
