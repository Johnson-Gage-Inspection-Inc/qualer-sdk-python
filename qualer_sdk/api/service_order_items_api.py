# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_items_add_work_items(self, body, service_order_id, **kwargs):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_add_work_items(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromAddWorkItemsModel body: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_add_work_items_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_add_work_items_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_add_work_items_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_add_work_items_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromAddWorkItemsModel body: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_add_work_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_items_add_work_items`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_items_add_work_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'asset_ids' in params:
            form_params.append(('AssetIds', params['asset_ids']))  # noqa: E501
            collection_formats['AssetIds'] = 'multi'  # noqa: E501
        if 'schedule_segment_ids' in params:
            form_params.append(('ScheduleSegmentIds', params['schedule_segment_ids']))  # noqa: E501
            collection_formats['ScheduleSegmentIds'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/workitems', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToAssetAddResultResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_add_work_items(self, asset_ids, schedule_segment_ids, service_order_id, **kwargs):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_add_work_items(asset_ids, schedule_segment_ids, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :param list[int] schedule_segment_ids: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_add_work_items_with_http_info(asset_ids, schedule_segment_ids, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_add_work_items_with_http_info(asset_ids, schedule_segment_ids, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_add_work_items_with_http_info(self, asset_ids, schedule_segment_ids, service_order_id, **kwargs):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_add_work_items_with_http_info(asset_ids, schedule_segment_ids, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[int] asset_ids: (required)
        :param list[int] schedule_segment_ids: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_ids', 'schedule_segment_ids', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_add_work_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_ids' is set
        if ('asset_ids' not in params or
                params['asset_ids'] is None):
            raise ValueError("Missing the required parameter `asset_ids` when calling `service_order_items_add_work_items`")  # noqa: E501
        # verify the required parameter 'schedule_segment_ids' is set
        if ('schedule_segment_ids' not in params or
                params['schedule_segment_ids'] is None):
            raise ValueError("Missing the required parameter `schedule_segment_ids` when calling `service_order_items_add_work_items`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_items_add_work_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'asset_ids' in params:
            form_params.append(('AssetIds', params['asset_ids']))  # noqa: E501
            collection_formats['AssetIds'] = 'multi'  # noqa: E501
        if 'schedule_segment_ids' in params:
            form_params.append(('ScheduleSegmentIds', params['schedule_segment_ids']))  # noqa: E501
            collection_formats['ScheduleSegmentIds'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/workitems', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToAssetAddResultResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_delete_work_item_image(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """service_order_items_delete_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_delete_work_item_image(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_delete_work_item_image_with_http_info(work_item_id, image_name, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_delete_work_item_image_with_http_info(work_item_id, image_name, **kwargs)  # noqa: E501
            return data

    def service_order_items_delete_work_item_image_with_http_info(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """service_order_items_delete_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_delete_work_item_image_with_http_info(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id', 'image_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_delete_work_item_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_delete_work_item_image`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `service_order_items_delete_work_item_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501
        if 'image_name' in params:
            path_params['imageName'] = params['image_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/images/{imageName}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_item(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderItemResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_item_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_item_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_item_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderItemResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_get_work_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToClientOrderItemResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_item_charges(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_charges(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_item_charges_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_item_charges_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_item_charges_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_charges_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_item_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_get_work_item_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_item_image(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_image(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_item_image_with_http_info(work_item_id, image_name, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_item_image_with_http_info(work_item_id, image_name, **kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_item_image_with_http_info(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_image_with_http_info(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id', 'image_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_item_image" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_get_work_item_image`")  # noqa: E501
        # verify the required parameter 'image_name' is set
        if ('image_name' not in params or
                params['image_name'] is None):
            raise ValueError("Missing the required parameter `image_name` when calling `service_order_items_get_work_item_image`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501
        if 'image_name' in params:
            path_params['imageName'] = params['image_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/images/{imageName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_item_images(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_images(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_item_images_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_item_images_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_item_images_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_item_images_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_item_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_get_work_item_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/images', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_items(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_items(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_items_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_items_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_items_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_items_get_work_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_items_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_items" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_items_get_work_items`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/workitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_get_work_items_0(self, **kwargs):  # noqa: E501
        """Retrieve work items  # noqa: E501

        Sample request:                GET /api/service/workitems                GET /api/service/workitems?status=pending                GET /api/service/workitems?&amp;status=pending,delayed&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;workItemNumber=0629-000032-02  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_items_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of work item statuses: Pending, Completed, Delayed, InProgress, Withdrawn
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Items where CreatedOnUtc greater than From parameter
        :param datetime to: Retrieve Work Items where CreatedOnUtc less than To parameter
        :param str work_item_number: Filter by CustomOrderNumber or CertificateNumber
        :param str asset_search: Filter by asset Search keywords: SerialNumber, EquipmentId, AssetTag, AssetUser, LegacyId, AssetName, AssetDescription, ManufacturerPartNumber
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_get_work_items_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_get_work_items_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def service_order_items_get_work_items_0_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve work items  # noqa: E501

        Sample request:                GET /api/service/workitems                GET /api/service/workitems?status=pending                GET /api/service/workitems?&amp;status=pending,delayed&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;workItemNumber=0629-000032-02  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_get_work_items_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of work item statuses: Pending, Completed, Delayed, InProgress, Withdrawn
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Items where CreatedOnUtc greater than From parameter
        :param datetime to: Retrieve Work Items where CreatedOnUtc less than To parameter
        :param str work_item_number: Filter by CustomOrderNumber or CertificateNumber
        :param str asset_search: Filter by asset Search keywords: SerialNumber, EquipmentId, AssetTag, AssetUser, LegacyId, AssetName, AssetDescription, ManufacturerPartNumber
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'company_id', '_from', 'to', 'work_item_number', 'asset_search']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_get_work_items_0" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'work_item_number' in params:
            query_params.append(('workItemNumber', params['work_item_number']))  # noqa: E501
        if 'asset_search' in params:
            query_params.append(('assetSearch', params['asset_search']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_put_charges(self, body, work_item_id, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_put_charges(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromItemChargeUpdateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_put_charges_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_put_charges_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_put_charges_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_put_charges_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromItemChargeUpdateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_put_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_items_put_charges`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_put_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'charges' in params:
            form_params.append(('Charges', params['charges']))  # noqa: E501
            collection_formats['Charges'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/charges', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_put_charges(self, charges, work_item_id, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_put_charges(charges, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsServiceOrdersFromItemChargeUpdateModelItemPriceModel] charges: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_put_charges_with_http_info(charges, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_put_charges_with_http_info(charges, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_put_charges_with_http_info(self, charges, work_item_id, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_put_charges_with_http_info(charges, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsServiceOrdersFromItemChargeUpdateModelItemPriceModel] charges: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['charges', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_put_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'charges' is set
        if ('charges' not in params or
                params['charges'] is None):
            raise ValueError("Missing the required parameter `charges` when calling `service_order_items_put_charges`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_put_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'charges' in params:
            form_params.append(('Charges', params['charges']))  # noqa: E501
            collection_formats['Charges'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/charges', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_set_work_item(self, body, work_item_id, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_set_work_item(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromOrderItemUpdateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_set_work_item_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_set_work_item_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_set_work_item_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_set_work_item_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromOrderItemUpdateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_set_work_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_set_work_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_comments' in params:
            form_params.append(('ServiceComments', params['service_comments']))  # noqa: E501
        if 'private_comments' in params:
            form_params.append(('PrivateComments', params['private_comments']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'service_total' in params:
            form_params.append(('ServiceTotal', params['service_total']))  # noqa: E501
        if 'repairs_total' in params:
            form_params.append(('RepairsTotal', params['repairs_total']))  # noqa: E501
        if 'parts_total' in params:
            form_params.append(('PartsTotal', params['parts_total']))  # noqa: E501
        if 'work_status' in params:
            form_params.append(('WorkStatus', params['work_status']))  # noqa: E501
        if 'custom_work_status' in params:
            form_params.append(('CustomWorkStatus', params['custom_work_status']))  # noqa: E501
        if 'is_limited' in params:
            form_params.append(('IsLimited', params['is_limited']))  # noqa: E501
        if 'checked_on' in params:
            form_params.append(('CheckedOn', params['checked_on']))  # noqa: E501
        if 'checked_by_name' in params:
            form_params.append(('CheckedByName', params['checked_by_name']))  # noqa: E501
        if 'completed_on' in params:
            form_params.append(('CompletedOn', params['completed_on']))  # noqa: E501
        if 'completed_by_name' in params:
            form_params.append(('CompletedByName', params['completed_by_name']))  # noqa: E501
        if 'as_found_check' in params:
            form_params.append(('AsFoundCheck', params['as_found_check']))  # noqa: E501
        if 'as_left_check' in params:
            form_params.append(('AsLeftCheck', params['as_left_check']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'equipment_id' in params:
            form_params.append(('EquipmentId', params['equipment_id']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'serial_number_change' in params:
            form_params.append(('SerialNumberChange', params['serial_number_change']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_tag_change' in params:
            form_params.append(('AssetTagChange', params['asset_tag_change']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'asset_user_change' in params:
            form_params.append(('AssetUserChange', params['asset_user_change']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'vendor_tag' in params:
            form_params.append(('VendorTag', params['vendor_tag']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_set_work_item(self, service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_set_work_item(service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_comments: (required)
        :param str private_comments: (required)
        :param str service_notes: (required)
        :param float service_total: (required)
        :param float repairs_total: (required)
        :param float parts_total: (required)
        :param str work_status: (required)
        :param str custom_work_status: (required)
        :param bool is_limited: (required)
        :param datetime checked_on: (required)
        :param str checked_by_name: (required)
        :param datetime completed_on: (required)
        :param str completed_by_name: (required)
        :param str as_found_check: (required)
        :param str as_left_check: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param str equipment_id: (required)
        :param str legacy_id: (required)
        :param str serial_number: (required)
        :param str serial_number_change: (required)
        :param str asset_tag: (required)
        :param str asset_tag_change: (required)
        :param str asset_user: (required)
        :param str asset_user_change: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str certificate_number: (required)
        :param datetime service_date: (required)
        :param datetime next_service_date: (required)
        :param str vendor_tag: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_set_work_item_with_http_info(service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_set_work_item_with_http_info(service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_set_work_item_with_http_info(self, service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_set_work_item_with_http_info(service_comments, private_comments, service_notes, service_total, repairs_total, parts_total, work_status, custom_work_status, is_limited, checked_on, checked_by_name, completed_on, completed_by_name, as_found_check, as_left_check, result_status, as_found_result, as_left_result, equipment_id, legacy_id, serial_number, serial_number_change, asset_tag, asset_tag_change, asset_user, asset_user_change, provider_technician, provider_phone, provider_company, certificate_number, service_date, next_service_date, vendor_tag, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str service_comments: (required)
        :param str private_comments: (required)
        :param str service_notes: (required)
        :param float service_total: (required)
        :param float repairs_total: (required)
        :param float parts_total: (required)
        :param str work_status: (required)
        :param str custom_work_status: (required)
        :param bool is_limited: (required)
        :param datetime checked_on: (required)
        :param str checked_by_name: (required)
        :param datetime completed_on: (required)
        :param str completed_by_name: (required)
        :param str as_found_check: (required)
        :param str as_left_check: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param str equipment_id: (required)
        :param str legacy_id: (required)
        :param str serial_number: (required)
        :param str serial_number_change: (required)
        :param str asset_tag: (required)
        :param str asset_tag_change: (required)
        :param str asset_user: (required)
        :param str asset_user_change: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str certificate_number: (required)
        :param datetime service_date: (required)
        :param datetime next_service_date: (required)
        :param str vendor_tag: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_comments', 'private_comments', 'service_notes', 'service_total', 'repairs_total', 'parts_total', 'work_status', 'custom_work_status', 'is_limited', 'checked_on', 'checked_by_name', 'completed_on', 'completed_by_name', 'as_found_check', 'as_left_check', 'result_status', 'as_found_result', 'as_left_result', 'equipment_id', 'legacy_id', 'serial_number', 'serial_number_change', 'asset_tag', 'asset_tag_change', 'asset_user', 'asset_user_change', 'provider_technician', 'provider_phone', 'provider_company', 'certificate_number', 'service_date', 'next_service_date', 'vendor_tag', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_set_work_item" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_comments' is set
        if ('service_comments' not in params or
                params['service_comments'] is None):
            raise ValueError("Missing the required parameter `service_comments` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'private_comments' is set
        if ('private_comments' not in params or
                params['private_comments'] is None):
            raise ValueError("Missing the required parameter `private_comments` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'service_notes' is set
        if ('service_notes' not in params or
                params['service_notes'] is None):
            raise ValueError("Missing the required parameter `service_notes` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'service_total' is set
        if ('service_total' not in params or
                params['service_total'] is None):
            raise ValueError("Missing the required parameter `service_total` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'repairs_total' is set
        if ('repairs_total' not in params or
                params['repairs_total'] is None):
            raise ValueError("Missing the required parameter `repairs_total` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'parts_total' is set
        if ('parts_total' not in params or
                params['parts_total'] is None):
            raise ValueError("Missing the required parameter `parts_total` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'work_status' is set
        if ('work_status' not in params or
                params['work_status'] is None):
            raise ValueError("Missing the required parameter `work_status` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'custom_work_status' is set
        if ('custom_work_status' not in params or
                params['custom_work_status'] is None):
            raise ValueError("Missing the required parameter `custom_work_status` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'is_limited' is set
        if ('is_limited' not in params or
                params['is_limited'] is None):
            raise ValueError("Missing the required parameter `is_limited` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'checked_on' is set
        if ('checked_on' not in params or
                params['checked_on'] is None):
            raise ValueError("Missing the required parameter `checked_on` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'checked_by_name' is set
        if ('checked_by_name' not in params or
                params['checked_by_name'] is None):
            raise ValueError("Missing the required parameter `checked_by_name` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'completed_on' is set
        if ('completed_on' not in params or
                params['completed_on'] is None):
            raise ValueError("Missing the required parameter `completed_on` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'completed_by_name' is set
        if ('completed_by_name' not in params or
                params['completed_by_name'] is None):
            raise ValueError("Missing the required parameter `completed_by_name` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'as_found_check' is set
        if ('as_found_check' not in params or
                params['as_found_check'] is None):
            raise ValueError("Missing the required parameter `as_found_check` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'as_left_check' is set
        if ('as_left_check' not in params or
                params['as_left_check'] is None):
            raise ValueError("Missing the required parameter `as_left_check` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'result_status' is set
        if ('result_status' not in params or
                params['result_status'] is None):
            raise ValueError("Missing the required parameter `result_status` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'as_found_result' is set
        if ('as_found_result' not in params or
                params['as_found_result'] is None):
            raise ValueError("Missing the required parameter `as_found_result` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'as_left_result' is set
        if ('as_left_result' not in params or
                params['as_left_result'] is None):
            raise ValueError("Missing the required parameter `as_left_result` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'equipment_id' is set
        if ('equipment_id' not in params or
                params['equipment_id'] is None):
            raise ValueError("Missing the required parameter `equipment_id` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'legacy_id' is set
        if ('legacy_id' not in params or
                params['legacy_id'] is None):
            raise ValueError("Missing the required parameter `legacy_id` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'serial_number_change' is set
        if ('serial_number_change' not in params or
                params['serial_number_change'] is None):
            raise ValueError("Missing the required parameter `serial_number_change` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'asset_tag' is set
        if ('asset_tag' not in params or
                params['asset_tag'] is None):
            raise ValueError("Missing the required parameter `asset_tag` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'asset_tag_change' is set
        if ('asset_tag_change' not in params or
                params['asset_tag_change'] is None):
            raise ValueError("Missing the required parameter `asset_tag_change` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'asset_user' is set
        if ('asset_user' not in params or
                params['asset_user'] is None):
            raise ValueError("Missing the required parameter `asset_user` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'asset_user_change' is set
        if ('asset_user_change' not in params or
                params['asset_user_change'] is None):
            raise ValueError("Missing the required parameter `asset_user_change` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'provider_technician' is set
        if ('provider_technician' not in params or
                params['provider_technician'] is None):
            raise ValueError("Missing the required parameter `provider_technician` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'provider_phone' is set
        if ('provider_phone' not in params or
                params['provider_phone'] is None):
            raise ValueError("Missing the required parameter `provider_phone` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'provider_company' is set
        if ('provider_company' not in params or
                params['provider_company'] is None):
            raise ValueError("Missing the required parameter `provider_company` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'certificate_number' is set
        if ('certificate_number' not in params or
                params['certificate_number'] is None):
            raise ValueError("Missing the required parameter `certificate_number` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'service_date' is set
        if ('service_date' not in params or
                params['service_date'] is None):
            raise ValueError("Missing the required parameter `service_date` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'next_service_date' is set
        if ('next_service_date' not in params or
                params['next_service_date'] is None):
            raise ValueError("Missing the required parameter `next_service_date` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'vendor_tag' is set
        if ('vendor_tag' not in params or
                params['vendor_tag'] is None):
            raise ValueError("Missing the required parameter `vendor_tag` when calling `service_order_items_set_work_item`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_set_work_item`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_comments' in params:
            form_params.append(('ServiceComments', params['service_comments']))  # noqa: E501
        if 'private_comments' in params:
            form_params.append(('PrivateComments', params['private_comments']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'service_total' in params:
            form_params.append(('ServiceTotal', params['service_total']))  # noqa: E501
        if 'repairs_total' in params:
            form_params.append(('RepairsTotal', params['repairs_total']))  # noqa: E501
        if 'parts_total' in params:
            form_params.append(('PartsTotal', params['parts_total']))  # noqa: E501
        if 'work_status' in params:
            form_params.append(('WorkStatus', params['work_status']))  # noqa: E501
        if 'custom_work_status' in params:
            form_params.append(('CustomWorkStatus', params['custom_work_status']))  # noqa: E501
        if 'is_limited' in params:
            form_params.append(('IsLimited', params['is_limited']))  # noqa: E501
        if 'checked_on' in params:
            form_params.append(('CheckedOn', params['checked_on']))  # noqa: E501
        if 'checked_by_name' in params:
            form_params.append(('CheckedByName', params['checked_by_name']))  # noqa: E501
        if 'completed_on' in params:
            form_params.append(('CompletedOn', params['completed_on']))  # noqa: E501
        if 'completed_by_name' in params:
            form_params.append(('CompletedByName', params['completed_by_name']))  # noqa: E501
        if 'as_found_check' in params:
            form_params.append(('AsFoundCheck', params['as_found_check']))  # noqa: E501
        if 'as_left_check' in params:
            form_params.append(('AsLeftCheck', params['as_left_check']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'equipment_id' in params:
            form_params.append(('EquipmentId', params['equipment_id']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'serial_number_change' in params:
            form_params.append(('SerialNumberChange', params['serial_number_change']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_tag_change' in params:
            form_params.append(('AssetTagChange', params['asset_tag_change']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'asset_user_change' in params:
            form_params.append(('AssetUserChange', params['asset_user_change']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'vendor_tag' in params:
            form_params.append(('VendorTag', params['vendor_tag']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_items_upload_work_item_images(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_upload_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_upload_work_item_images(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_items_upload_work_item_images_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_items_upload_work_item_images_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_items_upload_work_item_images_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_items_upload_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_items_upload_work_item_images_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_items_upload_work_item_images" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_items_upload_work_item_images`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/images', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
