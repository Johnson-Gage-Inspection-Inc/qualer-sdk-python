# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AssetReservationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_reservation_close(self, **kwargs):  # noqa: E501
        """asset_reservation_close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_close(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_close_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_close_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_reservation_close_with_http_info(self, **kwargs):  # noqa: E501
        """asset_reservation_close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_close_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_asset_id', 'model_area_id', 'model_product_id', 'model_serial_number', 'model_asset_tag', 'model_reservation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_close" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501
        if 'model_area_id' in params:
            query_params.append(('model.areaId', params['model_area_id']))  # noqa: E501
        if 'model_product_id' in params:
            query_params.append(('model.productId', params['model_product_id']))  # noqa: E501
        if 'model_serial_number' in params:
            query_params.append(('model.serialNumber', params['model_serial_number']))  # noqa: E501
        if 'model_asset_tag' in params:
            query_params.append(('model.assetTag', params['model_asset_tag']))  # noqa: E501
        if 'model_reservation_id' in params:
            query_params.append(('model.reservationId', params['model_reservation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations/close', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_reservation_get(self, **kwargs):  # noqa: E501
        """asset_reservation_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime model_from:
        :param datetime model_to:
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: list[QualerApiModelsAssetReservationToAssetReservationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_reservation_get_with_http_info(self, **kwargs):  # noqa: E501
        """asset_reservation_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime model_from:
        :param datetime model_to:
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: list[QualerApiModelsAssetReservationToAssetReservationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_from', 'model_to', 'model_asset_id', 'model_area_id', 'model_product_id', 'model_serial_number', 'model_asset_tag', 'model_reservation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_from' in params:
            query_params.append(('model.from', params['model_from']))  # noqa: E501
        if 'model_to' in params:
            query_params.append(('model.to', params['model_to']))  # noqa: E501
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501
        if 'model_area_id' in params:
            query_params.append(('model.areaId', params['model_area_id']))  # noqa: E501
        if 'model_product_id' in params:
            query_params.append(('model.productId', params['model_product_id']))  # noqa: E501
        if 'model_serial_number' in params:
            query_params.append(('model.serialNumber', params['model_serial_number']))  # noqa: E501
        if 'model_asset_tag' in params:
            query_params.append(('model.assetTag', params['model_asset_tag']))  # noqa: E501
        if 'model_reservation_id' in params:
            query_params.append(('model.reservationId', params['model_reservation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetReservationToAssetReservationResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_reservation_upsert(self, body, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetReservationFromUpsertAssetReservationModel body: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_upsert_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_upsert_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def asset_reservation_upsert_with_http_info(self, body, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetReservationFromUpsertAssetReservationModel body: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_upsert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_reservation_upsert`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'asset_id' in params:
            form_params.append(('AssetId', params['asset_id']))  # noqa: E501
        if 'product_id' in params:
            form_params.append(('ProductId', params['product_id']))  # noqa: E501
        if 'reservation_id' in params:
            form_params.append(('ReservationId', params['reservation_id']))  # noqa: E501
        if 'service_order_id' in params:
            form_params.append(('ServiceOrderId', params['service_order_id']))  # noqa: E501
        if 'begin_date' in params:
            form_params.append(('BeginDate', params['begin_date']))  # noqa: E501
        if 'end_date' in params:
            form_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'reserved_by' in params:
            form_params.append(('ReservedBy', params['reserved_by']))  # noqa: E501
        if 'reserved_by_name' in params:
            form_params.append(('ReservedByName', params['reserved_by_name']))  # noqa: E501
        if 'comments' in params:
            form_params.append(('Comments', params['comments']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetReservationToUpsertAssetReservationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_reservation_upsert(self, asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert(asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param int product_id: (required)
        :param int reservation_id: (required)
        :param int service_order_id: (required)
        :param datetime begin_date: (required)
        :param datetime end_date: (required)
        :param int reserved_by: (required)
        :param str reserved_by_name: (required)
        :param str comments: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_upsert_with_http_info(asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_upsert_with_http_info(asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, **kwargs)  # noqa: E501
            return data

    def asset_reservation_upsert_with_http_info(self, asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert_with_http_info(asset_id, product_id, reservation_id, service_order_id, begin_date, end_date, reserved_by, reserved_by_name, comments, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param int product_id: (required)
        :param int reservation_id: (required)
        :param int service_order_id: (required)
        :param datetime begin_date: (required)
        :param datetime end_date: (required)
        :param int reserved_by: (required)
        :param str reserved_by_name: (required)
        :param str comments: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', 'product_id', 'reservation_id', 'service_order_id', 'begin_date', 'end_date', 'reserved_by', 'reserved_by_name', 'comments']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_upsert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'reservation_id' is set
        if ('reservation_id' not in params or
                params['reservation_id'] is None):
            raise ValueError("Missing the required parameter `reservation_id` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'begin_date' is set
        if ('begin_date' not in params or
                params['begin_date'] is None):
            raise ValueError("Missing the required parameter `begin_date` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'end_date' is set
        if ('end_date' not in params or
                params['end_date'] is None):
            raise ValueError("Missing the required parameter `end_date` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'reserved_by' is set
        if ('reserved_by' not in params or
                params['reserved_by'] is None):
            raise ValueError("Missing the required parameter `reserved_by` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'reserved_by_name' is set
        if ('reserved_by_name' not in params or
                params['reserved_by_name'] is None):
            raise ValueError("Missing the required parameter `reserved_by_name` when calling `asset_reservation_upsert`")  # noqa: E501
        # verify the required parameter 'comments' is set
        if ('comments' not in params or
                params['comments'] is None):
            raise ValueError("Missing the required parameter `comments` when calling `asset_reservation_upsert`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'asset_id' in params:
            form_params.append(('AssetId', params['asset_id']))  # noqa: E501
        if 'product_id' in params:
            form_params.append(('ProductId', params['product_id']))  # noqa: E501
        if 'reservation_id' in params:
            form_params.append(('ReservationId', params['reservation_id']))  # noqa: E501
        if 'service_order_id' in params:
            form_params.append(('ServiceOrderId', params['service_order_id']))  # noqa: E501
        if 'begin_date' in params:
            form_params.append(('BeginDate', params['begin_date']))  # noqa: E501
        if 'end_date' in params:
            form_params.append(('EndDate', params['end_date']))  # noqa: E501
        if 'reserved_by' in params:
            form_params.append(('ReservedBy', params['reserved_by']))  # noqa: E501
        if 'reserved_by_name' in params:
            form_params.append(('ReservedByName', params['reserved_by_name']))  # noqa: E501
        if 'comments' in params:
            form_params.append(('Comments', params['comments']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetReservationToUpsertAssetReservationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
