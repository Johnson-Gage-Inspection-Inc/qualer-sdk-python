# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ClientSiteApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def client_site_create_client_site(self, body, client_company_id, **kwargs):  # noqa: E501
        """Create Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_create_client_site(body, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsSiteFromSiteCreateModel body: Site create model (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_site_create_client_site_with_http_info(body, client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_site_create_client_site_with_http_info(body, client_company_id, **kwargs)  # noqa: E501
            return data

    def client_site_create_client_site_with_http_info(self, body, client_company_id, **kwargs):  # noqa: E501
        """Create Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_create_client_site_with_http_info(body, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsSiteFromSiteCreateModel body: Site create model (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_site_create_client_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_site_create_client_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_name' in params:
            form_params.append(('SiteName', params['site_name']))  # noqa: E501
        if 'site_code' in params:
            form_params.append(('SiteCode', params['site_code']))  # noqa: E501
        if 'shipping_inherited' in params:
            form_params.append(('ShippingInherited', params['shipping_inherited']))  # noqa: E501
        if 'default_account_representative_employee_id' in params:
            form_params.append(('DefaultAccountRepresentativeEmployeeId', params['default_account_representative_employee_id']))  # noqa: E501
        if 'billing_inherited' in params:
            form_params.append(('BillingInherited', params['billing_inherited']))  # noqa: E501
        if 'federal_number' in params:
            form_params.append(('FederalNumber', params['federal_number']))  # noqa: E501
        if 'state_number' in params:
            form_params.append(('StateNumber', params['state_number']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'is_science_facility' in params:
            form_params.append(('IsScienceFacility', params['is_science_facility']))  # noqa: E501
        if 'is_service_center' in params:
            form_params.append(('IsServiceCenter', params['is_service_center']))  # noqa: E501
        if 'is_inventory_storage' in params:
            form_params.append(('IsInventoryStorage', params['is_inventory_storage']))  # noqa: E501
        if 'is_production' in params:
            form_params.append(('IsProduction', params['is_production']))  # noqa: E501
        if 'time_zone_id' in params:
            form_params.append(('TimeZoneId', params['time_zone_id']))  # noqa: E501
        if 'time_zone_offset_minutes' in params:
            form_params.append(('TimeZoneOffsetMinutes', params['time_zone_offset_minutes']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_site_create_client_site(self, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs):  # noqa: E501
        """Create Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_create_client_site(site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_name: (required)
        :param str site_code: (required)
        :param bool shipping_inherited: (required)
        :param int default_account_representative_employee_id: (required)
        :param bool billing_inherited: (required)
        :param str federal_number: (required)
        :param str state_number: (required)
        :param str culture_name: (required)
        :param bool is_science_facility: (required)
        :param bool is_service_center: (required)
        :param bool is_inventory_storage: (required)
        :param bool is_production: (required)
        :param str time_zone_id: (required)
        :param int time_zone_offset_minutes: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_site_create_client_site_with_http_info(site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_site_create_client_site_with_http_info(site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs)  # noqa: E501
            return data

    def client_site_create_client_site_with_http_info(self, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs):  # noqa: E501
        """Create Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_create_client_site_with_http_info(site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str site_name: (required)
        :param str site_code: (required)
        :param bool shipping_inherited: (required)
        :param int default_account_representative_employee_id: (required)
        :param bool billing_inherited: (required)
        :param str federal_number: (required)
        :param str state_number: (required)
        :param str culture_name: (required)
        :param bool is_science_facility: (required)
        :param bool is_service_center: (required)
        :param bool is_inventory_storage: (required)
        :param bool is_production: (required)
        :param str time_zone_id: (required)
        :param int time_zone_offset_minutes: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_name', 'site_code', 'shipping_inherited', 'default_account_representative_employee_id', 'billing_inherited', 'federal_number', 'state_number', 'culture_name', 'is_science_facility', 'is_service_center', 'is_inventory_storage', 'is_production', 'time_zone_id', 'time_zone_offset_minutes', 'company_name', 'billing_address', 'shipping_address', 'client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_site_create_client_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_name' is set
        if ('site_name' not in params or
                params['site_name'] is None):
            raise ValueError("Missing the required parameter `site_name` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'site_code' is set
        if ('site_code' not in params or
                params['site_code'] is None):
            raise ValueError("Missing the required parameter `site_code` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'shipping_inherited' is set
        if ('shipping_inherited' not in params or
                params['shipping_inherited'] is None):
            raise ValueError("Missing the required parameter `shipping_inherited` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'default_account_representative_employee_id' is set
        if ('default_account_representative_employee_id' not in params or
                params['default_account_representative_employee_id'] is None):
            raise ValueError("Missing the required parameter `default_account_representative_employee_id` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'billing_inherited' is set
        if ('billing_inherited' not in params or
                params['billing_inherited'] is None):
            raise ValueError("Missing the required parameter `billing_inherited` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'federal_number' is set
        if ('federal_number' not in params or
                params['federal_number'] is None):
            raise ValueError("Missing the required parameter `federal_number` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'state_number' is set
        if ('state_number' not in params or
                params['state_number'] is None):
            raise ValueError("Missing the required parameter `state_number` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'culture_name' is set
        if ('culture_name' not in params or
                params['culture_name'] is None):
            raise ValueError("Missing the required parameter `culture_name` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'is_science_facility' is set
        if ('is_science_facility' not in params or
                params['is_science_facility'] is None):
            raise ValueError("Missing the required parameter `is_science_facility` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'is_service_center' is set
        if ('is_service_center' not in params or
                params['is_service_center'] is None):
            raise ValueError("Missing the required parameter `is_service_center` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'is_inventory_storage' is set
        if ('is_inventory_storage' not in params or
                params['is_inventory_storage'] is None):
            raise ValueError("Missing the required parameter `is_inventory_storage` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'is_production' is set
        if ('is_production' not in params or
                params['is_production'] is None):
            raise ValueError("Missing the required parameter `is_production` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'time_zone_id' is set
        if ('time_zone_id' not in params or
                params['time_zone_id'] is None):
            raise ValueError("Missing the required parameter `time_zone_id` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'time_zone_offset_minutes' is set
        if ('time_zone_offset_minutes' not in params or
                params['time_zone_offset_minutes'] is None):
            raise ValueError("Missing the required parameter `time_zone_offset_minutes` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params or
                params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'billing_address' is set
        if ('billing_address' not in params or
                params['billing_address'] is None):
            raise ValueError("Missing the required parameter `billing_address` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'shipping_address' is set
        if ('shipping_address' not in params or
                params['shipping_address'] is None):
            raise ValueError("Missing the required parameter `shipping_address` when calling `client_site_create_client_site`")  # noqa: E501
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_site_create_client_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_name' in params:
            form_params.append(('SiteName', params['site_name']))  # noqa: E501
        if 'site_code' in params:
            form_params.append(('SiteCode', params['site_code']))  # noqa: E501
        if 'shipping_inherited' in params:
            form_params.append(('ShippingInherited', params['shipping_inherited']))  # noqa: E501
        if 'default_account_representative_employee_id' in params:
            form_params.append(('DefaultAccountRepresentativeEmployeeId', params['default_account_representative_employee_id']))  # noqa: E501
        if 'billing_inherited' in params:
            form_params.append(('BillingInherited', params['billing_inherited']))  # noqa: E501
        if 'federal_number' in params:
            form_params.append(('FederalNumber', params['federal_number']))  # noqa: E501
        if 'state_number' in params:
            form_params.append(('StateNumber', params['state_number']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'is_science_facility' in params:
            form_params.append(('IsScienceFacility', params['is_science_facility']))  # noqa: E501
        if 'is_service_center' in params:
            form_params.append(('IsServiceCenter', params['is_service_center']))  # noqa: E501
        if 'is_inventory_storage' in params:
            form_params.append(('IsInventoryStorage', params['is_inventory_storage']))  # noqa: E501
        if 'is_production' in params:
            form_params.append(('IsProduction', params['is_production']))  # noqa: E501
        if 'time_zone_id' in params:
            form_params.append(('TimeZoneId', params['time_zone_id']))  # noqa: E501
        if 'time_zone_offset_minutes' in params:
            form_params.append(('TimeZoneOffsetMinutes', params['time_zone_offset_minutes']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/sites', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_site_get_client_sites(self, client_company_id, **kwargs):  # noqa: E501
        """client_site_get_client_sites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_get_client_sites(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: list[QualerApiModelsSiteToClientSiteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_site_get_client_sites_with_http_info(client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_site_get_client_sites_with_http_info(client_company_id, **kwargs)  # noqa: E501
            return data

    def client_site_get_client_sites_with_http_info(self, client_company_id, **kwargs):  # noqa: E501
        """client_site_get_client_sites  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_get_client_sites_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: list[QualerApiModelsSiteToClientSiteResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_site_get_client_sites" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_site_get_client_sites`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/sites', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsSiteToClientSiteResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_site_update_client_site(self, body, client_company_id, **kwargs):  # noqa: E501
        """Update Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_update_client_site(body, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsSiteFromSiteUpdateModel body: Site update model (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_site_update_client_site_with_http_info(body, client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_site_update_client_site_with_http_info(body, client_company_id, **kwargs)  # noqa: E501
            return data

    def client_site_update_client_site_with_http_info(self, body, client_company_id, **kwargs):  # noqa: E501
        """Update Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_update_client_site_with_http_info(body, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsSiteFromSiteUpdateModel body: Site update model (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_site_update_client_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_site_update_client_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('SiteId', params['site_id']))  # noqa: E501
        if 'site_name' in params:
            form_params.append(('SiteName', params['site_name']))  # noqa: E501
        if 'site_code' in params:
            form_params.append(('SiteCode', params['site_code']))  # noqa: E501
        if 'shipping_inherited' in params:
            form_params.append(('ShippingInherited', params['shipping_inherited']))  # noqa: E501
        if 'default_account_representative_employee_id' in params:
            form_params.append(('DefaultAccountRepresentativeEmployeeId', params['default_account_representative_employee_id']))  # noqa: E501
        if 'billing_inherited' in params:
            form_params.append(('BillingInherited', params['billing_inherited']))  # noqa: E501
        if 'federal_number' in params:
            form_params.append(('FederalNumber', params['federal_number']))  # noqa: E501
        if 'state_number' in params:
            form_params.append(('StateNumber', params['state_number']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'is_science_facility' in params:
            form_params.append(('IsScienceFacility', params['is_science_facility']))  # noqa: E501
        if 'is_service_center' in params:
            form_params.append(('IsServiceCenter', params['is_service_center']))  # noqa: E501
        if 'is_inventory_storage' in params:
            form_params.append(('IsInventoryStorage', params['is_inventory_storage']))  # noqa: E501
        if 'is_production' in params:
            form_params.append(('IsProduction', params['is_production']))  # noqa: E501
        if 'time_zone_id' in params:
            form_params.append(('TimeZoneId', params['time_zone_id']))  # noqa: E501
        if 'time_zone_offset_minutes' in params:
            form_params.append(('TimeZoneOffsetMinutes', params['time_zone_offset_minutes']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/sites', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def client_site_update_client_site(self, site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs):  # noqa: E501
        """Update Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_update_client_site(site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :param str site_name: (required)
        :param str site_code: (required)
        :param bool shipping_inherited: (required)
        :param int default_account_representative_employee_id: (required)
        :param bool billing_inherited: (required)
        :param str federal_number: (required)
        :param str state_number: (required)
        :param str culture_name: (required)
        :param bool is_science_facility: (required)
        :param bool is_service_center: (required)
        :param bool is_inventory_storage: (required)
        :param bool is_production: (required)
        :param str time_zone_id: (required)
        :param int time_zone_offset_minutes: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.client_site_update_client_site_with_http_info(site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.client_site_update_client_site_with_http_info(site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs)  # noqa: E501
            return data

    def client_site_update_client_site_with_http_info(self, site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, **kwargs):  # noqa: E501
        """Update Client Site.  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.client_site_update_client_site_with_http_info(site_id, site_name, site_code, shipping_inherited, default_account_representative_employee_id, billing_inherited, federal_number, state_number, culture_name, is_science_facility, is_service_center, is_inventory_storage, is_production, time_zone_id, time_zone_offset_minutes, company_name, billing_address, shipping_address, client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int site_id: (required)
        :param str site_name: (required)
        :param str site_code: (required)
        :param bool shipping_inherited: (required)
        :param int default_account_representative_employee_id: (required)
        :param bool billing_inherited: (required)
        :param str federal_number: (required)
        :param str state_number: (required)
        :param str culture_name: (required)
        :param bool is_science_facility: (required)
        :param bool is_service_center: (required)
        :param bool is_inventory_storage: (required)
        :param bool is_production: (required)
        :param str time_zone_id: (required)
        :param int time_zone_offset_minutes: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :param int client_company_id: Client Company Id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['site_id', 'site_name', 'site_code', 'shipping_inherited', 'default_account_representative_employee_id', 'billing_inherited', 'federal_number', 'state_number', 'culture_name', 'is_science_facility', 'is_service_center', 'is_inventory_storage', 'is_production', 'time_zone_id', 'time_zone_offset_minutes', 'company_name', 'billing_address', 'shipping_address', 'client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method client_site_update_client_site" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'site_id' is set
        if ('site_id' not in params or
                params['site_id'] is None):
            raise ValueError("Missing the required parameter `site_id` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'site_name' is set
        if ('site_name' not in params or
                params['site_name'] is None):
            raise ValueError("Missing the required parameter `site_name` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'site_code' is set
        if ('site_code' not in params or
                params['site_code'] is None):
            raise ValueError("Missing the required parameter `site_code` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'shipping_inherited' is set
        if ('shipping_inherited' not in params or
                params['shipping_inherited'] is None):
            raise ValueError("Missing the required parameter `shipping_inherited` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'default_account_representative_employee_id' is set
        if ('default_account_representative_employee_id' not in params or
                params['default_account_representative_employee_id'] is None):
            raise ValueError("Missing the required parameter `default_account_representative_employee_id` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'billing_inherited' is set
        if ('billing_inherited' not in params or
                params['billing_inherited'] is None):
            raise ValueError("Missing the required parameter `billing_inherited` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'federal_number' is set
        if ('federal_number' not in params or
                params['federal_number'] is None):
            raise ValueError("Missing the required parameter `federal_number` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'state_number' is set
        if ('state_number' not in params or
                params['state_number'] is None):
            raise ValueError("Missing the required parameter `state_number` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'culture_name' is set
        if ('culture_name' not in params or
                params['culture_name'] is None):
            raise ValueError("Missing the required parameter `culture_name` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'is_science_facility' is set
        if ('is_science_facility' not in params or
                params['is_science_facility'] is None):
            raise ValueError("Missing the required parameter `is_science_facility` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'is_service_center' is set
        if ('is_service_center' not in params or
                params['is_service_center'] is None):
            raise ValueError("Missing the required parameter `is_service_center` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'is_inventory_storage' is set
        if ('is_inventory_storage' not in params or
                params['is_inventory_storage'] is None):
            raise ValueError("Missing the required parameter `is_inventory_storage` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'is_production' is set
        if ('is_production' not in params or
                params['is_production'] is None):
            raise ValueError("Missing the required parameter `is_production` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'time_zone_id' is set
        if ('time_zone_id' not in params or
                params['time_zone_id'] is None):
            raise ValueError("Missing the required parameter `time_zone_id` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'time_zone_offset_minutes' is set
        if ('time_zone_offset_minutes' not in params or
                params['time_zone_offset_minutes'] is None):
            raise ValueError("Missing the required parameter `time_zone_offset_minutes` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params or
                params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'billing_address' is set
        if ('billing_address' not in params or
                params['billing_address'] is None):
            raise ValueError("Missing the required parameter `billing_address` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'shipping_address' is set
        if ('shipping_address' not in params or
                params['shipping_address'] is None):
            raise ValueError("Missing the required parameter `shipping_address` when calling `client_site_update_client_site`")  # noqa: E501
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `client_site_update_client_site`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'site_id' in params:
            form_params.append(('SiteId', params['site_id']))  # noqa: E501
        if 'site_name' in params:
            form_params.append(('SiteName', params['site_name']))  # noqa: E501
        if 'site_code' in params:
            form_params.append(('SiteCode', params['site_code']))  # noqa: E501
        if 'shipping_inherited' in params:
            form_params.append(('ShippingInherited', params['shipping_inherited']))  # noqa: E501
        if 'default_account_representative_employee_id' in params:
            form_params.append(('DefaultAccountRepresentativeEmployeeId', params['default_account_representative_employee_id']))  # noqa: E501
        if 'billing_inherited' in params:
            form_params.append(('BillingInherited', params['billing_inherited']))  # noqa: E501
        if 'federal_number' in params:
            form_params.append(('FederalNumber', params['federal_number']))  # noqa: E501
        if 'state_number' in params:
            form_params.append(('StateNumber', params['state_number']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'is_science_facility' in params:
            form_params.append(('IsScienceFacility', params['is_science_facility']))  # noqa: E501
        if 'is_service_center' in params:
            form_params.append(('IsServiceCenter', params['is_service_center']))  # noqa: E501
        if 'is_inventory_storage' in params:
            form_params.append(('IsInventoryStorage', params['is_inventory_storage']))  # noqa: E501
        if 'is_production' in params:
            form_params.append(('IsProduction', params['is_production']))  # noqa: E501
        if 'time_zone_id' in params:
            form_params.append(('TimeZoneId', params['time_zone_id']))  # noqa: E501
        if 'time_zone_offset_minutes' in params:
            form_params.append(('TimeZoneOffsetMinutes', params['time_zone_offset_minutes']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}/sites', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
