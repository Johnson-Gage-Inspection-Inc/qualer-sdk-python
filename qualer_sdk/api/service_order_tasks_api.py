# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderTasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_tasks_create_work_order_task(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_create_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_create_work_order_task(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromServiceOrderTaskCreateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_create_work_order_task_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_create_work_order_task_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_create_work_order_task_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_create_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_create_work_order_task_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromServiceOrderTaskCreateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_create_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_details' in params:
            form_params.append(('TaskDetails', params['task_details']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'finish_time' in params:
            form_params.append(('FinishTime', params['finish_time']))  # noqa: E501
        if 'time_spent_minutes' in params:
            form_params.append(('TimeSpentMinutes', params['time_spent_minutes']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'is_hourly' in params:
            form_params.append(('IsHourly', params['is_hourly']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_tasks_create_work_order_task(self, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_create_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_create_work_order_task(task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_name: (required)
        :param str task_details: (required)
        :param datetime start_time: (required)
        :param datetime finish_time: (required)
        :param int time_spent_minutes: (required)
        :param float price: (required)
        :param bool is_hourly: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_create_work_order_task_with_http_info(task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_create_work_order_task_with_http_info(task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_create_work_order_task_with_http_info(self, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_create_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_create_work_order_task_with_http_info(task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str task_name: (required)
        :param str task_details: (required)
        :param datetime start_time: (required)
        :param datetime finish_time: (required)
        :param int time_spent_minutes: (required)
        :param float price: (required)
        :param bool is_hourly: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['task_name', 'task_details', 'start_time', 'finish_time', 'time_spent_minutes', 'price', 'is_hourly', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_create_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'task_name' is set
        if ('task_name' not in params or
                params['task_name'] is None):
            raise ValueError("Missing the required parameter `task_name` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'task_details' is set
        if ('task_details' not in params or
                params['task_details'] is None):
            raise ValueError("Missing the required parameter `task_details` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'finish_time' is set
        if ('finish_time' not in params or
                params['finish_time'] is None):
            raise ValueError("Missing the required parameter `finish_time` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'time_spent_minutes' is set
        if ('time_spent_minutes' not in params or
                params['time_spent_minutes'] is None):
            raise ValueError("Missing the required parameter `time_spent_minutes` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'is_hourly' is set
        if ('is_hourly' not in params or
                params['is_hourly'] is None):
            raise ValueError("Missing the required parameter `is_hourly` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_create_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_details' in params:
            form_params.append(('TaskDetails', params['task_details']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'finish_time' in params:
            form_params.append(('FinishTime', params['finish_time']))  # noqa: E501
        if 'time_spent_minutes' in params:
            form_params.append(('TimeSpentMinutes', params['time_spent_minutes']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'is_hourly' in params:
            form_params.append(('IsHourly', params['is_hourly']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_tasks_delete_work_order_task(self, service_order_id, service_order_task_id, **kwargs):  # noqa: E501
        """service_order_tasks_delete_work_order_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_delete_work_order_task(service_order_id, service_order_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param int service_order_task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_delete_work_order_task_with_http_info(service_order_id, service_order_task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_delete_work_order_task_with_http_info(service_order_id, service_order_task_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_delete_work_order_task_with_http_info(self, service_order_id, service_order_task_id, **kwargs):  # noqa: E501
        """service_order_tasks_delete_work_order_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_delete_work_order_task_with_http_info(service_order_id, service_order_task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param int service_order_task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'service_order_task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_delete_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_delete_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_task_id' is set
        if ('service_order_task_id' not in params or
                params['service_order_task_id'] is None):
            raise ValueError("Missing the required parameter `service_order_task_id` when calling `service_order_tasks_delete_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501
        if 'service_order_task_id' in params:
            path_params['serviceOrderTaskId'] = params['service_order_task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/Tasks/{serviceOrderTaskId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_tasks_get_work_order_tasks(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_get_work_order_tasks  # noqa: E501

        TimeSpent  Integer part (before dot) is hours  Fractional part (after dot) is minutes  For example:      if time spent is 10 minutes -&gt; 10 / 60 = 0.1666666666666667      if time spent is 65 minutes -&gt; (65 - 60) + (5 / 60) = 1.0833333333333333  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_get_work_order_tasks(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToServiceOrderTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_get_work_order_tasks_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_get_work_order_tasks_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_get_work_order_tasks_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_get_work_order_tasks  # noqa: E501

        TimeSpent  Integer part (before dot) is hours  Fractional part (after dot) is minutes  For example:      if time spent is 10 minutes -&gt; 10 / 60 = 0.1666666666666667      if time spent is 65 minutes -&gt; (65 - 60) + (5 / 60) = 1.0833333333333333  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_get_work_order_tasks_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToServiceOrderTaskResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_get_work_order_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_get_work_order_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToServiceOrderTaskResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_tasks_update_work_order_task(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_update_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_update_work_order_task(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromServiceOrderTaskUpdateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_update_work_order_task_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_update_work_order_task_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_update_work_order_task_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_update_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_update_work_order_task_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromServiceOrderTaskUpdateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_update_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_task_id' in params:
            form_params.append(('ServiceOrderTaskId', params['service_order_task_id']))  # noqa: E501
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_details' in params:
            form_params.append(('TaskDetails', params['task_details']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'finish_time' in params:
            form_params.append(('FinishTime', params['finish_time']))  # noqa: E501
        if 'time_spent_minutes' in params:
            form_params.append(('TimeSpentMinutes', params['time_spent_minutes']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'is_hourly' in params:
            form_params.append(('IsHourly', params['is_hourly']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/tasks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_tasks_update_work_order_task(self, service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_update_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_update_work_order_task(service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_task_id: (required)
        :param str task_name: (required)
        :param str task_details: (required)
        :param datetime start_time: (required)
        :param datetime finish_time: (required)
        :param int time_spent_minutes: (required)
        :param float price: (required)
        :param bool is_hourly: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_tasks_update_work_order_task_with_http_info(service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_tasks_update_work_order_task_with_http_info(service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_tasks_update_work_order_task_with_http_info(self, service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, **kwargs):  # noqa: E501
        """service_order_tasks_update_work_order_task  # noqa: E501

        - If StartTime and FinishTime are defined TimeSpent will be ignored and recalculated based on their difference  - If StartTime and FinishTime are not defined they will be recalculated      - if StartTime - in will be recalculated FinishTime - TimeSpent      - if FinishTime - in will be recalculated StartTime + TimeSpent  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_tasks_update_work_order_task_with_http_info(service_order_task_id, task_name, task_details, start_time, finish_time, time_spent_minutes, price, is_hourly, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_task_id: (required)
        :param str task_name: (required)
        :param str task_details: (required)
        :param datetime start_time: (required)
        :param datetime finish_time: (required)
        :param int time_spent_minutes: (required)
        :param float price: (required)
        :param bool is_hourly: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_task_id', 'task_name', 'task_details', 'start_time', 'finish_time', 'time_spent_minutes', 'price', 'is_hourly', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_tasks_update_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_task_id' is set
        if ('service_order_task_id' not in params or
                params['service_order_task_id'] is None):
            raise ValueError("Missing the required parameter `service_order_task_id` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'task_name' is set
        if ('task_name' not in params or
                params['task_name'] is None):
            raise ValueError("Missing the required parameter `task_name` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'task_details' is set
        if ('task_details' not in params or
                params['task_details'] is None):
            raise ValueError("Missing the required parameter `task_details` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'start_time' is set
        if ('start_time' not in params or
                params['start_time'] is None):
            raise ValueError("Missing the required parameter `start_time` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'finish_time' is set
        if ('finish_time' not in params or
                params['finish_time'] is None):
            raise ValueError("Missing the required parameter `finish_time` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'time_spent_minutes' is set
        if ('time_spent_minutes' not in params or
                params['time_spent_minutes'] is None):
            raise ValueError("Missing the required parameter `time_spent_minutes` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'is_hourly' is set
        if ('is_hourly' not in params or
                params['is_hourly'] is None):
            raise ValueError("Missing the required parameter `is_hourly` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_tasks_update_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_task_id' in params:
            form_params.append(('ServiceOrderTaskId', params['service_order_task_id']))  # noqa: E501
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_details' in params:
            form_params.append(('TaskDetails', params['task_details']))  # noqa: E501
        if 'start_time' in params:
            form_params.append(('StartTime', params['start_time']))  # noqa: E501
        if 'finish_time' in params:
            form_params.append(('FinishTime', params['finish_time']))  # noqa: E501
        if 'time_spent_minutes' in params:
            form_params.append(('TimeSpentMinutes', params['time_spent_minutes']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'is_hourly' in params:
            form_params.append(('IsHourly', params['is_hourly']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/tasks', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
