# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderItemMeasurementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_item_measurements_add_auxiliary_tools(self, body, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_measurements_add_auxiliary_tools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_add_auxiliary_tools(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsMeasurementsFromCreateMeasurementToolModel] body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_add_auxiliary_tools_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_add_auxiliary_tools_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_add_auxiliary_tools_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_measurements_add_auxiliary_tools  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_add_auxiliary_tools_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsMeasurementsFromCreateMeasurementToolModel] body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_add_auxiliary_tools" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_item_measurements_add_auxiliary_tools`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_add_auxiliary_tools`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/AuxiliaryTools', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_create_measurement_form(self, body, work_item_id, **kwargs):  # noqa: E501
        """Create Measurement Form.  # noqa: E501

        BatchType: AsLeft, AsFound.                BatchResult: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                CustomFields.Result: NotServiced, Fail, Pass.                ToleranceType: Percentage, Range, Offset, PercentagePlus, Ppm, PpmPlus, Function.                ToleranceMode: Symmetric, Asymmetric, Range.                ToleranceUnit: Percentage, UnitOfMeasure, Ppm.                PrecisionType: Percentage, UnitOfMeasure.                ChannelsType: Combined, IndividualAcross, IndividualDown, OneOf.                Measurement.Result: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                FactorId: AmbientTemperature, AirHumidity, BarometricPressure, EvaporationRate, AirBuoyancy, ZFactor, Altitude, WindSpeed, SolarRadiation, LightIntensity, NoiseLevel, PhLevel, WaterConductivity3, WaterTemperature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_create_measurement_form(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsMeasurementsFromCreateMeasurementFormModel body: Measurement Form parameters (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_create_measurement_form_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_create_measurement_form_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_create_measurement_form_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """Create Measurement Form.  # noqa: E501

        BatchType: AsLeft, AsFound.                BatchResult: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                CustomFields.Result: NotServiced, Fail, Pass.                ToleranceType: Percentage, Range, Offset, PercentagePlus, Ppm, PpmPlus, Function.                ToleranceMode: Symmetric, Asymmetric, Range.                ToleranceUnit: Percentage, UnitOfMeasure, Ppm.                PrecisionType: Percentage, UnitOfMeasure.                ChannelsType: Combined, IndividualAcross, IndividualDown, OneOf.                Measurement.Result: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                FactorId: AmbientTemperature, AirHumidity, BarometricPressure, EvaporationRate, AirBuoyancy, ZFactor, Altitude, WindSpeed, SolarRadiation, LightIntensity, NoiseLevel, PhLevel, WaterConductivity3, WaterTemperature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_create_measurement_form_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsMeasurementsFromCreateMeasurementFormModel body: Measurement Form parameters (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_create_measurement_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'batch_type' in params:
            form_params.append(('BatchType', params['batch_type']))  # noqa: E501
        if 'batch_result' in params:
            form_params.append(('BatchResult', params['batch_result']))  # noqa: E501
        if 'specification' in params:
            form_params.append(('Specification', params['specification']))  # noqa: E501
        if 'measurement_sets' in params:
            form_params.append(('MeasurementSets', params['measurement_sets']))  # noqa: E501
            collection_formats['MeasurementSets'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/measurements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_create_measurement_form(self, batch_type, batch_result, specification, measurement_sets, work_item_id, **kwargs):  # noqa: E501
        """Create Measurement Form.  # noqa: E501

        BatchType: AsLeft, AsFound.                BatchResult: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                CustomFields.Result: NotServiced, Fail, Pass.                ToleranceType: Percentage, Range, Offset, PercentagePlus, Ppm, PpmPlus, Function.                ToleranceMode: Symmetric, Asymmetric, Range.                ToleranceUnit: Percentage, UnitOfMeasure, Ppm.                PrecisionType: Percentage, UnitOfMeasure.                ChannelsType: Combined, IndividualAcross, IndividualDown, OneOf.                Measurement.Result: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                FactorId: AmbientTemperature, AirHumidity, BarometricPressure, EvaporationRate, AirBuoyancy, ZFactor, Altitude, WindSpeed, SolarRadiation, LightIntensity, NoiseLevel, PhLevel, WaterConductivity3, WaterTemperature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_create_measurement_form(batch_type, batch_result, specification, measurement_sets, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str batch_type: (required)
        :param str batch_result: (required)
        :param QualerApiModelsMeasurementsFromSpecification specification: (required)
        :param list[QualerApiModelsMeasurementsFromCreateMeasurementSetModel] measurement_sets: (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_create_measurement_form_with_http_info(batch_type, batch_result, specification, measurement_sets, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_create_measurement_form_with_http_info(batch_type, batch_result, specification, measurement_sets, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_create_measurement_form_with_http_info(self, batch_type, batch_result, specification, measurement_sets, work_item_id, **kwargs):  # noqa: E501
        """Create Measurement Form.  # noqa: E501

        BatchType: AsLeft, AsFound.                BatchResult: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                CustomFields.Result: NotServiced, Fail, Pass.                ToleranceType: Percentage, Range, Offset, PercentagePlus, Ppm, PpmPlus, Function.                ToleranceMode: Symmetric, Asymmetric, Range.                ToleranceUnit: Percentage, UnitOfMeasure, Ppm.                PrecisionType: Percentage, UnitOfMeasure.                ChannelsType: Combined, IndividualAcross, IndividualDown, OneOf.                Measurement.Result: NotServiced, Fail, FailAmbiguous, FailSignificant, Pass, PassAmbiguous, PassAdjustment, Done, Pending.                FactorId: AmbientTemperature, AirHumidity, BarometricPressure, EvaporationRate, AirBuoyancy, ZFactor, Altitude, WindSpeed, SolarRadiation, LightIntensity, NoiseLevel, PhLevel, WaterConductivity3, WaterTemperature.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_create_measurement_form_with_http_info(batch_type, batch_result, specification, measurement_sets, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str batch_type: (required)
        :param str batch_result: (required)
        :param QualerApiModelsMeasurementsFromSpecification specification: (required)
        :param list[QualerApiModelsMeasurementsFromCreateMeasurementSetModel] measurement_sets: (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['batch_type', 'batch_result', 'specification', 'measurement_sets', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_create_measurement_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'batch_type' is set
        if ('batch_type' not in params or
                params['batch_type'] is None):
            raise ValueError("Missing the required parameter `batch_type` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501
        # verify the required parameter 'batch_result' is set
        if ('batch_result' not in params or
                params['batch_result'] is None):
            raise ValueError("Missing the required parameter `batch_result` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501
        # verify the required parameter 'specification' is set
        if ('specification' not in params or
                params['specification'] is None):
            raise ValueError("Missing the required parameter `specification` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501
        # verify the required parameter 'measurement_sets' is set
        if ('measurement_sets' not in params or
                params['measurement_sets'] is None):
            raise ValueError("Missing the required parameter `measurement_sets` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_create_measurement_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'batch_type' in params:
            form_params.append(('BatchType', params['batch_type']))  # noqa: E501
        if 'batch_result' in params:
            form_params.append(('BatchResult', params['batch_result']))  # noqa: E501
        if 'specification' in params:
            form_params.append(('Specification', params['specification']))  # noqa: E501
        if 'measurement_sets' in params:
            form_params.append(('MeasurementSets', params['measurement_sets']))  # noqa: E501
            collection_formats['MeasurementSets'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/measurements', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_get_measurement_form(self, work_item_id, **kwargs):  # noqa: E501
        """Get Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_get_measurement_form(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: QualerApiModelsMeasurementsToUpdateMeasurementFormResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_get_measurement_form_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_get_measurement_form_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_get_measurement_form_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """Get Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_get_measurement_form_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: QualerApiModelsMeasurementsToUpdateMeasurementFormResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_get_measurement_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_get_measurement_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/form', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsMeasurementsToUpdateMeasurementFormResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_get_measurements_by_asset(self, asset_id, **kwargs):  # noqa: E501
        """service_order_item_measurements_get_measurements_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_get_measurements_by_asset(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param datetime _from:
        :param datetime to:
        :return: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_get_measurements_by_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_get_measurements_by_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_get_measurements_by_asset_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """service_order_item_measurements_get_measurements_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_get_measurements_by_asset_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param datetime _from:
        :param datetime to:
        :return: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id', '_from', 'to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_get_measurements_by_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `service_order_item_measurements_get_measurements_by_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/assets/{assetId}/measurements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsMeasurementsToMeasurementRecordResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_update_measurement_form(self, body, work_item_id, **kwargs):  # noqa: E501
        """Update Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_update_measurement_form(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsMeasurementsFromUpdateMeasurementFormModel body: Measurement Form parameters (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_update_measurement_form_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_update_measurement_form_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_update_measurement_form_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """Update Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_update_measurement_form_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsMeasurementsFromUpdateMeasurementFormModel body: Measurement Form parameters (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_update_measurement_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_item_measurements_update_measurement_form`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_update_measurement_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'measurement_batches' in params:
            form_params.append(('MeasurementBatches', params['measurement_batches']))  # noqa: E501
            collection_formats['MeasurementBatches'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/form', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_measurements_update_measurement_form(self, measurement_batches, work_item_id, **kwargs):  # noqa: E501
        """Update Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_update_measurement_form(measurement_batches, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsMeasurementsFromUpdateMeasurementBatchModel] measurement_batches: (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_measurements_update_measurement_form_with_http_info(measurement_batches, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_measurements_update_measurement_form_with_http_info(measurement_batches, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_measurements_update_measurement_form_with_http_info(self, measurement_batches, work_item_id, **kwargs):  # noqa: E501
        """Update Measurement Form.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_measurements_update_measurement_form_with_http_info(measurement_batches, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsMeasurementsFromUpdateMeasurementBatchModel] measurement_batches: (required)
        :param int work_item_id: Work Item ID of Measurement Form (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['measurement_batches', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_measurements_update_measurement_form" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'measurement_batches' is set
        if ('measurement_batches' not in params or
                params['measurement_batches'] is None):
            raise ValueError("Missing the required parameter `measurement_batches` when calling `service_order_item_measurements_update_measurement_form`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_measurements_update_measurement_form`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'measurement_batches' in params:
            form_params.append(('MeasurementBatches', params['measurement_batches']))  # noqa: E501
            collection_formats['MeasurementBatches'] = 'multi'  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/form', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
