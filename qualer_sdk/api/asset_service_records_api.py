# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AssetServiceRecordsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_service_records_add_asset_service_record(self, body, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_add_asset_service_record(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel body: (required)
        :param int asset_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_add_asset_service_record_with_http_info(body, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_add_asset_service_record_with_http_info(body, asset_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_add_asset_service_record_with_http_info(self, body, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_add_asset_service_record_with_http_info(body, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel body: (required)
        :param int asset_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_add_asset_service_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_number' in params:
            form_params.append(('ServiceOrderNumber', params['service_order_number']))  # noqa: E501
        if 'custom_order_number' in params:
            form_params.append(('CustomOrderNumber', params['custom_order_number']))  # noqa: E501
        if 'order_item_number' in params:
            form_params.append(('OrderItemNumber', params['order_item_number']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'applied_interval' in params:
            form_params.append(('AppliedInterval', params['applied_interval']))  # noqa: E501
        if 'as_found_tolerance' in params:
            form_params.append(('AsFoundTolerance', params['as_found_tolerance']))  # noqa: E501
        if 'as_left_tolerance' in params:
            form_params.append(('AsLeftTolerance', params['as_left_tolerance']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'due_date' in params:
            form_params.append(('DueDate', params['due_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'service_level' in params:
            form_params.append(('ServiceLevel', params['service_level']))  # noqa: E501
        if 'service_level_code' in params:
            form_params.append(('ServiceLevelCode', params['service_level_code']))  # noqa: E501
        if 'next_service_level' in params:
            form_params.append(('NextServiceLevel', params['next_service_level']))  # noqa: E501
        if 'next_service_level_code' in params:
            form_params.append(('NextServiceLevelCode', params['next_service_level_code']))  # noqa: E501
        if 'asset_name' in params:
            form_params.append(('AssetName', params['asset_name']))  # noqa: E501
        if 'asset_description' in params:
            form_params.append(('AssetDescription', params['asset_description']))  # noqa: E501
        if 'parts_charge' in params:
            form_params.append(('PartsCharge', params['parts_charge']))  # noqa: E501
        if 'parts_charge_before_discount' in params:
            form_params.append(('PartsChargeBeforeDiscount', params['parts_charge_before_discount']))  # noqa: E501
        if 'service_charge' in params:
            form_params.append(('ServiceCharge', params['service_charge']))  # noqa: E501
        if 'repairs_charge' in params:
            form_params.append(('RepairsCharge', params['repairs_charge']))  # noqa: E501
        if 'segment_name' in params:
            form_params.append(('SegmentName', params['segment_name']))  # noqa: E501
        if 'schedule_name' in params:
            form_params.append(('ScheduleName', params['schedule_name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{assetId}/assetservicerecords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_add_asset_service_record(self, service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_add_asset_service_record(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_number: (required)
        :param str custom_order_number: (required)
        :param int order_item_number: (required)
        :param str certificate_number: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param int applied_interval: (required)
        :param float as_found_tolerance: (required)
        :param float as_left_tolerance: (required)
        :param datetime service_date: (required)
        :param str serial_number: (required)
        :param str asset_tag: (required)
        :param str asset_user: (required)
        :param str service_notes: (required)
        :param datetime due_date: (required)
        :param datetime next_service_date: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str service_level: (required)
        :param str service_level_code: (required)
        :param str next_service_level: (required)
        :param str next_service_level_code: (required)
        :param str asset_name: (required)
        :param str asset_description: (required)
        :param float parts_charge: (required)
        :param float parts_charge_before_discount: (required)
        :param float service_charge: (required)
        :param float repairs_charge: (required)
        :param str segment_name: (required)
        :param str schedule_name: (required)
        :param int asset_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_add_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_add_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_add_asset_service_record_with_http_info(self, service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_add_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_number: (required)
        :param str custom_order_number: (required)
        :param int order_item_number: (required)
        :param str certificate_number: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param int applied_interval: (required)
        :param float as_found_tolerance: (required)
        :param float as_left_tolerance: (required)
        :param datetime service_date: (required)
        :param str serial_number: (required)
        :param str asset_tag: (required)
        :param str asset_user: (required)
        :param str service_notes: (required)
        :param datetime due_date: (required)
        :param datetime next_service_date: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str service_level: (required)
        :param str service_level_code: (required)
        :param str next_service_level: (required)
        :param str next_service_level_code: (required)
        :param str asset_name: (required)
        :param str asset_description: (required)
        :param float parts_charge: (required)
        :param float parts_charge_before_discount: (required)
        :param float service_charge: (required)
        :param float repairs_charge: (required)
        :param str segment_name: (required)
        :param str schedule_name: (required)
        :param int asset_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_number', 'custom_order_number', 'order_item_number', 'certificate_number', 'result_status', 'as_found_result', 'as_left_result', 'applied_interval', 'as_found_tolerance', 'as_left_tolerance', 'service_date', 'serial_number', 'asset_tag', 'asset_user', 'service_notes', 'due_date', 'next_service_date', 'provider_technician', 'provider_phone', 'provider_company', 'service_level', 'service_level_code', 'next_service_level', 'next_service_level_code', 'asset_name', 'asset_description', 'parts_charge', 'parts_charge_before_discount', 'service_charge', 'repairs_charge', 'segment_name', 'schedule_name', 'asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_add_asset_service_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_number' is set
        if ('service_order_number' not in params or
                params['service_order_number'] is None):
            raise ValueError("Missing the required parameter `service_order_number` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'custom_order_number' is set
        if ('custom_order_number' not in params or
                params['custom_order_number'] is None):
            raise ValueError("Missing the required parameter `custom_order_number` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'order_item_number' is set
        if ('order_item_number' not in params or
                params['order_item_number'] is None):
            raise ValueError("Missing the required parameter `order_item_number` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'certificate_number' is set
        if ('certificate_number' not in params or
                params['certificate_number'] is None):
            raise ValueError("Missing the required parameter `certificate_number` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'result_status' is set
        if ('result_status' not in params or
                params['result_status'] is None):
            raise ValueError("Missing the required parameter `result_status` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_found_result' is set
        if ('as_found_result' not in params or
                params['as_found_result'] is None):
            raise ValueError("Missing the required parameter `as_found_result` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_left_result' is set
        if ('as_left_result' not in params or
                params['as_left_result'] is None):
            raise ValueError("Missing the required parameter `as_left_result` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'applied_interval' is set
        if ('applied_interval' not in params or
                params['applied_interval'] is None):
            raise ValueError("Missing the required parameter `applied_interval` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_found_tolerance' is set
        if ('as_found_tolerance' not in params or
                params['as_found_tolerance'] is None):
            raise ValueError("Missing the required parameter `as_found_tolerance` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_left_tolerance' is set
        if ('as_left_tolerance' not in params or
                params['as_left_tolerance'] is None):
            raise ValueError("Missing the required parameter `as_left_tolerance` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_date' is set
        if ('service_date' not in params or
                params['service_date'] is None):
            raise ValueError("Missing the required parameter `service_date` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_tag' is set
        if ('asset_tag' not in params or
                params['asset_tag'] is None):
            raise ValueError("Missing the required parameter `asset_tag` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_user' is set
        if ('asset_user' not in params or
                params['asset_user'] is None):
            raise ValueError("Missing the required parameter `asset_user` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_notes' is set
        if ('service_notes' not in params or
                params['service_notes'] is None):
            raise ValueError("Missing the required parameter `service_notes` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'due_date' is set
        if ('due_date' not in params or
                params['due_date'] is None):
            raise ValueError("Missing the required parameter `due_date` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_date' is set
        if ('next_service_date' not in params or
                params['next_service_date'] is None):
            raise ValueError("Missing the required parameter `next_service_date` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_technician' is set
        if ('provider_technician' not in params or
                params['provider_technician'] is None):
            raise ValueError("Missing the required parameter `provider_technician` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_phone' is set
        if ('provider_phone' not in params or
                params['provider_phone'] is None):
            raise ValueError("Missing the required parameter `provider_phone` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_company' is set
        if ('provider_company' not in params or
                params['provider_company'] is None):
            raise ValueError("Missing the required parameter `provider_company` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_level' is set
        if ('service_level' not in params or
                params['service_level'] is None):
            raise ValueError("Missing the required parameter `service_level` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_level_code' is set
        if ('service_level_code' not in params or
                params['service_level_code'] is None):
            raise ValueError("Missing the required parameter `service_level_code` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_level' is set
        if ('next_service_level' not in params or
                params['next_service_level'] is None):
            raise ValueError("Missing the required parameter `next_service_level` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_level_code' is set
        if ('next_service_level_code' not in params or
                params['next_service_level_code'] is None):
            raise ValueError("Missing the required parameter `next_service_level_code` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_name' is set
        if ('asset_name' not in params or
                params['asset_name'] is None):
            raise ValueError("Missing the required parameter `asset_name` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_description' is set
        if ('asset_description' not in params or
                params['asset_description'] is None):
            raise ValueError("Missing the required parameter `asset_description` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'parts_charge' is set
        if ('parts_charge' not in params or
                params['parts_charge'] is None):
            raise ValueError("Missing the required parameter `parts_charge` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'parts_charge_before_discount' is set
        if ('parts_charge_before_discount' not in params or
                params['parts_charge_before_discount'] is None):
            raise ValueError("Missing the required parameter `parts_charge_before_discount` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_charge' is set
        if ('service_charge' not in params or
                params['service_charge'] is None):
            raise ValueError("Missing the required parameter `service_charge` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'repairs_charge' is set
        if ('repairs_charge' not in params or
                params['repairs_charge'] is None):
            raise ValueError("Missing the required parameter `repairs_charge` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'segment_name' is set
        if ('segment_name' not in params or
                params['segment_name'] is None):
            raise ValueError("Missing the required parameter `segment_name` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'schedule_name' is set
        if ('schedule_name' not in params or
                params['schedule_name'] is None):
            raise ValueError("Missing the required parameter `schedule_name` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_service_records_add_asset_service_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_number' in params:
            form_params.append(('ServiceOrderNumber', params['service_order_number']))  # noqa: E501
        if 'custom_order_number' in params:
            form_params.append(('CustomOrderNumber', params['custom_order_number']))  # noqa: E501
        if 'order_item_number' in params:
            form_params.append(('OrderItemNumber', params['order_item_number']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'applied_interval' in params:
            form_params.append(('AppliedInterval', params['applied_interval']))  # noqa: E501
        if 'as_found_tolerance' in params:
            form_params.append(('AsFoundTolerance', params['as_found_tolerance']))  # noqa: E501
        if 'as_left_tolerance' in params:
            form_params.append(('AsLeftTolerance', params['as_left_tolerance']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'due_date' in params:
            form_params.append(('DueDate', params['due_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'service_level' in params:
            form_params.append(('ServiceLevel', params['service_level']))  # noqa: E501
        if 'service_level_code' in params:
            form_params.append(('ServiceLevelCode', params['service_level_code']))  # noqa: E501
        if 'next_service_level' in params:
            form_params.append(('NextServiceLevel', params['next_service_level']))  # noqa: E501
        if 'next_service_level_code' in params:
            form_params.append(('NextServiceLevelCode', params['next_service_level_code']))  # noqa: E501
        if 'asset_name' in params:
            form_params.append(('AssetName', params['asset_name']))  # noqa: E501
        if 'asset_description' in params:
            form_params.append(('AssetDescription', params['asset_description']))  # noqa: E501
        if 'parts_charge' in params:
            form_params.append(('PartsCharge', params['parts_charge']))  # noqa: E501
        if 'parts_charge_before_discount' in params:
            form_params.append(('PartsChargeBeforeDiscount', params['parts_charge_before_discount']))  # noqa: E501
        if 'service_charge' in params:
            form_params.append(('ServiceCharge', params['service_charge']))  # noqa: E501
        if 'repairs_charge' in params:
            form_params.append(('RepairsCharge', params['repairs_charge']))  # noqa: E501
        if 'segment_name' in params:
            form_params.append(('SegmentName', params['segment_name']))  # noqa: E501
        if 'schedule_name' in params:
            form_params.append(('ScheduleName', params['schedule_name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{assetId}/assetservicerecords', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_document_list(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_document_list(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_document_list_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_document_list_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_document_list_with_http_info(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_document_list_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_service_record_id', 'model_asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_document_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_document_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_service_record_id' in params:
            query_params.append(('assetServiceRecordId', params['asset_service_record_id']))  # noqa: E501
        if 'model_asset_service_record_id' in params:
            query_params.append(('model.assetServiceRecordId', params['model_asset_service_record_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{AssetServiceRecordId}/documents/files', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[str]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_download_document(self, asset_service_record_id, file_name, **kwargs):  # noqa: E501
        """asset_service_records_download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_download_document(asset_service_record_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param str file_name: (required)
        :param int model_asset_service_record_id:
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_download_document_with_http_info(asset_service_record_id, file_name, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_download_document_with_http_info(asset_service_record_id, file_name, **kwargs)  # noqa: E501
            return data

    def asset_service_records_download_document_with_http_info(self, asset_service_record_id, file_name, **kwargs):  # noqa: E501
        """asset_service_records_download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_download_document_with_http_info(asset_service_record_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param str file_name: (required)
        :param int model_asset_service_record_id:
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_service_record_id', 'file_name', 'model_asset_service_record_id', 'model_file_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_download_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_download_document`")  # noqa: E501
        # verify the required parameter 'file_name' is set
        if ('file_name' not in params or
                params['file_name'] is None):
            raise ValueError("Missing the required parameter `file_name` when calling `asset_service_records_download_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'asset_service_record_id' in params:
            query_params.append(('assetServiceRecordId', params['asset_service_record_id']))  # noqa: E501
        if 'file_name' in params:
            query_params.append(('fileName', params['file_name']))  # noqa: E501
        if 'model_asset_service_record_id' in params:
            query_params.append(('model.assetServiceRecordId', params['model_asset_service_record_id']))  # noqa: E501
        if 'model_file_name' in params:
            query_params.append(('model.fileName', params['model_file_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{AssetServiceRecordId}/documents/{FileName}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_download_documents(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_download_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_download_documents_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_download_documents_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_download_documents_with_http_info(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_download_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_download_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_download_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_service_record_id' in params:
            path_params['assetServiceRecordId'] = params['asset_service_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{assetServiceRecordId}/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_get_asset_service_record(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_record(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_get_asset_service_record_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_get_asset_service_record_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_get_asset_service_record_with_http_info(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_record_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_service_record_id', 'model_asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_get_asset_service_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_get_asset_service_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_service_record_id' in params:
            path_params['AssetServiceRecordId'] = params['asset_service_record_id']  # noqa: E501

        query_params = []
        if 'model_asset_service_record_id' in params:
            query_params.append(('model.assetServiceRecordId', params['model_asset_service_record_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{AssetServiceRecordId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_get_asset_service_records(self, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_records(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param str model_serial_number:
        :param datetime model_from:
        :param datetime model_to:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_get_asset_service_records_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_get_asset_service_records_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_service_records_get_asset_service_records_with_http_info(self, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_records_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param str model_serial_number:
        :param datetime model_from:
        :param datetime model_to:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_asset_id', 'model_serial_number', 'model_from', 'model_to']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_get_asset_service_records" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501
        if 'model_serial_number' in params:
            query_params.append(('model.serialNumber', params['model_serial_number']))  # noqa: E501
        if 'model_from' in params:
            query_params.append(('model.from', params['model_from']))  # noqa: E501
        if 'model_to' in params:
            query_params.append(('model.to', params['model_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_get_asset_service_records_by_asset(self, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_records_by_asset(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_get_asset_service_records_by_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_get_asset_service_records_by_asset_with_http_info(asset_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_get_asset_service_records_by_asset_with_http_info(self, asset_id, **kwargs):  # noqa: E501
        """asset_service_records_get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_get_asset_service_records_by_asset_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_get_asset_service_records_by_asset" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_id' is set
        if ('asset_id' not in params or
                params['asset_id'] is None):
            raise ValueError("Missing the required parameter `asset_id` when calling `asset_service_records_get_asset_service_records_by_asset`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_id' in params:
            path_params['assetId'] = params['asset_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assets/{assetId}/assetservicerecords', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_update_asset_service_record(self, body, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_update_asset_service_record(body, asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel body: (required)
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_update_asset_service_record_with_http_info(body, asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_update_asset_service_record_with_http_info(body, asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_update_asset_service_record_with_http_info(self, body, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_update_asset_service_record_with_http_info(body, asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel body: (required)
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_update_asset_service_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_service_record_id' in params:
            path_params['assetServiceRecordId'] = params['asset_service_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_number' in params:
            form_params.append(('ServiceOrderNumber', params['service_order_number']))  # noqa: E501
        if 'custom_order_number' in params:
            form_params.append(('CustomOrderNumber', params['custom_order_number']))  # noqa: E501
        if 'order_item_number' in params:
            form_params.append(('OrderItemNumber', params['order_item_number']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'applied_interval' in params:
            form_params.append(('AppliedInterval', params['applied_interval']))  # noqa: E501
        if 'as_found_tolerance' in params:
            form_params.append(('AsFoundTolerance', params['as_found_tolerance']))  # noqa: E501
        if 'as_left_tolerance' in params:
            form_params.append(('AsLeftTolerance', params['as_left_tolerance']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'due_date' in params:
            form_params.append(('DueDate', params['due_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'service_level' in params:
            form_params.append(('ServiceLevel', params['service_level']))  # noqa: E501
        if 'service_level_code' in params:
            form_params.append(('ServiceLevelCode', params['service_level_code']))  # noqa: E501
        if 'next_service_level' in params:
            form_params.append(('NextServiceLevel', params['next_service_level']))  # noqa: E501
        if 'next_service_level_code' in params:
            form_params.append(('NextServiceLevelCode', params['next_service_level_code']))  # noqa: E501
        if 'asset_name' in params:
            form_params.append(('AssetName', params['asset_name']))  # noqa: E501
        if 'asset_description' in params:
            form_params.append(('AssetDescription', params['asset_description']))  # noqa: E501
        if 'parts_charge' in params:
            form_params.append(('PartsCharge', params['parts_charge']))  # noqa: E501
        if 'parts_charge_before_discount' in params:
            form_params.append(('PartsChargeBeforeDiscount', params['parts_charge_before_discount']))  # noqa: E501
        if 'service_charge' in params:
            form_params.append(('ServiceCharge', params['service_charge']))  # noqa: E501
        if 'repairs_charge' in params:
            form_params.append(('RepairsCharge', params['repairs_charge']))  # noqa: E501
        if 'segment_name' in params:
            form_params.append(('SegmentName', params['segment_name']))  # noqa: E501
        if 'schedule_name' in params:
            form_params.append(('ScheduleName', params['schedule_name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{assetServiceRecordId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_update_asset_service_record(self, service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_update_asset_service_record(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_number: (required)
        :param str custom_order_number: (required)
        :param int order_item_number: (required)
        :param str certificate_number: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param int applied_interval: (required)
        :param float as_found_tolerance: (required)
        :param float as_left_tolerance: (required)
        :param datetime service_date: (required)
        :param str serial_number: (required)
        :param str asset_tag: (required)
        :param str asset_user: (required)
        :param str service_notes: (required)
        :param datetime due_date: (required)
        :param datetime next_service_date: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str service_level: (required)
        :param str service_level_code: (required)
        :param str next_service_level: (required)
        :param str next_service_level_code: (required)
        :param str asset_name: (required)
        :param str asset_description: (required)
        :param float parts_charge: (required)
        :param float parts_charge_before_discount: (required)
        :param float service_charge: (required)
        :param float repairs_charge: (required)
        :param str segment_name: (required)
        :param str schedule_name: (required)
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_update_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_update_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_update_asset_service_record_with_http_info(self, service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_update_asset_service_record_with_http_info(service_order_number, custom_order_number, order_item_number, certificate_number, result_status, as_found_result, as_left_result, applied_interval, as_found_tolerance, as_left_tolerance, service_date, serial_number, asset_tag, asset_user, service_notes, due_date, next_service_date, provider_technician, provider_phone, provider_company, service_level, service_level_code, next_service_level, next_service_level_code, asset_name, asset_description, parts_charge, parts_charge_before_discount, service_charge, repairs_charge, segment_name, schedule_name, asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_number: (required)
        :param str custom_order_number: (required)
        :param int order_item_number: (required)
        :param str certificate_number: (required)
        :param str result_status: (required)
        :param str as_found_result: (required)
        :param str as_left_result: (required)
        :param int applied_interval: (required)
        :param float as_found_tolerance: (required)
        :param float as_left_tolerance: (required)
        :param datetime service_date: (required)
        :param str serial_number: (required)
        :param str asset_tag: (required)
        :param str asset_user: (required)
        :param str service_notes: (required)
        :param datetime due_date: (required)
        :param datetime next_service_date: (required)
        :param str provider_technician: (required)
        :param str provider_phone: (required)
        :param str provider_company: (required)
        :param str service_level: (required)
        :param str service_level_code: (required)
        :param str next_service_level: (required)
        :param str next_service_level_code: (required)
        :param str asset_name: (required)
        :param str asset_description: (required)
        :param float parts_charge: (required)
        :param float parts_charge_before_discount: (required)
        :param float service_charge: (required)
        :param float repairs_charge: (required)
        :param str segment_name: (required)
        :param str schedule_name: (required)
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_number', 'custom_order_number', 'order_item_number', 'certificate_number', 'result_status', 'as_found_result', 'as_left_result', 'applied_interval', 'as_found_tolerance', 'as_left_tolerance', 'service_date', 'serial_number', 'asset_tag', 'asset_user', 'service_notes', 'due_date', 'next_service_date', 'provider_technician', 'provider_phone', 'provider_company', 'service_level', 'service_level_code', 'next_service_level', 'next_service_level_code', 'asset_name', 'asset_description', 'parts_charge', 'parts_charge_before_discount', 'service_charge', 'repairs_charge', 'segment_name', 'schedule_name', 'asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_update_asset_service_record" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_number' is set
        if ('service_order_number' not in params or
                params['service_order_number'] is None):
            raise ValueError("Missing the required parameter `service_order_number` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'custom_order_number' is set
        if ('custom_order_number' not in params or
                params['custom_order_number'] is None):
            raise ValueError("Missing the required parameter `custom_order_number` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'order_item_number' is set
        if ('order_item_number' not in params or
                params['order_item_number'] is None):
            raise ValueError("Missing the required parameter `order_item_number` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'certificate_number' is set
        if ('certificate_number' not in params or
                params['certificate_number'] is None):
            raise ValueError("Missing the required parameter `certificate_number` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'result_status' is set
        if ('result_status' not in params or
                params['result_status'] is None):
            raise ValueError("Missing the required parameter `result_status` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_found_result' is set
        if ('as_found_result' not in params or
                params['as_found_result'] is None):
            raise ValueError("Missing the required parameter `as_found_result` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_left_result' is set
        if ('as_left_result' not in params or
                params['as_left_result'] is None):
            raise ValueError("Missing the required parameter `as_left_result` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'applied_interval' is set
        if ('applied_interval' not in params or
                params['applied_interval'] is None):
            raise ValueError("Missing the required parameter `applied_interval` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_found_tolerance' is set
        if ('as_found_tolerance' not in params or
                params['as_found_tolerance'] is None):
            raise ValueError("Missing the required parameter `as_found_tolerance` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'as_left_tolerance' is set
        if ('as_left_tolerance' not in params or
                params['as_left_tolerance'] is None):
            raise ValueError("Missing the required parameter `as_left_tolerance` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_date' is set
        if ('service_date' not in params or
                params['service_date'] is None):
            raise ValueError("Missing the required parameter `service_date` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'serial_number' is set
        if ('serial_number' not in params or
                params['serial_number'] is None):
            raise ValueError("Missing the required parameter `serial_number` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_tag' is set
        if ('asset_tag' not in params or
                params['asset_tag'] is None):
            raise ValueError("Missing the required parameter `asset_tag` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_user' is set
        if ('asset_user' not in params or
                params['asset_user'] is None):
            raise ValueError("Missing the required parameter `asset_user` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_notes' is set
        if ('service_notes' not in params or
                params['service_notes'] is None):
            raise ValueError("Missing the required parameter `service_notes` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'due_date' is set
        if ('due_date' not in params or
                params['due_date'] is None):
            raise ValueError("Missing the required parameter `due_date` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_date' is set
        if ('next_service_date' not in params or
                params['next_service_date'] is None):
            raise ValueError("Missing the required parameter `next_service_date` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_technician' is set
        if ('provider_technician' not in params or
                params['provider_technician'] is None):
            raise ValueError("Missing the required parameter `provider_technician` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_phone' is set
        if ('provider_phone' not in params or
                params['provider_phone'] is None):
            raise ValueError("Missing the required parameter `provider_phone` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'provider_company' is set
        if ('provider_company' not in params or
                params['provider_company'] is None):
            raise ValueError("Missing the required parameter `provider_company` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_level' is set
        if ('service_level' not in params or
                params['service_level'] is None):
            raise ValueError("Missing the required parameter `service_level` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_level_code' is set
        if ('service_level_code' not in params or
                params['service_level_code'] is None):
            raise ValueError("Missing the required parameter `service_level_code` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_level' is set
        if ('next_service_level' not in params or
                params['next_service_level'] is None):
            raise ValueError("Missing the required parameter `next_service_level` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'next_service_level_code' is set
        if ('next_service_level_code' not in params or
                params['next_service_level_code'] is None):
            raise ValueError("Missing the required parameter `next_service_level_code` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_name' is set
        if ('asset_name' not in params or
                params['asset_name'] is None):
            raise ValueError("Missing the required parameter `asset_name` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_description' is set
        if ('asset_description' not in params or
                params['asset_description'] is None):
            raise ValueError("Missing the required parameter `asset_description` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'parts_charge' is set
        if ('parts_charge' not in params or
                params['parts_charge'] is None):
            raise ValueError("Missing the required parameter `parts_charge` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'parts_charge_before_discount' is set
        if ('parts_charge_before_discount' not in params or
                params['parts_charge_before_discount'] is None):
            raise ValueError("Missing the required parameter `parts_charge_before_discount` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'service_charge' is set
        if ('service_charge' not in params or
                params['service_charge'] is None):
            raise ValueError("Missing the required parameter `service_charge` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'repairs_charge' is set
        if ('repairs_charge' not in params or
                params['repairs_charge'] is None):
            raise ValueError("Missing the required parameter `repairs_charge` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'segment_name' is set
        if ('segment_name' not in params or
                params['segment_name'] is None):
            raise ValueError("Missing the required parameter `segment_name` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'schedule_name' is set
        if ('schedule_name' not in params or
                params['schedule_name'] is None):
            raise ValueError("Missing the required parameter `schedule_name` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_update_asset_service_record`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_service_record_id' in params:
            path_params['assetServiceRecordId'] = params['asset_service_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_number' in params:
            form_params.append(('ServiceOrderNumber', params['service_order_number']))  # noqa: E501
        if 'custom_order_number' in params:
            form_params.append(('CustomOrderNumber', params['custom_order_number']))  # noqa: E501
        if 'order_item_number' in params:
            form_params.append(('OrderItemNumber', params['order_item_number']))  # noqa: E501
        if 'certificate_number' in params:
            form_params.append(('CertificateNumber', params['certificate_number']))  # noqa: E501
        if 'result_status' in params:
            form_params.append(('ResultStatus', params['result_status']))  # noqa: E501
        if 'as_found_result' in params:
            form_params.append(('AsFoundResult', params['as_found_result']))  # noqa: E501
        if 'as_left_result' in params:
            form_params.append(('AsLeftResult', params['as_left_result']))  # noqa: E501
        if 'applied_interval' in params:
            form_params.append(('AppliedInterval', params['applied_interval']))  # noqa: E501
        if 'as_found_tolerance' in params:
            form_params.append(('AsFoundTolerance', params['as_found_tolerance']))  # noqa: E501
        if 'as_left_tolerance' in params:
            form_params.append(('AsLeftTolerance', params['as_left_tolerance']))  # noqa: E501
        if 'service_date' in params:
            form_params.append(('ServiceDate', params['service_date']))  # noqa: E501
        if 'serial_number' in params:
            form_params.append(('SerialNumber', params['serial_number']))  # noqa: E501
        if 'asset_tag' in params:
            form_params.append(('AssetTag', params['asset_tag']))  # noqa: E501
        if 'asset_user' in params:
            form_params.append(('AssetUser', params['asset_user']))  # noqa: E501
        if 'service_notes' in params:
            form_params.append(('ServiceNotes', params['service_notes']))  # noqa: E501
        if 'due_date' in params:
            form_params.append(('DueDate', params['due_date']))  # noqa: E501
        if 'next_service_date' in params:
            form_params.append(('NextServiceDate', params['next_service_date']))  # noqa: E501
        if 'provider_technician' in params:
            form_params.append(('ProviderTechnician', params['provider_technician']))  # noqa: E501
        if 'provider_phone' in params:
            form_params.append(('ProviderPhone', params['provider_phone']))  # noqa: E501
        if 'provider_company' in params:
            form_params.append(('ProviderCompany', params['provider_company']))  # noqa: E501
        if 'service_level' in params:
            form_params.append(('ServiceLevel', params['service_level']))  # noqa: E501
        if 'service_level_code' in params:
            form_params.append(('ServiceLevelCode', params['service_level_code']))  # noqa: E501
        if 'next_service_level' in params:
            form_params.append(('NextServiceLevel', params['next_service_level']))  # noqa: E501
        if 'next_service_level_code' in params:
            form_params.append(('NextServiceLevelCode', params['next_service_level_code']))  # noqa: E501
        if 'asset_name' in params:
            form_params.append(('AssetName', params['asset_name']))  # noqa: E501
        if 'asset_description' in params:
            form_params.append(('AssetDescription', params['asset_description']))  # noqa: E501
        if 'parts_charge' in params:
            form_params.append(('PartsCharge', params['parts_charge']))  # noqa: E501
        if 'parts_charge_before_discount' in params:
            form_params.append(('PartsChargeBeforeDiscount', params['parts_charge_before_discount']))  # noqa: E501
        if 'service_charge' in params:
            form_params.append(('ServiceCharge', params['service_charge']))  # noqa: E501
        if 'repairs_charge' in params:
            form_params.append(('RepairsCharge', params['repairs_charge']))  # noqa: E501
        if 'segment_name' in params:
            form_params.append(('SegmentName', params['segment_name']))  # noqa: E501
        if 'schedule_name' in params:
            form_params.append(('ScheduleName', params['schedule_name']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{assetServiceRecordId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_service_records_upload_documents(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_upload_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_service_records_upload_documents_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_service_records_upload_documents_with_http_info(asset_service_record_id, **kwargs)  # noqa: E501
            return data

    def asset_service_records_upload_documents_with_http_info(self, asset_service_record_id, **kwargs):  # noqa: E501
        """asset_service_records_upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_service_records_upload_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['asset_service_record_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_service_records_upload_documents" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'asset_service_record_id' is set
        if ('asset_service_record_id' not in params or
                params['asset_service_record_id'] is None):
            raise ValueError("Missing the required parameter `asset_service_record_id` when calling `asset_service_records_upload_documents`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'asset_service_record_id' in params:
            path_params['assetServiceRecordId'] = params['asset_service_record_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetservicerecords/{assetServiceRecordId}/documents', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
