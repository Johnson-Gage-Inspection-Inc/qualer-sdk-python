# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def account_companies(self, body, **kwargs):  # noqa: E501
        """account_companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_companies(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_companies_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_companies_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_companies_with_http_info(self, body, **kwargs):  # noqa: E501
        """account_companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_companies_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_companies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_companies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('UserName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'clear_previous_tokens' in params:
            form_params.append(('ClearPreviousTokens', params['clear_previous_tokens']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/companies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_companies(self, user_name, password, clear_previous_tokens, **kwargs):  # noqa: E501
        """account_companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_companies(user_name, password, clear_previous_tokens, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: (required)
        :param str password: (required)
        :param bool clear_previous_tokens: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_companies_with_http_info(user_name, password, clear_previous_tokens, **kwargs)  # noqa: E501
        else:
            (data) = self.account_companies_with_http_info(user_name, password, clear_previous_tokens, **kwargs)  # noqa: E501
            return data

    def account_companies_with_http_info(self, user_name, password, clear_previous_tokens, **kwargs):  # noqa: E501
        """account_companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_companies_with_http_info(user_name, password, clear_previous_tokens, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: (required)
        :param str password: (required)
        :param bool clear_previous_tokens: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'password', 'clear_previous_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_companies" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `account_companies`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `account_companies`")  # noqa: E501
        # verify the required parameter 'clear_previous_tokens' is set
        if ('clear_previous_tokens' not in params or
                params['clear_previous_tokens'] is None):
            raise ValueError("Missing the required parameter `clear_previous_tokens` when calling `account_companies`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('UserName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'clear_previous_tokens' in params:
            form_params.append(('ClearPreviousTokens', params['clear_previous_tokens']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/companies', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_employee_message(self, message_id, **kwargs):  # noqa: E501
        """account_get_employee_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_employee_message(message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int message_id: (required)
        :return: QualerApiModelsAccountToEmployeeEventMessageResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_employee_message_with_http_info(message_id, **kwargs)  # noqa: E501
        else:
            (data) = self.account_get_employee_message_with_http_info(message_id, **kwargs)  # noqa: E501
            return data

    def account_get_employee_message_with_http_info(self, message_id, **kwargs):  # noqa: E501
        """account_get_employee_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_employee_message_with_http_info(message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int message_id: (required)
        :return: QualerApiModelsAccountToEmployeeEventMessageResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['message_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_employee_message" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'message_id' is set
        if ('message_id' not in params or
                params['message_id'] is None):
            raise ValueError("Missing the required parameter `message_id` when calling `account_get_employee_message`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'message_id' in params:
            path_params['messageId'] = params['message_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/messages/{messageId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAccountToEmployeeEventMessageResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_get_employee_messages(self, **kwargs):  # noqa: E501
        """account_get_employee_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_employee_messages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_period:
        :param int model_site_id:
        :return: list[QualerApiModelsAccountToEmployeeEventResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_get_employee_messages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.account_get_employee_messages_with_http_info(**kwargs)  # noqa: E501
            return data

    def account_get_employee_messages_with_http_info(self, **kwargs):  # noqa: E501
        """account_get_employee_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_get_employee_messages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_period:
        :param int model_site_id:
        :return: list[QualerApiModelsAccountToEmployeeEventResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_period', 'model_site_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_get_employee_messages" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_period' in params:
            query_params.append(('model.period', params['model_period']))  # noqa: E501
        if 'model_site_id' in params:
            query_params.append(('model.siteId', params['model_site_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/messages', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAccountToEmployeeEventResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_login(self, body, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_login(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel body: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_login_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_login_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_login_with_http_info(self, body, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_login_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel body: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('UserName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'clear_previous_tokens' in params:
            form_params.append(('ClearPreviousTokens', params['clear_previous_tokens']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAccountFromLoginResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_login(self, user_name, password, clear_previous_tokens, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_login(user_name, password, clear_previous_tokens, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: (required)
        :param str password: (required)
        :param bool clear_previous_tokens: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_login_with_http_info(user_name, password, clear_previous_tokens, **kwargs)  # noqa: E501
        else:
            (data) = self.account_login_with_http_info(user_name, password, clear_previous_tokens, **kwargs)  # noqa: E501
            return data

    def account_login_with_http_info(self, user_name, password, clear_previous_tokens, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_login_with_http_info(user_name, password, clear_previous_tokens, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str user_name: (required)
        :param str password: (required)
        :param bool clear_previous_tokens: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['user_name', 'password', 'clear_previous_tokens']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_login" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'user_name' is set
        if ('user_name' not in params or
                params['user_name'] is None):
            raise ValueError("Missing the required parameter `user_name` when calling `account_login`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `account_login`")  # noqa: E501
        # verify the required parameter 'clear_previous_tokens' is set
        if ('clear_previous_tokens' not in params or
                params['clear_previous_tokens'] is None):
            raise ValueError("Missing the required parameter `clear_previous_tokens` when calling `account_login`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'user_name' in params:
            form_params.append(('UserName', params['user_name']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'clear_previous_tokens' in params:
            form_params.append(('ClearPreviousTokens', params['clear_previous_tokens']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/login', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAccountFromLoginResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_logout(self, body, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAccountToLogoutModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_logout_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_logout_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_logout_with_http_info(self, body, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAccountToLogoutModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_logout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'logout_action' in params:
            form_params.append(('LogoutAction', params['logout_action']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_logout(self, logout_action, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout(logout_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logout_action: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_logout_with_http_info(logout_action, **kwargs)  # noqa: E501
        else:
            (data) = self.account_logout_with_http_info(logout_action, **kwargs)  # noqa: E501
            return data

    def account_logout_with_http_info(self, logout_action, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_logout_with_http_info(logout_action, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str logout_action: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['logout_action']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_logout" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'logout_action' is set
        if ('logout_action' not in params or
                params['logout_action'] is None):
            raise ValueError("Missing the required parameter `logout_action` when calling `account_logout`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'logout_action' in params:
            form_params.append(('LogoutAction', params['logout_action']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/logout', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_post_employee_location(self, body, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_post_employee_location(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeLocationModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_post_employee_location_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.account_post_employee_location_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def account_post_employee_location_with_http_info(self, body, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_post_employee_location_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeLocationModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_post_employee_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `account_post_employee_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'latitude' in params:
            form_params.append(('Latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            form_params.append(('Longitude', params['longitude']))  # noqa: E501
        if 'accuracy' in params:
            form_params.append(('Accuracy', params['accuracy']))  # noqa: E501
        if 'altitude' in params:
            form_params.append(('Altitude', params['altitude']))  # noqa: E501
        if 'altitude_accuracy' in params:
            form_params.append(('AltitudeAccuracy', params['altitude_accuracy']))  # noqa: E501
        if 'heading' in params:
            form_params.append(('Heading', params['heading']))  # noqa: E501
        if 'speed' in params:
            form_params.append(('Speed', params['speed']))  # noqa: E501
        if 'timestamp' in params:
            form_params.append(('Timestamp', params['timestamp']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/location', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def account_post_employee_location(self, latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_post_employee_location(latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float latitude: (required)
        :param float longitude: (required)
        :param float accuracy: (required)
        :param float altitude: (required)
        :param float altitude_accuracy: (required)
        :param float heading: (required)
        :param float speed: (required)
        :param int timestamp: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.account_post_employee_location_with_http_info(latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, **kwargs)  # noqa: E501
        else:
            (data) = self.account_post_employee_location_with_http_info(latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, **kwargs)  # noqa: E501
            return data

    def account_post_employee_location_with_http_info(self, latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.account_post_employee_location_with_http_info(latitude, longitude, accuracy, altitude, altitude_accuracy, heading, speed, timestamp, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param float latitude: (required)
        :param float longitude: (required)
        :param float accuracy: (required)
        :param float altitude: (required)
        :param float altitude_accuracy: (required)
        :param float heading: (required)
        :param float speed: (required)
        :param int timestamp: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['latitude', 'longitude', 'accuracy', 'altitude', 'altitude_accuracy', 'heading', 'speed', 'timestamp']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method account_post_employee_location" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'latitude' is set
        if ('latitude' not in params or
                params['latitude'] is None):
            raise ValueError("Missing the required parameter `latitude` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'longitude' is set
        if ('longitude' not in params or
                params['longitude'] is None):
            raise ValueError("Missing the required parameter `longitude` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'accuracy' is set
        if ('accuracy' not in params or
                params['accuracy'] is None):
            raise ValueError("Missing the required parameter `accuracy` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'altitude' is set
        if ('altitude' not in params or
                params['altitude'] is None):
            raise ValueError("Missing the required parameter `altitude` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'altitude_accuracy' is set
        if ('altitude_accuracy' not in params or
                params['altitude_accuracy'] is None):
            raise ValueError("Missing the required parameter `altitude_accuracy` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'heading' is set
        if ('heading' not in params or
                params['heading'] is None):
            raise ValueError("Missing the required parameter `heading` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'speed' is set
        if ('speed' not in params or
                params['speed'] is None):
            raise ValueError("Missing the required parameter `speed` when calling `account_post_employee_location`")  # noqa: E501
        # verify the required parameter 'timestamp' is set
        if ('timestamp' not in params or
                params['timestamp'] is None):
            raise ValueError("Missing the required parameter `timestamp` when calling `account_post_employee_location`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'latitude' in params:
            form_params.append(('Latitude', params['latitude']))  # noqa: E501
        if 'longitude' in params:
            form_params.append(('Longitude', params['longitude']))  # noqa: E501
        if 'accuracy' in params:
            form_params.append(('Accuracy', params['accuracy']))  # noqa: E501
        if 'altitude' in params:
            form_params.append(('Altitude', params['altitude']))  # noqa: E501
        if 'altitude_accuracy' in params:
            form_params.append(('AltitudeAccuracy', params['altitude_accuracy']))  # noqa: E501
        if 'heading' in params:
            form_params.append(('Heading', params['heading']))  # noqa: E501
        if 'speed' in params:
            form_params.append(('Speed', params['speed']))  # noqa: E501
        if 'timestamp' in params:
            form_params.append(('Timestamp', params['timestamp']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/user/location', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
