# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderItemTasksApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_item_tasks_create_work_item_task(self, body, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_create_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_create_work_item_task(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrderItemTasksFromServiceOrderItemTaskCreateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_tasks_create_work_item_task_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_tasks_create_work_item_task_with_http_info(body, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_tasks_create_work_item_task_with_http_info(self, body, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_create_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_create_work_item_task_with_http_info(body, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrderItemTasksFromServiceOrderItemTaskCreateModel body: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_tasks_create_work_item_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_item_id' in params:
            form_params.append(('ServiceOrderItemId', params['service_order_item_id']))  # noqa: E501
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_description' in params:
            form_params.append(('TaskDescription', params['task_description']))  # noqa: E501
        if 'as_found_details' in params:
            form_params.append(('AsFoundDetails', params['as_found_details']))  # noqa: E501
        if 'as_left_details' in params:
            form_params.append(('AsLeftDetails', params['as_left_details']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_tasks_create_work_item_task(self, service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_create_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_create_work_item_task(service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :param str task_name: (required)
        :param str task_description: (required)
        :param str as_found_details: (required)
        :param str as_left_details: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_tasks_create_work_item_task_with_http_info(service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_tasks_create_work_item_task_with_http_info(service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_tasks_create_work_item_task_with_http_info(self, service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_create_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_create_work_item_task_with_http_info(service_order_item_id, task_name, task_description, as_found_details, as_left_details, work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_id: (required)
        :param str task_name: (required)
        :param str task_description: (required)
        :param str as_found_details: (required)
        :param str as_left_details: (required)
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_id', 'task_name', 'task_description', 'as_found_details', 'as_left_details', 'work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_tasks_create_work_item_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_id' is set
        if ('service_order_item_id' not in params or
                params['service_order_item_id'] is None):
            raise ValueError("Missing the required parameter `service_order_item_id` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'task_name' is set
        if ('task_name' not in params or
                params['task_name'] is None):
            raise ValueError("Missing the required parameter `task_name` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'task_description' is set
        if ('task_description' not in params or
                params['task_description'] is None):
            raise ValueError("Missing the required parameter `task_description` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'as_found_details' is set
        if ('as_found_details' not in params or
                params['as_found_details'] is None):
            raise ValueError("Missing the required parameter `as_found_details` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'as_left_details' is set
        if ('as_left_details' not in params or
                params['as_left_details'] is None):
            raise ValueError("Missing the required parameter `as_left_details` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_tasks_create_work_item_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_item_id' in params:
            form_params.append(('ServiceOrderItemId', params['service_order_item_id']))  # noqa: E501
        if 'task_name' in params:
            form_params.append(('TaskName', params['task_name']))  # noqa: E501
        if 'task_description' in params:
            form_params.append(('TaskDescription', params['task_description']))  # noqa: E501
        if 'as_found_details' in params:
            form_params.append(('AsFoundDetails', params['as_found_details']))  # noqa: E501
        if 'as_left_details' in params:
            form_params.append(('AsLeftDetails', params['as_left_details']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/tasks', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_tasks_delete_work_item_task(self, work_item_id, task_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_delete_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_delete_work_item_task(work_item_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param int task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_tasks_delete_work_item_task_with_http_info(work_item_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_tasks_delete_work_item_task_with_http_info(work_item_id, task_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_tasks_delete_work_item_task_with_http_info(self, work_item_id, task_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_delete_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_delete_work_item_task_with_http_info(work_item_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param int task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_tasks_delete_work_item_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_tasks_delete_work_item_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `service_order_item_tasks_delete_work_item_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/tasks/{taskId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_tasks_get_work_item_task(self, work_item_id, task_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_get_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_get_work_item_task(work_item_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param int task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_tasks_get_work_item_task_with_http_info(work_item_id, task_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_tasks_get_work_item_task_with_http_info(work_item_id, task_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_tasks_get_work_item_task_with_http_info(self, work_item_id, task_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_get_work_item_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_get_work_item_task_with_http_info(work_item_id, task_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param int task_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id', 'task_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_tasks_get_work_item_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_tasks_get_work_item_task`")  # noqa: E501
        # verify the required parameter 'task_id' is set
        if ('task_id' not in params or
                params['task_id'] is None):
            raise ValueError("Missing the required parameter `task_id` when calling `service_order_item_tasks_get_work_item_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501
        if 'task_id' in params:
            path_params['taskId'] = params['task_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/tasks/{taskId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_item_tasks_get_work_item_tasks(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_get_work_item_tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_get_work_item_tasks(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_item_tasks_get_work_item_tasks_with_http_info(work_item_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_item_tasks_get_work_item_tasks_with_http_info(work_item_id, **kwargs)  # noqa: E501
            return data

    def service_order_item_tasks_get_work_item_tasks_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """service_order_item_tasks_get_work_item_tasks  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_item_tasks_get_work_item_tasks_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['work_item_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_item_tasks_get_work_item_tasks" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'work_item_id' is set
        if ('work_item_id' not in params or
                params['work_item_id'] is None):
            raise ValueError("Missing the required parameter `work_item_id` when calling `service_order_item_tasks_get_work_item_tasks`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'work_item_id' in params:
            path_params['workItemId'] = params['work_item_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workitems/{workItemId}/tasks', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
