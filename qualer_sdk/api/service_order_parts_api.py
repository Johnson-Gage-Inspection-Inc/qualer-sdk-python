# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderPartsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_parts_create_work_order_parts(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_create_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_create_work_order_parts(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsServiceOrdersFromServiceOrderPartRepairCreateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_create_work_order_parts_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_create_work_order_parts_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_create_work_order_parts_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_create_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_create_work_order_parts_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsServiceOrdersFromServiceOrderPartRepairCreateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_create_work_order_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501
        if 'charge_date' in params:
            form_params.append(('ChargeDate', params['charge_date']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'unit_name' in params:
            form_params.append(('UnitName', params['unit_name']))  # noqa: E501
        if 'is_hourly_pricing' in params:
            form_params.append(('IsHourlyPricing', params['is_hourly_pricing']))  # noqa: E501
        if 'time_spent_in_minutes' in params:
            form_params.append(('TimeSpentInMinutes', params['time_spent_in_minutes']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('Quantity', params['quantity']))  # noqa: E501
        if 'discount' in params:
            form_params.append(('Discount', params['discount']))  # noqa: E501
        if 'is_taxable' in params:
            form_params.append(('IsTaxable', params['is_taxable']))  # noqa: E501
        if 'delivery_charge' in params:
            form_params.append(('DeliveryCharge', params['delivery_charge']))  # noqa: E501
        if 'free_quantity' in params:
            form_params.append(('FreeQuantity', params['free_quantity']))  # noqa: E501
        if 'created_by_id' in params:
            form_params.append(('CreatedById', params['created_by_id']))  # noqa: E501
        if 'service_order_charge_type' in params:
            form_params.append(('ServiceOrderChargeType', params['service_order_charge_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_parts_create_work_order_parts(self, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_create_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_create_work_order_parts(name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param datetime charge_date: (required)
        :param float price: (required)
        :param str unit_name: (required)
        :param bool is_hourly_pricing: (required)
        :param float time_spent_in_minutes: (required)
        :param float quantity: (required)
        :param float discount: (required)
        :param bool is_taxable: (required)
        :param float delivery_charge: (required)
        :param int free_quantity: (required)
        :param int created_by_id: (required)
        :param str service_order_charge_type: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_create_work_order_parts_with_http_info(name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_create_work_order_parts_with_http_info(name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_create_work_order_parts_with_http_info(self, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_create_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_create_work_order_parts_with_http_info(name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str name: (required)
        :param str description: (required)
        :param datetime charge_date: (required)
        :param float price: (required)
        :param str unit_name: (required)
        :param bool is_hourly_pricing: (required)
        :param float time_spent_in_minutes: (required)
        :param float quantity: (required)
        :param float discount: (required)
        :param bool is_taxable: (required)
        :param float delivery_charge: (required)
        :param int free_quantity: (required)
        :param int created_by_id: (required)
        :param str service_order_charge_type: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['name', 'description', 'charge_date', 'price', 'unit_name', 'is_hourly_pricing', 'time_spent_in_minutes', 'quantity', 'discount', 'is_taxable', 'delivery_charge', 'free_quantity', 'created_by_id', 'service_order_charge_type', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_create_work_order_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'charge_date' is set
        if ('charge_date' not in params or
                params['charge_date'] is None):
            raise ValueError("Missing the required parameter `charge_date` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'unit_name' is set
        if ('unit_name' not in params or
                params['unit_name'] is None):
            raise ValueError("Missing the required parameter `unit_name` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'is_hourly_pricing' is set
        if ('is_hourly_pricing' not in params or
                params['is_hourly_pricing'] is None):
            raise ValueError("Missing the required parameter `is_hourly_pricing` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'time_spent_in_minutes' is set
        if ('time_spent_in_minutes' not in params or
                params['time_spent_in_minutes'] is None):
            raise ValueError("Missing the required parameter `time_spent_in_minutes` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'discount' is set
        if ('discount' not in params or
                params['discount'] is None):
            raise ValueError("Missing the required parameter `discount` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'is_taxable' is set
        if ('is_taxable' not in params or
                params['is_taxable'] is None):
            raise ValueError("Missing the required parameter `is_taxable` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'delivery_charge' is set
        if ('delivery_charge' not in params or
                params['delivery_charge'] is None):
            raise ValueError("Missing the required parameter `delivery_charge` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'free_quantity' is set
        if ('free_quantity' not in params or
                params['free_quantity'] is None):
            raise ValueError("Missing the required parameter `free_quantity` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'created_by_id' is set
        if ('created_by_id' not in params or
                params['created_by_id'] is None):
            raise ValueError("Missing the required parameter `created_by_id` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_charge_type' is set
        if ('service_order_charge_type' not in params or
                params['service_order_charge_type'] is None):
            raise ValueError("Missing the required parameter `service_order_charge_type` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_create_work_order_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501
        if 'charge_date' in params:
            form_params.append(('ChargeDate', params['charge_date']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'unit_name' in params:
            form_params.append(('UnitName', params['unit_name']))  # noqa: E501
        if 'is_hourly_pricing' in params:
            form_params.append(('IsHourlyPricing', params['is_hourly_pricing']))  # noqa: E501
        if 'time_spent_in_minutes' in params:
            form_params.append(('TimeSpentInMinutes', params['time_spent_in_minutes']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('Quantity', params['quantity']))  # noqa: E501
        if 'discount' in params:
            form_params.append(('Discount', params['discount']))  # noqa: E501
        if 'is_taxable' in params:
            form_params.append(('IsTaxable', params['is_taxable']))  # noqa: E501
        if 'delivery_charge' in params:
            form_params.append(('DeliveryCharge', params['delivery_charge']))  # noqa: E501
        if 'free_quantity' in params:
            form_params.append(('FreeQuantity', params['free_quantity']))  # noqa: E501
        if 'created_by_id' in params:
            form_params.append(('CreatedById', params['created_by_id']))  # noqa: E501
        if 'service_order_charge_type' in params:
            form_params.append(('ServiceOrderChargeType', params['service_order_charge_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_parts_delete_work_order_task(self, service_order_id, service_order_item_part_id, **kwargs):  # noqa: E501
        """service_order_parts_delete_work_order_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_delete_work_order_task(service_order_id, service_order_item_part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param int service_order_item_part_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_delete_work_order_task_with_http_info(service_order_id, service_order_item_part_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_delete_work_order_task_with_http_info(service_order_id, service_order_item_part_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_delete_work_order_task_with_http_info(self, service_order_id, service_order_item_part_id, **kwargs):  # noqa: E501
        """service_order_parts_delete_work_order_task  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_delete_work_order_task_with_http_info(service_order_id, service_order_item_part_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param int service_order_item_part_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'service_order_item_part_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_delete_work_order_task" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_delete_work_order_task`")  # noqa: E501
        # verify the required parameter 'service_order_item_part_id' is set
        if ('service_order_item_part_id' not in params or
                params['service_order_item_part_id'] is None):
            raise ValueError("Missing the required parameter `service_order_item_part_id` when calling `service_order_parts_delete_work_order_task`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501
        if 'service_order_item_part_id' in params:
            path_params['serviceOrderItemPartId'] = params['service_order_item_part_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts/{serviceOrderItemPartId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_parts_get_work_order_parts(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_get_work_order_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_get_work_order_parts(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_get_work_order_parts_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_get_work_order_parts_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_get_work_order_parts_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_get_work_order_parts  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_get_work_order_parts_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_get_work_order_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_get_work_order_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_parts_update_work_order_parts(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_update_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_update_work_order_parts(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsServiceOrdersFromServiceOrderPartRepairUpdateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_update_work_order_parts_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_update_work_order_parts_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_update_work_order_parts_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_update_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_update_work_order_parts_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsServiceOrdersFromServiceOrderPartRepairUpdateModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_update_work_order_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_item_part_id' in params:
            form_params.append(('ServiceOrderItemPartId', params['service_order_item_part_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501
        if 'charge_date' in params:
            form_params.append(('ChargeDate', params['charge_date']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'unit_name' in params:
            form_params.append(('UnitName', params['unit_name']))  # noqa: E501
        if 'is_hourly_pricing' in params:
            form_params.append(('IsHourlyPricing', params['is_hourly_pricing']))  # noqa: E501
        if 'time_spent_in_minutes' in params:
            form_params.append(('TimeSpentInMinutes', params['time_spent_in_minutes']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('Quantity', params['quantity']))  # noqa: E501
        if 'discount' in params:
            form_params.append(('Discount', params['discount']))  # noqa: E501
        if 'is_taxable' in params:
            form_params.append(('IsTaxable', params['is_taxable']))  # noqa: E501
        if 'delivery_charge' in params:
            form_params.append(('DeliveryCharge', params['delivery_charge']))  # noqa: E501
        if 'free_quantity' in params:
            form_params.append(('FreeQuantity', params['free_quantity']))  # noqa: E501
        if 'created_by_id' in params:
            form_params.append(('CreatedById', params['created_by_id']))  # noqa: E501
        if 'service_order_charge_type' in params:
            form_params.append(('ServiceOrderChargeType', params['service_order_charge_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_parts_update_work_order_parts(self, service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_update_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_update_work_order_parts(service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_part_id: (required)
        :param str name: (required)
        :param str description: (required)
        :param datetime charge_date: (required)
        :param float price: (required)
        :param str unit_name: (required)
        :param bool is_hourly_pricing: (required)
        :param float time_spent_in_minutes: (required)
        :param float quantity: (required)
        :param float discount: (required)
        :param bool is_taxable: (required)
        :param float delivery_charge: (required)
        :param int free_quantity: (required)
        :param int created_by_id: (required)
        :param str service_order_charge_type: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_parts_update_work_order_parts_with_http_info(service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_parts_update_work_order_parts_with_http_info(service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_parts_update_work_order_parts_with_http_info(self, service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, **kwargs):  # noqa: E501
        """service_order_parts_update_work_order_parts  # noqa: E501

        ServiceOrderChargeType: Part, Labor, Charge  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_parts_update_work_order_parts_with_http_info(service_order_item_part_id, name, description, charge_date, price, unit_name, is_hourly_pricing, time_spent_in_minutes, quantity, discount, is_taxable, delivery_charge, free_quantity, created_by_id, service_order_charge_type, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_item_part_id: (required)
        :param str name: (required)
        :param str description: (required)
        :param datetime charge_date: (required)
        :param float price: (required)
        :param str unit_name: (required)
        :param bool is_hourly_pricing: (required)
        :param float time_spent_in_minutes: (required)
        :param float quantity: (required)
        :param float discount: (required)
        :param bool is_taxable: (required)
        :param float delivery_charge: (required)
        :param int free_quantity: (required)
        :param int created_by_id: (required)
        :param str service_order_charge_type: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_item_part_id', 'name', 'description', 'charge_date', 'price', 'unit_name', 'is_hourly_pricing', 'time_spent_in_minutes', 'quantity', 'discount', 'is_taxable', 'delivery_charge', 'free_quantity', 'created_by_id', 'service_order_charge_type', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_parts_update_work_order_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_item_part_id' is set
        if ('service_order_item_part_id' not in params or
                params['service_order_item_part_id'] is None):
            raise ValueError("Missing the required parameter `service_order_item_part_id` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'name' is set
        if ('name' not in params or
                params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'description' is set
        if ('description' not in params or
                params['description'] is None):
            raise ValueError("Missing the required parameter `description` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'charge_date' is set
        if ('charge_date' not in params or
                params['charge_date'] is None):
            raise ValueError("Missing the required parameter `charge_date` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'price' is set
        if ('price' not in params or
                params['price'] is None):
            raise ValueError("Missing the required parameter `price` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'unit_name' is set
        if ('unit_name' not in params or
                params['unit_name'] is None):
            raise ValueError("Missing the required parameter `unit_name` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'is_hourly_pricing' is set
        if ('is_hourly_pricing' not in params or
                params['is_hourly_pricing'] is None):
            raise ValueError("Missing the required parameter `is_hourly_pricing` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'time_spent_in_minutes' is set
        if ('time_spent_in_minutes' not in params or
                params['time_spent_in_minutes'] is None):
            raise ValueError("Missing the required parameter `time_spent_in_minutes` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'quantity' is set
        if ('quantity' not in params or
                params['quantity'] is None):
            raise ValueError("Missing the required parameter `quantity` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'discount' is set
        if ('discount' not in params or
                params['discount'] is None):
            raise ValueError("Missing the required parameter `discount` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'is_taxable' is set
        if ('is_taxable' not in params or
                params['is_taxable'] is None):
            raise ValueError("Missing the required parameter `is_taxable` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'delivery_charge' is set
        if ('delivery_charge' not in params or
                params['delivery_charge'] is None):
            raise ValueError("Missing the required parameter `delivery_charge` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'free_quantity' is set
        if ('free_quantity' not in params or
                params['free_quantity'] is None):
            raise ValueError("Missing the required parameter `free_quantity` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'created_by_id' is set
        if ('created_by_id' not in params or
                params['created_by_id'] is None):
            raise ValueError("Missing the required parameter `created_by_id` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_charge_type' is set
        if ('service_order_charge_type' not in params or
                params['service_order_charge_type'] is None):
            raise ValueError("Missing the required parameter `service_order_charge_type` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_parts_update_work_order_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'service_order_item_part_id' in params:
            form_params.append(('ServiceOrderItemPartId', params['service_order_item_part_id']))  # noqa: E501
        if 'name' in params:
            form_params.append(('Name', params['name']))  # noqa: E501
        if 'description' in params:
            form_params.append(('Description', params['description']))  # noqa: E501
        if 'charge_date' in params:
            form_params.append(('ChargeDate', params['charge_date']))  # noqa: E501
        if 'price' in params:
            form_params.append(('Price', params['price']))  # noqa: E501
        if 'unit_name' in params:
            form_params.append(('UnitName', params['unit_name']))  # noqa: E501
        if 'is_hourly_pricing' in params:
            form_params.append(('IsHourlyPricing', params['is_hourly_pricing']))  # noqa: E501
        if 'time_spent_in_minutes' in params:
            form_params.append(('TimeSpentInMinutes', params['time_spent_in_minutes']))  # noqa: E501
        if 'quantity' in params:
            form_params.append(('Quantity', params['quantity']))  # noqa: E501
        if 'discount' in params:
            form_params.append(('Discount', params['discount']))  # noqa: E501
        if 'is_taxable' in params:
            form_params.append(('IsTaxable', params['is_taxable']))  # noqa: E501
        if 'delivery_charge' in params:
            form_params.append(('DeliveryCharge', params['delivery_charge']))  # noqa: E501
        if 'free_quantity' in params:
            form_params.append(('FreeQuantity', params['free_quantity']))  # noqa: E501
        if 'created_by_id' in params:
            form_params.append(('CreatedById', params['created_by_id']))  # noqa: E501
        if 'service_order_charge_type' in params:
            form_params.append(('ServiceOrderChargeType', params['service_order_charge_type']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/parts', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
