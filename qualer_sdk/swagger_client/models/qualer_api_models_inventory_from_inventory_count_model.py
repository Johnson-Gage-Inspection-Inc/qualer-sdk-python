# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsInventoryFromInventoryCountModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'product_id': 'int',
        'manufacturer': 'str',
        'part_number': 'str',
        'is_stock_item': 'bool',
        'quantity_on_hand': 'int'
    }

    attribute_map = {
        'product_id': 'ProductId',
        'manufacturer': 'Manufacturer',
        'part_number': 'PartNumber',
        'is_stock_item': 'IsStockItem',
        'quantity_on_hand': 'QuantityOnHand'
    }

    def __init__(self, product_id=None, manufacturer=None, part_number=None, is_stock_item=None, quantity_on_hand=None, _configuration=None):  # noqa: E501
        """QualerApiModelsInventoryFromInventoryCountModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._product_id = None
        self._manufacturer = None
        self._part_number = None
        self._is_stock_item = None
        self._quantity_on_hand = None
        self.discriminator = None

        if product_id is not None:
            self.product_id = product_id
        if manufacturer is not None:
            self.manufacturer = manufacturer
        if part_number is not None:
            self.part_number = part_number
        if is_stock_item is not None:
            self.is_stock_item = is_stock_item
        if quantity_on_hand is not None:
            self.quantity_on_hand = quantity_on_hand

    @property
    def product_id(self):
        """Gets the product_id of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501


        :return: The product_id of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :rtype: int
        """
        return self._product_id

    @product_id.setter
    def product_id(self, product_id):
        """Sets the product_id of this QualerApiModelsInventoryFromInventoryCountModel.


        :param product_id: The product_id of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :type: int
        """

        self._product_id = product_id

    @property
    def manufacturer(self):
        """Gets the manufacturer of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501


        :return: The manufacturer of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :rtype: str
        """
        return self._manufacturer

    @manufacturer.setter
    def manufacturer(self, manufacturer):
        """Sets the manufacturer of this QualerApiModelsInventoryFromInventoryCountModel.


        :param manufacturer: The manufacturer of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :type: str
        """

        self._manufacturer = manufacturer

    @property
    def part_number(self):
        """Gets the part_number of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501


        :return: The part_number of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this QualerApiModelsInventoryFromInventoryCountModel.


        :param part_number: The part_number of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def is_stock_item(self):
        """Gets the is_stock_item of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501


        :return: The is_stock_item of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_stock_item

    @is_stock_item.setter
    def is_stock_item(self, is_stock_item):
        """Sets the is_stock_item of this QualerApiModelsInventoryFromInventoryCountModel.


        :param is_stock_item: The is_stock_item of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :type: bool
        """

        self._is_stock_item = is_stock_item

    @property
    def quantity_on_hand(self):
        """Gets the quantity_on_hand of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501


        :return: The quantity_on_hand of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :rtype: int
        """
        return self._quantity_on_hand

    @quantity_on_hand.setter
    def quantity_on_hand(self, quantity_on_hand):
        """Sets the quantity_on_hand of this QualerApiModelsInventoryFromInventoryCountModel.


        :param quantity_on_hand: The quantity_on_hand of this QualerApiModelsInventoryFromInventoryCountModel.  # noqa: E501
        :type: int
        """

        self._quantity_on_hand = quantity_on_hand

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsInventoryFromInventoryCountModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsInventoryFromInventoryCountModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsInventoryFromInventoryCountModel):
            return True

        return self.to_dict() != other.to_dict()
