# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_order_item_id': 'int',
        'measurement_point_id': 'int',
        'batch_type': 'str',
        'column_index': 'int',
        'mean': 'str',
        'mean_result': 'bool',
        'sd': 'str',
        'sd_result': 'bool',
        'cv': 'str',
        'cv_result': 'bool',
        'range': 'str',
        'range_result': 'bool',
        'delta': 'str',
        'delta_result': 'bool',
        'result': 'str'
    }

    attribute_map = {
        'service_order_item_id': 'ServiceOrderItemId',
        'measurement_point_id': 'MeasurementPointId',
        'batch_type': 'BatchType',
        'column_index': 'ColumnIndex',
        'mean': 'Mean',
        'mean_result': 'MeanResult',
        'sd': 'SD',
        'sd_result': 'SDResult',
        'cv': 'CV',
        'cv_result': 'CVResult',
        'range': 'Range',
        'range_result': 'RangeResult',
        'delta': 'Delta',
        'delta_result': 'DeltaResult',
        'result': 'Result'
    }

    def __init__(self, service_order_item_id=None, measurement_point_id=None, batch_type=None, column_index=None, mean=None, mean_result=None, sd=None, sd_result=None, cv=None, cv_result=None, range=None, range_result=None, delta=None, delta_result=None, result=None, _configuration=None):  # noqa: E501
        """QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_order_item_id = None
        self._measurement_point_id = None
        self._batch_type = None
        self._column_index = None
        self._mean = None
        self._mean_result = None
        self._sd = None
        self._sd_result = None
        self._cv = None
        self._cv_result = None
        self._range = None
        self._range_result = None
        self._delta = None
        self._delta_result = None
        self._result = None
        self.discriminator = None

        if service_order_item_id is not None:
            self.service_order_item_id = service_order_item_id
        if measurement_point_id is not None:
            self.measurement_point_id = measurement_point_id
        if batch_type is not None:
            self.batch_type = batch_type
        if column_index is not None:
            self.column_index = column_index
        if mean is not None:
            self.mean = mean
        if mean_result is not None:
            self.mean_result = mean_result
        if sd is not None:
            self.sd = sd
        if sd_result is not None:
            self.sd_result = sd_result
        if cv is not None:
            self.cv = cv
        if cv_result is not None:
            self.cv_result = cv_result
        if range is not None:
            self.range = range
        if range_result is not None:
            self.range_result = range_result
        if delta is not None:
            self.delta = delta
        if delta_result is not None:
            self.delta_result = delta_result
        if result is not None:
            self.result = result

    @property
    def service_order_item_id(self):
        """Gets the service_order_item_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The service_order_item_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: int
        """
        return self._service_order_item_id

    @service_order_item_id.setter
    def service_order_item_id(self, service_order_item_id):
        """Sets the service_order_item_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param service_order_item_id: The service_order_item_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: int
        """

        self._service_order_item_id = service_order_item_id

    @property
    def measurement_point_id(self):
        """Gets the measurement_point_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The measurement_point_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: int
        """
        return self._measurement_point_id

    @measurement_point_id.setter
    def measurement_point_id(self, measurement_point_id):
        """Sets the measurement_point_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param measurement_point_id: The measurement_point_id of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: int
        """

        self._measurement_point_id = measurement_point_id

    @property
    def batch_type(self):
        """Gets the batch_type of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The batch_type of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._batch_type

    @batch_type.setter
    def batch_type(self, batch_type):
        """Sets the batch_type of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param batch_type: The batch_type of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["Unset", "AsFound", "AsLeft"]  # noqa: E501
        if (self._configuration.client_side_validation and
                batch_type not in allowed_values):
            raise ValueError(
                "Invalid value for `batch_type` ({0}), must be one of {1}"  # noqa: E501
                .format(batch_type, allowed_values)
            )

        self._batch_type = batch_type

    @property
    def column_index(self):
        """Gets the column_index of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The column_index of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: int
        """
        return self._column_index

    @column_index.setter
    def column_index(self, column_index):
        """Sets the column_index of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param column_index: The column_index of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: int
        """

        self._column_index = column_index

    @property
    def mean(self):
        """Gets the mean of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The mean of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._mean

    @mean.setter
    def mean(self, mean):
        """Sets the mean of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param mean: The mean of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """

        self._mean = mean

    @property
    def mean_result(self):
        """Gets the mean_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The mean_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._mean_result

    @mean_result.setter
    def mean_result(self, mean_result):
        """Sets the mean_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param mean_result: The mean_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: bool
        """

        self._mean_result = mean_result

    @property
    def sd(self):
        """Gets the sd of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The sd of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._sd

    @sd.setter
    def sd(self, sd):
        """Sets the sd of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param sd: The sd of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """

        self._sd = sd

    @property
    def sd_result(self):
        """Gets the sd_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The sd_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._sd_result

    @sd_result.setter
    def sd_result(self, sd_result):
        """Sets the sd_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param sd_result: The sd_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: bool
        """

        self._sd_result = sd_result

    @property
    def cv(self):
        """Gets the cv of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The cv of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._cv

    @cv.setter
    def cv(self, cv):
        """Sets the cv of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param cv: The cv of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """

        self._cv = cv

    @property
    def cv_result(self):
        """Gets the cv_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The cv_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._cv_result

    @cv_result.setter
    def cv_result(self, cv_result):
        """Sets the cv_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param cv_result: The cv_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: bool
        """

        self._cv_result = cv_result

    @property
    def range(self):
        """Gets the range of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The range of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._range

    @range.setter
    def range(self, range):
        """Sets the range of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param range: The range of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """

        self._range = range

    @property
    def range_result(self):
        """Gets the range_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The range_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._range_result

    @range_result.setter
    def range_result(self, range_result):
        """Sets the range_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param range_result: The range_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: bool
        """

        self._range_result = range_result

    @property
    def delta(self):
        """Gets the delta of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The delta of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._delta

    @delta.setter
    def delta(self, delta):
        """Sets the delta of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param delta: The delta of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """

        self._delta = delta

    @property
    def delta_result(self):
        """Gets the delta_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The delta_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: bool
        """
        return self._delta_result

    @delta_result.setter
    def delta_result(self, delta_result):
        """Sets the delta_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param delta_result: The delta_result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: bool
        """

        self._delta_result = delta_result

    @property
    def result(self):
        """Gets the result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501


        :return: The result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.


        :param result: The result of this QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotServiced", "Fail", "FailAmbiguous", "FailSignificant", "Pass", "PassAmbiguous", "PassAdjustment", "Done", "Pending"]  # noqa: E501
        if (self._configuration.client_side_validation and
                result not in allowed_values):
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse):
            return True

        return self.to_dict() != other.to_dict()
