# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsClientsFromClientAssetQuery(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'equipment_id': 'str',
        'serial_number': 'str',
        'asset_tag': 'str',
        'barcode': 'str',
        'legacy_id': 'str'
    }

    attribute_map = {
        'equipment_id': 'EquipmentId',
        'serial_number': 'SerialNumber',
        'asset_tag': 'AssetTag',
        'barcode': 'Barcode',
        'legacy_id': 'LegacyId'
    }

    def __init__(self, equipment_id=None, serial_number=None, asset_tag=None, barcode=None, legacy_id=None, _configuration=None):  # noqa: E501
        """QualerApiModelsClientsFromClientAssetQuery - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._equipment_id = None
        self._serial_number = None
        self._asset_tag = None
        self._barcode = None
        self._legacy_id = None
        self.discriminator = None

        if equipment_id is not None:
            self.equipment_id = equipment_id
        if serial_number is not None:
            self.serial_number = serial_number
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if barcode is not None:
            self.barcode = barcode
        if legacy_id is not None:
            self.legacy_id = legacy_id

    @property
    def equipment_id(self):
        """Gets the equipment_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501


        :return: The equipment_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :rtype: str
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this QualerApiModelsClientsFromClientAssetQuery.


        :param equipment_id: The equipment_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :type: str
        """

        self._equipment_id = equipment_id

    @property
    def serial_number(self):
        """Gets the serial_number of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501


        :return: The serial_number of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this QualerApiModelsClientsFromClientAssetQuery.


        :param serial_number: The serial_number of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def asset_tag(self):
        """Gets the asset_tag of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501


        :return: The asset_tag of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this QualerApiModelsClientsFromClientAssetQuery.


        :param asset_tag: The asset_tag of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def barcode(self):
        """Gets the barcode of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501


        :return: The barcode of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :rtype: str
        """
        return self._barcode

    @barcode.setter
    def barcode(self, barcode):
        """Sets the barcode of this QualerApiModelsClientsFromClientAssetQuery.


        :param barcode: The barcode of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :type: str
        """

        self._barcode = barcode

    @property
    def legacy_id(self):
        """Gets the legacy_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501


        :return: The legacy_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :rtype: str
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this QualerApiModelsClientsFromClientAssetQuery.


        :param legacy_id: The legacy_id of this QualerApiModelsClientsFromClientAssetQuery.  # noqa: E501
        :type: str
        """

        self._legacy_id = legacy_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsClientsFromClientAssetQuery, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsClientsFromClientAssetQuery):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsClientsFromClientAssetQuery):
            return True

        return self.to_dict() != other.to_dict()
