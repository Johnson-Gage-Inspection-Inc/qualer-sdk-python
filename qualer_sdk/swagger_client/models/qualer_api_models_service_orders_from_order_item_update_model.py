# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsServiceOrdersFromOrderItemUpdateModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'service_comments': 'str',
        'private_comments': 'str',
        'service_notes': 'str',
        'service_total': 'float',
        'repairs_total': 'float',
        'parts_total': 'float',
        'work_status': 'str',
        'custom_work_status': 'str',
        'is_limited': 'bool',
        'checked_on': 'datetime',
        'checked_by_name': 'str',
        'completed_on': 'datetime',
        'completed_by_name': 'str',
        'as_found_check': 'str',
        'as_left_check': 'str',
        'result_status': 'str',
        'as_found_result': 'str',
        'as_left_result': 'str',
        'equipment_id': 'str',
        'legacy_id': 'str',
        'serial_number': 'str',
        'serial_number_change': 'str',
        'asset_tag': 'str',
        'asset_tag_change': 'str',
        'asset_user': 'str',
        'asset_user_change': 'str',
        'provider_technician': 'str',
        'provider_phone': 'str',
        'provider_company': 'str',
        'certificate_number': 'str',
        'service_date': 'datetime',
        'next_service_date': 'datetime',
        'vendor_tag': 'str'
    }

    attribute_map = {
        'service_comments': 'ServiceComments',
        'private_comments': 'PrivateComments',
        'service_notes': 'ServiceNotes',
        'service_total': 'ServiceTotal',
        'repairs_total': 'RepairsTotal',
        'parts_total': 'PartsTotal',
        'work_status': 'WorkStatus',
        'custom_work_status': 'CustomWorkStatus',
        'is_limited': 'IsLimited',
        'checked_on': 'CheckedOn',
        'checked_by_name': 'CheckedByName',
        'completed_on': 'CompletedOn',
        'completed_by_name': 'CompletedByName',
        'as_found_check': 'AsFoundCheck',
        'as_left_check': 'AsLeftCheck',
        'result_status': 'ResultStatus',
        'as_found_result': 'AsFoundResult',
        'as_left_result': 'AsLeftResult',
        'equipment_id': 'EquipmentId',
        'legacy_id': 'LegacyId',
        'serial_number': 'SerialNumber',
        'serial_number_change': 'SerialNumberChange',
        'asset_tag': 'AssetTag',
        'asset_tag_change': 'AssetTagChange',
        'asset_user': 'AssetUser',
        'asset_user_change': 'AssetUserChange',
        'provider_technician': 'ProviderTechnician',
        'provider_phone': 'ProviderPhone',
        'provider_company': 'ProviderCompany',
        'certificate_number': 'CertificateNumber',
        'service_date': 'ServiceDate',
        'next_service_date': 'NextServiceDate',
        'vendor_tag': 'VendorTag'
    }

    def __init__(self, service_comments=None, private_comments=None, service_notes=None, service_total=None, repairs_total=None, parts_total=None, work_status=None, custom_work_status=None, is_limited=None, checked_on=None, checked_by_name=None, completed_on=None, completed_by_name=None, as_found_check=None, as_left_check=None, result_status=None, as_found_result=None, as_left_result=None, equipment_id=None, legacy_id=None, serial_number=None, serial_number_change=None, asset_tag=None, asset_tag_change=None, asset_user=None, asset_user_change=None, provider_technician=None, provider_phone=None, provider_company=None, certificate_number=None, service_date=None, next_service_date=None, vendor_tag=None, _configuration=None):  # noqa: E501
        """QualerApiModelsServiceOrdersFromOrderItemUpdateModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._service_comments = None
        self._private_comments = None
        self._service_notes = None
        self._service_total = None
        self._repairs_total = None
        self._parts_total = None
        self._work_status = None
        self._custom_work_status = None
        self._is_limited = None
        self._checked_on = None
        self._checked_by_name = None
        self._completed_on = None
        self._completed_by_name = None
        self._as_found_check = None
        self._as_left_check = None
        self._result_status = None
        self._as_found_result = None
        self._as_left_result = None
        self._equipment_id = None
        self._legacy_id = None
        self._serial_number = None
        self._serial_number_change = None
        self._asset_tag = None
        self._asset_tag_change = None
        self._asset_user = None
        self._asset_user_change = None
        self._provider_technician = None
        self._provider_phone = None
        self._provider_company = None
        self._certificate_number = None
        self._service_date = None
        self._next_service_date = None
        self._vendor_tag = None
        self.discriminator = None

        if service_comments is not None:
            self.service_comments = service_comments
        if private_comments is not None:
            self.private_comments = private_comments
        if service_notes is not None:
            self.service_notes = service_notes
        if service_total is not None:
            self.service_total = service_total
        if repairs_total is not None:
            self.repairs_total = repairs_total
        if parts_total is not None:
            self.parts_total = parts_total
        if work_status is not None:
            self.work_status = work_status
        if custom_work_status is not None:
            self.custom_work_status = custom_work_status
        if is_limited is not None:
            self.is_limited = is_limited
        if checked_on is not None:
            self.checked_on = checked_on
        if checked_by_name is not None:
            self.checked_by_name = checked_by_name
        if completed_on is not None:
            self.completed_on = completed_on
        if completed_by_name is not None:
            self.completed_by_name = completed_by_name
        if as_found_check is not None:
            self.as_found_check = as_found_check
        if as_left_check is not None:
            self.as_left_check = as_left_check
        if result_status is not None:
            self.result_status = result_status
        if as_found_result is not None:
            self.as_found_result = as_found_result
        if as_left_result is not None:
            self.as_left_result = as_left_result
        if equipment_id is not None:
            self.equipment_id = equipment_id
        if legacy_id is not None:
            self.legacy_id = legacy_id
        if serial_number is not None:
            self.serial_number = serial_number
        if serial_number_change is not None:
            self.serial_number_change = serial_number_change
        if asset_tag is not None:
            self.asset_tag = asset_tag
        if asset_tag_change is not None:
            self.asset_tag_change = asset_tag_change
        if asset_user is not None:
            self.asset_user = asset_user
        if asset_user_change is not None:
            self.asset_user_change = asset_user_change
        if provider_technician is not None:
            self.provider_technician = provider_technician
        if provider_phone is not None:
            self.provider_phone = provider_phone
        if provider_company is not None:
            self.provider_company = provider_company
        if certificate_number is not None:
            self.certificate_number = certificate_number
        if service_date is not None:
            self.service_date = service_date
        if next_service_date is not None:
            self.next_service_date = next_service_date
        if vendor_tag is not None:
            self.vendor_tag = vendor_tag

    @property
    def service_comments(self):
        """Gets the service_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The service_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._service_comments

    @service_comments.setter
    def service_comments(self, service_comments):
        """Sets the service_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param service_comments: The service_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._service_comments = service_comments

    @property
    def private_comments(self):
        """Gets the private_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The private_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._private_comments

    @private_comments.setter
    def private_comments(self, private_comments):
        """Sets the private_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param private_comments: The private_comments of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._private_comments = private_comments

    @property
    def service_notes(self):
        """Gets the service_notes of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The service_notes of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._service_notes

    @service_notes.setter
    def service_notes(self, service_notes):
        """Sets the service_notes of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param service_notes: The service_notes of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._service_notes = service_notes

    @property
    def service_total(self):
        """Gets the service_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The service_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._service_total

    @service_total.setter
    def service_total(self, service_total):
        """Sets the service_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param service_total: The service_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: float
        """

        self._service_total = service_total

    @property
    def repairs_total(self):
        """Gets the repairs_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The repairs_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._repairs_total

    @repairs_total.setter
    def repairs_total(self, repairs_total):
        """Sets the repairs_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param repairs_total: The repairs_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: float
        """

        self._repairs_total = repairs_total

    @property
    def parts_total(self):
        """Gets the parts_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The parts_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: float
        """
        return self._parts_total

    @parts_total.setter
    def parts_total(self, parts_total):
        """Sets the parts_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param parts_total: The parts_total of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: float
        """

        self._parts_total = parts_total

    @property
    def work_status(self):
        """Gets the work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._work_status

    @work_status.setter
    def work_status(self, work_status):
        """Sets the work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param work_status: The work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Pending", "InProgress", "Completed", "Delayed", "Withdrawn", "Locked", "New", "Closed", "Wait"]  # noqa: E501
        if (self._configuration.client_side_validation and
                work_status not in allowed_values):
            raise ValueError(
                "Invalid value for `work_status` ({0}), must be one of {1}"  # noqa: E501
                .format(work_status, allowed_values)
            )

        self._work_status = work_status

    @property
    def custom_work_status(self):
        """Gets the custom_work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The custom_work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._custom_work_status

    @custom_work_status.setter
    def custom_work_status(self, custom_work_status):
        """Sets the custom_work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param custom_work_status: The custom_work_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._custom_work_status = custom_work_status

    @property
    def is_limited(self):
        """Gets the is_limited of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The is_limited of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_limited

    @is_limited.setter
    def is_limited(self, is_limited):
        """Sets the is_limited of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param is_limited: The is_limited of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: bool
        """

        self._is_limited = is_limited

    @property
    def checked_on(self):
        """Gets the checked_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The checked_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._checked_on

    @checked_on.setter
    def checked_on(self, checked_on):
        """Sets the checked_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param checked_on: The checked_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._checked_on = checked_on

    @property
    def checked_by_name(self):
        """Gets the checked_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The checked_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._checked_by_name

    @checked_by_name.setter
    def checked_by_name(self, checked_by_name):
        """Sets the checked_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param checked_by_name: The checked_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._checked_by_name = checked_by_name

    @property
    def completed_on(self):
        """Gets the completed_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The completed_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._completed_on

    @completed_on.setter
    def completed_on(self, completed_on):
        """Sets the completed_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param completed_on: The completed_on of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._completed_on = completed_on

    @property
    def completed_by_name(self):
        """Gets the completed_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The completed_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._completed_by_name

    @completed_by_name.setter
    def completed_by_name(self, completed_by_name):
        """Sets the completed_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param completed_by_name: The completed_by_name of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._completed_by_name = completed_by_name

    @property
    def as_found_check(self):
        """Gets the as_found_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The as_found_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._as_found_check

    @as_found_check.setter
    def as_found_check(self, as_found_check):
        """Sets the as_found_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param as_found_check: The as_found_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotServiced", "Fail", "Pass"]  # noqa: E501
        if (self._configuration.client_side_validation and
                as_found_check not in allowed_values):
            raise ValueError(
                "Invalid value for `as_found_check` ({0}), must be one of {1}"  # noqa: E501
                .format(as_found_check, allowed_values)
            )

        self._as_found_check = as_found_check

    @property
    def as_left_check(self):
        """Gets the as_left_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The as_left_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._as_left_check

    @as_left_check.setter
    def as_left_check(self, as_left_check):
        """Sets the as_left_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param as_left_check: The as_left_check of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotServiced", "Fail", "Pass"]  # noqa: E501
        if (self._configuration.client_side_validation and
                as_left_check not in allowed_values):
            raise ValueError(
                "Invalid value for `as_left_check` ({0}), must be one of {1}"  # noqa: E501
                .format(as_left_check, allowed_values)
            )

        self._as_left_check = as_left_check

    @property
    def result_status(self):
        """Gets the result_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The result_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._result_status

    @result_status.setter
    def result_status(self, result_status):
        """Sets the result_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param result_status: The result_status of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotAvailable", "Fail", "FailAmbiguous", "FailSignificant", "Pass", "PassAmbiguous", "PassAdjustment", "Done"]  # noqa: E501
        if (self._configuration.client_side_validation and
                result_status not in allowed_values):
            raise ValueError(
                "Invalid value for `result_status` ({0}), must be one of {1}"  # noqa: E501
                .format(result_status, allowed_values)
            )

        self._result_status = result_status

    @property
    def as_found_result(self):
        """Gets the as_found_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The as_found_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._as_found_result

    @as_found_result.setter
    def as_found_result(self, as_found_result):
        """Sets the as_found_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param as_found_result: The as_found_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotAvailable", "Fail", "FailAmbiguous", "FailSignificant", "Pass", "PassAmbiguous", "PassAdjustment", "Done"]  # noqa: E501
        if (self._configuration.client_side_validation and
                as_found_result not in allowed_values):
            raise ValueError(
                "Invalid value for `as_found_result` ({0}), must be one of {1}"  # noqa: E501
                .format(as_found_result, allowed_values)
            )

        self._as_found_result = as_found_result

    @property
    def as_left_result(self):
        """Gets the as_left_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The as_left_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._as_left_result

    @as_left_result.setter
    def as_left_result(self, as_left_result):
        """Sets the as_left_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param as_left_result: The as_left_result of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["NotAvailable", "Fail", "FailAmbiguous", "FailSignificant", "Pass", "PassAmbiguous", "PassAdjustment", "Done"]  # noqa: E501
        if (self._configuration.client_side_validation and
                as_left_result not in allowed_values):
            raise ValueError(
                "Invalid value for `as_left_result` ({0}), must be one of {1}"  # noqa: E501
                .format(as_left_result, allowed_values)
            )

        self._as_left_result = as_left_result

    @property
    def equipment_id(self):
        """Gets the equipment_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The equipment_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._equipment_id

    @equipment_id.setter
    def equipment_id(self, equipment_id):
        """Sets the equipment_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param equipment_id: The equipment_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._equipment_id = equipment_id

    @property
    def legacy_id(self):
        """Gets the legacy_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The legacy_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param legacy_id: The legacy_id of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._legacy_id = legacy_id

    @property
    def serial_number(self):
        """Gets the serial_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The serial_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number

    @serial_number.setter
    def serial_number(self, serial_number):
        """Sets the serial_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param serial_number: The serial_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._serial_number = serial_number

    @property
    def serial_number_change(self):
        """Gets the serial_number_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The serial_number_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._serial_number_change

    @serial_number_change.setter
    def serial_number_change(self, serial_number_change):
        """Sets the serial_number_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param serial_number_change: The serial_number_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._serial_number_change = serial_number_change

    @property
    def asset_tag(self):
        """Gets the asset_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The asset_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag

    @asset_tag.setter
    def asset_tag(self, asset_tag):
        """Sets the asset_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param asset_tag: The asset_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._asset_tag = asset_tag

    @property
    def asset_tag_change(self):
        """Gets the asset_tag_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The asset_tag_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_tag_change

    @asset_tag_change.setter
    def asset_tag_change(self, asset_tag_change):
        """Sets the asset_tag_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param asset_tag_change: The asset_tag_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._asset_tag_change = asset_tag_change

    @property
    def asset_user(self):
        """Gets the asset_user of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The asset_user of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_user

    @asset_user.setter
    def asset_user(self, asset_user):
        """Sets the asset_user of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param asset_user: The asset_user of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._asset_user = asset_user

    @property
    def asset_user_change(self):
        """Gets the asset_user_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The asset_user_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._asset_user_change

    @asset_user_change.setter
    def asset_user_change(self, asset_user_change):
        """Sets the asset_user_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param asset_user_change: The asset_user_change of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._asset_user_change = asset_user_change

    @property
    def provider_technician(self):
        """Gets the provider_technician of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The provider_technician of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._provider_technician

    @provider_technician.setter
    def provider_technician(self, provider_technician):
        """Sets the provider_technician of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param provider_technician: The provider_technician of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._provider_technician = provider_technician

    @property
    def provider_phone(self):
        """Gets the provider_phone of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The provider_phone of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._provider_phone

    @provider_phone.setter
    def provider_phone(self, provider_phone):
        """Sets the provider_phone of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param provider_phone: The provider_phone of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._provider_phone = provider_phone

    @property
    def provider_company(self):
        """Gets the provider_company of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The provider_company of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._provider_company

    @provider_company.setter
    def provider_company(self, provider_company):
        """Sets the provider_company of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param provider_company: The provider_company of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._provider_company = provider_company

    @property
    def certificate_number(self):
        """Gets the certificate_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The certificate_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param certificate_number: The certificate_number of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def service_date(self):
        """Gets the service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._service_date

    @service_date.setter
    def service_date(self, service_date):
        """Sets the service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param service_date: The service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._service_date = service_date

    @property
    def next_service_date(self):
        """Gets the next_service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The next_service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: datetime
        """
        return self._next_service_date

    @next_service_date.setter
    def next_service_date(self, next_service_date):
        """Sets the next_service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param next_service_date: The next_service_date of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: datetime
        """

        self._next_service_date = next_service_date

    @property
    def vendor_tag(self):
        """Gets the vendor_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501


        :return: The vendor_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :rtype: str
        """
        return self._vendor_tag

    @vendor_tag.setter
    def vendor_tag(self, vendor_tag):
        """Sets the vendor_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.


        :param vendor_tag: The vendor_tag of this QualerApiModelsServiceOrdersFromOrderItemUpdateModel.  # noqa: E501
        :type: str
        """

        self._vendor_tag = vendor_tag

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsServiceOrdersFromOrderItemUpdateModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsServiceOrdersFromOrderItemUpdateModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsServiceOrdersFromOrderItemUpdateModel):
            return True

        return self.to_dict() != other.to_dict()
