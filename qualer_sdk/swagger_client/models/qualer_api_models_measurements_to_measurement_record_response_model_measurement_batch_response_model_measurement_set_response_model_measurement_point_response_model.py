# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'specification_name': 'str',
        'measurement_quantity': 'str',
        'unit_of_measure_id': 'int',
        'unit_of_measure': 'str',
        'range_min': 'float',
        'range_max': 'float',
        'tolerance_type': 'str',
        'specification_mode': 'str',
        'tolerance_mode': 'str',
        'tolerance_unit': 'str',
        'precision_type': 'str',
        'readings': 'int',
        'channels_type': 'str',
        'channel_count': 'int',
        'precision': 'float',
        'tolerance_minimum': 'float',
        'tolerance_maximum': 'float',
        'resolution': 'float',
        'resolution_count': 'float',
        'nominal': 'float',
        'expected_value': 'float',
        'base_value': 'float',
        'test_value': 'float',
        'is_accredited': 'bool',
        'measurements': 'list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel]',
        'condition_factors': 'list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel]',
        'primary_measurement_tool': 'QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel',
        'secondary_measurement_tool': 'QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel'
    }

    attribute_map = {
        'specification_name': 'SpecificationName',
        'measurement_quantity': 'MeasurementQuantity',
        'unit_of_measure_id': 'UnitOfMeasureId',
        'unit_of_measure': 'UnitOfMeasure',
        'range_min': 'RangeMin',
        'range_max': 'RangeMax',
        'tolerance_type': 'ToleranceType',
        'specification_mode': 'SpecificationMode',
        'tolerance_mode': 'ToleranceMode',
        'tolerance_unit': 'ToleranceUnit',
        'precision_type': 'PrecisionType',
        'readings': 'Readings',
        'channels_type': 'ChannelsType',
        'channel_count': 'ChannelCount',
        'precision': 'Precision',
        'tolerance_minimum': 'ToleranceMinimum',
        'tolerance_maximum': 'ToleranceMaximum',
        'resolution': 'Resolution',
        'resolution_count': 'ResolutionCount',
        'nominal': 'Nominal',
        'expected_value': 'ExpectedValue',
        'base_value': 'BaseValue',
        'test_value': 'TestValue',
        'is_accredited': 'IsAccredited',
        'measurements': 'Measurements',
        'condition_factors': 'ConditionFactors',
        'primary_measurement_tool': 'PrimaryMeasurementTool',
        'secondary_measurement_tool': 'SecondaryMeasurementTool'
    }

    def __init__(self, specification_name=None, measurement_quantity=None, unit_of_measure_id=None, unit_of_measure=None, range_min=None, range_max=None, tolerance_type=None, specification_mode=None, tolerance_mode=None, tolerance_unit=None, precision_type=None, readings=None, channels_type=None, channel_count=None, precision=None, tolerance_minimum=None, tolerance_maximum=None, resolution=None, resolution_count=None, nominal=None, expected_value=None, base_value=None, test_value=None, is_accredited=None, measurements=None, condition_factors=None, primary_measurement_tool=None, secondary_measurement_tool=None, _configuration=None):  # noqa: E501
        """QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._specification_name = None
        self._measurement_quantity = None
        self._unit_of_measure_id = None
        self._unit_of_measure = None
        self._range_min = None
        self._range_max = None
        self._tolerance_type = None
        self._specification_mode = None
        self._tolerance_mode = None
        self._tolerance_unit = None
        self._precision_type = None
        self._readings = None
        self._channels_type = None
        self._channel_count = None
        self._precision = None
        self._tolerance_minimum = None
        self._tolerance_maximum = None
        self._resolution = None
        self._resolution_count = None
        self._nominal = None
        self._expected_value = None
        self._base_value = None
        self._test_value = None
        self._is_accredited = None
        self._measurements = None
        self._condition_factors = None
        self._primary_measurement_tool = None
        self._secondary_measurement_tool = None
        self.discriminator = None

        if specification_name is not None:
            self.specification_name = specification_name
        if measurement_quantity is not None:
            self.measurement_quantity = measurement_quantity
        if unit_of_measure_id is not None:
            self.unit_of_measure_id = unit_of_measure_id
        if unit_of_measure is not None:
            self.unit_of_measure = unit_of_measure
        if range_min is not None:
            self.range_min = range_min
        if range_max is not None:
            self.range_max = range_max
        if tolerance_type is not None:
            self.tolerance_type = tolerance_type
        if specification_mode is not None:
            self.specification_mode = specification_mode
        if tolerance_mode is not None:
            self.tolerance_mode = tolerance_mode
        if tolerance_unit is not None:
            self.tolerance_unit = tolerance_unit
        if precision_type is not None:
            self.precision_type = precision_type
        if readings is not None:
            self.readings = readings
        if channels_type is not None:
            self.channels_type = channels_type
        if channel_count is not None:
            self.channel_count = channel_count
        if precision is not None:
            self.precision = precision
        if tolerance_minimum is not None:
            self.tolerance_minimum = tolerance_minimum
        if tolerance_maximum is not None:
            self.tolerance_maximum = tolerance_maximum
        if resolution is not None:
            self.resolution = resolution
        if resolution_count is not None:
            self.resolution_count = resolution_count
        if nominal is not None:
            self.nominal = nominal
        if expected_value is not None:
            self.expected_value = expected_value
        if base_value is not None:
            self.base_value = base_value
        if test_value is not None:
            self.test_value = test_value
        if is_accredited is not None:
            self.is_accredited = is_accredited
        if measurements is not None:
            self.measurements = measurements
        if condition_factors is not None:
            self.condition_factors = condition_factors
        if primary_measurement_tool is not None:
            self.primary_measurement_tool = primary_measurement_tool
        if secondary_measurement_tool is not None:
            self.secondary_measurement_tool = secondary_measurement_tool

    @property
    def specification_name(self):
        """Gets the specification_name of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The specification_name of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._specification_name

    @specification_name.setter
    def specification_name(self, specification_name):
        """Sets the specification_name of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param specification_name: The specification_name of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._specification_name = specification_name

    @property
    def measurement_quantity(self):
        """Gets the measurement_quantity of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The measurement_quantity of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._measurement_quantity

    @measurement_quantity.setter
    def measurement_quantity(self, measurement_quantity):
        """Sets the measurement_quantity of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param measurement_quantity: The measurement_quantity of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._measurement_quantity = measurement_quantity

    @property
    def unit_of_measure_id(self):
        """Gets the unit_of_measure_id of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The unit_of_measure_id of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._unit_of_measure_id

    @unit_of_measure_id.setter
    def unit_of_measure_id(self, unit_of_measure_id):
        """Sets the unit_of_measure_id of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param unit_of_measure_id: The unit_of_measure_id of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: int
        """

        self._unit_of_measure_id = unit_of_measure_id

    @property
    def unit_of_measure(self):
        """Gets the unit_of_measure of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The unit_of_measure of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._unit_of_measure

    @unit_of_measure.setter
    def unit_of_measure(self, unit_of_measure):
        """Sets the unit_of_measure of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param unit_of_measure: The unit_of_measure of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._unit_of_measure = unit_of_measure

    @property
    def range_min(self):
        """Gets the range_min of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The range_min of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._range_min

    @range_min.setter
    def range_min(self, range_min):
        """Sets the range_min of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param range_min: The range_min of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._range_min = range_min

    @property
    def range_max(self):
        """Gets the range_max of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The range_max of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._range_max

    @range_max.setter
    def range_max(self, range_max):
        """Sets the range_max of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param range_max: The range_max of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._range_max = range_max

    @property
    def tolerance_type(self):
        """Gets the tolerance_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The tolerance_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_type

    @tolerance_type.setter
    def tolerance_type(self, tolerance_type):
        """Sets the tolerance_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param tolerance_type: The tolerance_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._tolerance_type = tolerance_type

    @property
    def specification_mode(self):
        """Gets the specification_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The specification_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._specification_mode

    @specification_mode.setter
    def specification_mode(self, specification_mode):
        """Sets the specification_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param specification_mode: The specification_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Point", "Range"]  # noqa: E501
        if (self._configuration.client_side_validation and
                specification_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `specification_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(specification_mode, allowed_values)
            )

        self._specification_mode = specification_mode

    @property
    def tolerance_mode(self):
        """Gets the tolerance_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The tolerance_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_mode

    @tolerance_mode.setter
    def tolerance_mode(self, tolerance_mode):
        """Sets the tolerance_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param tolerance_mode: The tolerance_mode of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Symmetric", "Asymmetric", "Range"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tolerance_mode not in allowed_values):
            raise ValueError(
                "Invalid value for `tolerance_mode` ({0}), must be one of {1}"  # noqa: E501
                .format(tolerance_mode, allowed_values)
            )

        self._tolerance_mode = tolerance_mode

    @property
    def tolerance_unit(self):
        """Gets the tolerance_unit of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The tolerance_unit of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._tolerance_unit

    @tolerance_unit.setter
    def tolerance_unit(self, tolerance_unit):
        """Sets the tolerance_unit of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param tolerance_unit: The tolerance_unit of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """
        allowed_values = ["Percentage", "UnitOfMeasure", "Ppm"]  # noqa: E501
        if (self._configuration.client_side_validation and
                tolerance_unit not in allowed_values):
            raise ValueError(
                "Invalid value for `tolerance_unit` ({0}), must be one of {1}"  # noqa: E501
                .format(tolerance_unit, allowed_values)
            )

        self._tolerance_unit = tolerance_unit

    @property
    def precision_type(self):
        """Gets the precision_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The precision_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._precision_type

    @precision_type.setter
    def precision_type(self, precision_type):
        """Sets the precision_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param precision_type: The precision_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._precision_type = precision_type

    @property
    def readings(self):
        """Gets the readings of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The readings of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._readings

    @readings.setter
    def readings(self, readings):
        """Sets the readings of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param readings: The readings of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: int
        """

        self._readings = readings

    @property
    def channels_type(self):
        """Gets the channels_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The channels_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._channels_type

    @channels_type.setter
    def channels_type(self, channels_type):
        """Sets the channels_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param channels_type: The channels_type of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: str
        """

        self._channels_type = channels_type

    @property
    def channel_count(self):
        """Gets the channel_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The channel_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._channel_count

    @channel_count.setter
    def channel_count(self, channel_count):
        """Sets the channel_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param channel_count: The channel_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: int
        """

        self._channel_count = channel_count

    @property
    def precision(self):
        """Gets the precision of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The precision of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._precision

    @precision.setter
    def precision(self, precision):
        """Sets the precision of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param precision: The precision of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._precision = precision

    @property
    def tolerance_minimum(self):
        """Gets the tolerance_minimum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The tolerance_minimum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._tolerance_minimum

    @tolerance_minimum.setter
    def tolerance_minimum(self, tolerance_minimum):
        """Sets the tolerance_minimum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param tolerance_minimum: The tolerance_minimum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._tolerance_minimum = tolerance_minimum

    @property
    def tolerance_maximum(self):
        """Gets the tolerance_maximum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The tolerance_maximum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._tolerance_maximum

    @tolerance_maximum.setter
    def tolerance_maximum(self, tolerance_maximum):
        """Sets the tolerance_maximum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param tolerance_maximum: The tolerance_maximum of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._tolerance_maximum = tolerance_maximum

    @property
    def resolution(self):
        """Gets the resolution of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The resolution of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param resolution: The resolution of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._resolution = resolution

    @property
    def resolution_count(self):
        """Gets the resolution_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The resolution_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._resolution_count

    @resolution_count.setter
    def resolution_count(self, resolution_count):
        """Sets the resolution_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param resolution_count: The resolution_count of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._resolution_count = resolution_count

    @property
    def nominal(self):
        """Gets the nominal of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The nominal of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._nominal

    @nominal.setter
    def nominal(self, nominal):
        """Sets the nominal of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param nominal: The nominal of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._nominal = nominal

    @property
    def expected_value(self):
        """Gets the expected_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The expected_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._expected_value

    @expected_value.setter
    def expected_value(self, expected_value):
        """Sets the expected_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param expected_value: The expected_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._expected_value = expected_value

    @property
    def base_value(self):
        """Gets the base_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The base_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._base_value

    @base_value.setter
    def base_value(self, base_value):
        """Sets the base_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param base_value: The base_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._base_value = base_value

    @property
    def test_value(self):
        """Gets the test_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The test_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: float
        """
        return self._test_value

    @test_value.setter
    def test_value(self, test_value):
        """Sets the test_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param test_value: The test_value of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: float
        """

        self._test_value = test_value

    @property
    def is_accredited(self):
        """Gets the is_accredited of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The is_accredited of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_accredited

    @is_accredited.setter
    def is_accredited(self, is_accredited):
        """Sets the is_accredited of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param is_accredited: The is_accredited of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_accredited = is_accredited

    @property
    def measurements(self):
        """Gets the measurements of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The measurements of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel]
        """
        return self._measurements

    @measurements.setter
    def measurements(self, measurements):
        """Sets the measurements of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param measurements: The measurements of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel]
        """

        self._measurements = measurements

    @property
    def condition_factors(self):
        """Gets the condition_factors of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The condition_factors of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel]
        """
        return self._condition_factors

    @condition_factors.setter
    def condition_factors(self, condition_factors):
        """Sets the condition_factors of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param condition_factors: The condition_factors of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: list[QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel]
        """

        self._condition_factors = condition_factors

    @property
    def primary_measurement_tool(self):
        """Gets the primary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The primary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
        """
        return self._primary_measurement_tool

    @primary_measurement_tool.setter
    def primary_measurement_tool(self, primary_measurement_tool):
        """Sets the primary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param primary_measurement_tool: The primary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
        """

        self._primary_measurement_tool = primary_measurement_tool

    @property
    def secondary_measurement_tool(self):
        """Gets the secondary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501


        :return: The secondary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :rtype: QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
        """
        return self._secondary_measurement_tool

    @secondary_measurement_tool.setter
    def secondary_measurement_tool(self, secondary_measurement_tool):
        """Sets the secondary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.


        :param secondary_measurement_tool: The secondary_measurement_tool of this QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.  # noqa: E501
        :type: QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
        """

        self._secondary_measurement_tool = secondary_measurement_tool

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel):
            return True

        return self.to_dict() != other.to_dict()
