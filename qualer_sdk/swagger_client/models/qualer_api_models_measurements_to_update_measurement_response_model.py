# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.configuration import Configuration


class QualerApiModelsMeasurementsToUpdateMeasurementResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'measurement_id': 'int',
        'values': 'str',
        'channel': 'int',
        'updated_by': 'str',
        'updated_on': 'datetime'
    }

    attribute_map = {
        'measurement_id': 'MeasurementId',
        'values': 'Values',
        'channel': 'Channel',
        'updated_by': 'UpdatedBy',
        'updated_on': 'UpdatedOn'
    }

    def __init__(self, measurement_id=None, values=None, channel=None, updated_by=None, updated_on=None, _configuration=None):  # noqa: E501
        """QualerApiModelsMeasurementsToUpdateMeasurementResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._measurement_id = None
        self._values = None
        self._channel = None
        self._updated_by = None
        self._updated_on = None
        self.discriminator = None

        if measurement_id is not None:
            self.measurement_id = measurement_id
        if values is not None:
            self.values = values
        if channel is not None:
            self.channel = channel
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_on is not None:
            self.updated_on = updated_on

    @property
    def measurement_id(self):
        """Gets the measurement_id of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501


        :return: The measurement_id of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._measurement_id

    @measurement_id.setter
    def measurement_id(self, measurement_id):
        """Sets the measurement_id of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.


        :param measurement_id: The measurement_id of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :type: int
        """

        self._measurement_id = measurement_id

    @property
    def values(self):
        """Gets the values of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501


        :return: The values of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._values

    @values.setter
    def values(self, values):
        """Sets the values of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.


        :param values: The values of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :type: str
        """

        self._values = values

    @property
    def channel(self):
        """Gets the channel of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501


        :return: The channel of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._channel

    @channel.setter
    def channel(self, channel):
        """Sets the channel of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.


        :param channel: The channel of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :type: int
        """

        self._channel = channel

    @property
    def updated_by(self):
        """Gets the updated_by of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501


        :return: The updated_by of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.


        :param updated_by: The updated_by of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_on(self):
        """Gets the updated_on of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501


        :return: The updated_on of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._updated_on

    @updated_on.setter
    def updated_on(self, updated_on):
        """Sets the updated_on of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.


        :param updated_on: The updated_on of this QualerApiModelsMeasurementsToUpdateMeasurementResponseModel.  # noqa: E501
        :type: datetime
        """

        self._updated_on = updated_on

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsMeasurementsToUpdateMeasurementResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToUpdateMeasurementResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsMeasurementsToUpdateMeasurementResponseModel):
            return True

        return self.to_dict() != other.to_dict()
