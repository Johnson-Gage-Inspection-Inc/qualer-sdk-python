# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AssetReservationApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def asset_reservation_close(self, **kwargs):  # noqa: E501
        """asset_reservation_close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_close(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_close_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_close_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_reservation_close_with_http_info(self, **kwargs):  # noqa: E501
        """asset_reservation_close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_close_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_asset_id', 'model_area_id', 'model_product_id', 'model_serial_number', 'model_asset_tag', 'model_reservation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_close" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501
        if 'model_area_id' in params:
            query_params.append(('model.areaId', params['model_area_id']))  # noqa: E501
        if 'model_product_id' in params:
            query_params.append(('model.productId', params['model_product_id']))  # noqa: E501
        if 'model_serial_number' in params:
            query_params.append(('model.serialNumber', params['model_serial_number']))  # noqa: E501
        if 'model_asset_tag' in params:
            query_params.append(('model.assetTag', params['model_asset_tag']))  # noqa: E501
        if 'model_reservation_id' in params:
            query_params.append(('model.reservationId', params['model_reservation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations/close', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_reservation_get(self, **kwargs):  # noqa: E501
        """asset_reservation_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime model_from:
        :param datetime model_to:
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: list[QualerApiModelsAssetReservationToAssetReservationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_get_with_http_info(**kwargs)  # noqa: E501
            return data

    def asset_reservation_get_with_http_info(self, **kwargs):  # noqa: E501
        """asset_reservation_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime model_from:
        :param datetime model_to:
        :param int model_asset_id:
        :param int model_area_id:
        :param int model_product_id:
        :param str model_serial_number:
        :param str model_asset_tag:
        :param int model_reservation_id:
        :return: list[QualerApiModelsAssetReservationToAssetReservationResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_from', 'model_to', 'model_asset_id', 'model_area_id', 'model_product_id', 'model_serial_number', 'model_asset_tag', 'model_reservation_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_from' in params:
            query_params.append(('model.from', params['model_from']))  # noqa: E501
        if 'model_to' in params:
            query_params.append(('model.to', params['model_to']))  # noqa: E501
        if 'model_asset_id' in params:
            query_params.append(('model.assetId', params['model_asset_id']))  # noqa: E501
        if 'model_area_id' in params:
            query_params.append(('model.areaId', params['model_area_id']))  # noqa: E501
        if 'model_product_id' in params:
            query_params.append(('model.productId', params['model_product_id']))  # noqa: E501
        if 'model_serial_number' in params:
            query_params.append(('model.serialNumber', params['model_serial_number']))  # noqa: E501
        if 'model_asset_tag' in params:
            query_params.append(('model.assetTag', params['model_asset_tag']))  # noqa: E501
        if 'model_reservation_id' in params:
            query_params.append(('model.reservationId', params['model_reservation_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsAssetReservationToAssetReservationResponse]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def asset_reservation_upsert(self, model, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetReservationFromUpsertAssetReservationModel model: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.asset_reservation_upsert_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.asset_reservation_upsert_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def asset_reservation_upsert_with_http_info(self, model, **kwargs):  # noqa: E501
        """asset_reservation_upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.asset_reservation_upsert_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAssetReservationFromUpsertAssetReservationModel model: (required)
        :return: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method asset_reservation_upsert" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `asset_reservation_upsert`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/assetsreservations', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsAssetReservationToUpsertAssetReservationResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
