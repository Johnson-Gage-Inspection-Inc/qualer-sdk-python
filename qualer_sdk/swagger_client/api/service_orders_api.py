# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceOrdersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_orders_change_order_status(self, service_order_id, model, **kwargs):  # noqa: E501
        """Change Work Order Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_change_order_status(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_change_order_status_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_change_order_status_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
            return data

    def service_orders_change_order_status_with_http_info(self, service_order_id, model, **kwargs):  # noqa: E501
        """Change Work Order Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_change_order_status_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_change_order_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_change_order_status`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `service_orders_change_order_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_create_async(self, model, **kwargs):  # noqa: E501
        """Create service order.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_create_async(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromCreateOrderModel model: Vendor update model (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_create_async_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_create_async_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def service_orders_create_async_with_http_info(self, model, **kwargs):  # noqa: E501
        """Create service order.  # noqa: E501

          # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_create_async_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromCreateOrderModel model: Vendor update model (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_create_async" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `service_orders_create_async`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_create_order_by_schedule(self, service_schedule_id, **kwargs):  # noqa: E501
        """service_orders_create_order_by_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_create_order_by_schedule(service_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_schedule_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_create_order_by_schedule_with_http_info(service_schedule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_create_order_by_schedule_with_http_info(service_schedule_id, **kwargs)  # noqa: E501
            return data

    def service_orders_create_order_by_schedule_with_http_info(self, service_schedule_id, **kwargs):  # noqa: E501
        """service_orders_create_order_by_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_create_order_by_schedule_with_http_info(service_schedule_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_schedule_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_schedule_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_create_order_by_schedule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_schedule_id' is set
        if self.api_client.client_side_validation and ('service_schedule_id' not in params or
                                                       params['service_schedule_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_schedule_id` when calling `service_orders_create_order_by_schedule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_schedule_id' in params:
            path_params['serviceScheduleId'] = params['service_schedule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/byplan/{serviceScheduleId}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_assignments(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_assignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_assignments(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_assignments_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_assignments_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_orders_get_assignments_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_assignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_assignments_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_assignments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_get_assignments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/assignments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_charges(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_charges(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_charges_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_charges_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_orders_get_charges_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_charges_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_get_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/charges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_order_status(self, service_order_id, **kwargs):  # noqa: E501
        """Gets current status and next status according to the workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_order_status(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_order_status_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_order_status_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_orders_get_order_status_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """Gets current status and next status according to the workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_order_status_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_order_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_get_order_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/status', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_work_order(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_work_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_work_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_work_order_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_orders_get_work_order_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_orders_get_work_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_work_order" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_get_work_order`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToClientOrderResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_work_orders(self, **kwargs):  # noqa: E501
        """Retrieve work orders by filters  # noqa: E501

        Sample request:                GET /api/service/workorders                GET /api/service/workorders?status=submitted                GET /api/service/workorders?&amp;status=onsite,submitted&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;modifiedAfter=2010-12-15T10:11:12&amp;workOrderNumber=00567  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_orders(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite.
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Orders where LastUpdatedOn greater than From parameter
        :param datetime to: Retrieve Work Orders where LastUpdatedOn less than To parameter
        :param datetime modified_after: Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter
        :param str work_order_number: Filter by WorkOrderNumber
        :param str assigned_employees: Comma separated list of assigned employees (using full name, alias or login email of the employee)
        :return: list[QualerApiModelsServiceOrdersToClientOrderResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_work_orders_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_work_orders_with_http_info(**kwargs)  # noqa: E501
            return data

    def service_orders_get_work_orders_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve work orders by filters  # noqa: E501

        Sample request:                GET /api/service/workorders                GET /api/service/workorders?status=submitted                GET /api/service/workorders?&amp;status=onsite,submitted&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;modifiedAfter=2010-12-15T10:11:12&amp;workOrderNumber=00567  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_orders_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite.
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Orders where LastUpdatedOn greater than From parameter
        :param datetime to: Retrieve Work Orders where LastUpdatedOn less than To parameter
        :param datetime modified_after: Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter
        :param str work_order_number: Filter by WorkOrderNumber
        :param str assigned_employees: Comma separated list of assigned employees (using full name, alias or login email of the employee)
        :return: list[QualerApiModelsServiceOrdersToClientOrderResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['status', 'company_id', '_from', 'to', 'modified_after', 'work_order_number', 'assigned_employees']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_work_orders" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
        if 'company_id' in params:
            query_params.append(('companyId', params['company_id']))  # noqa: E501
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501
        if 'to' in params:
            query_params.append(('to', params['to']))  # noqa: E501
        if 'modified_after' in params:
            query_params.append(('modifiedAfter', params['modified_after']))  # noqa: E501
        if 'work_order_number' in params:
            query_params.append(('workOrderNumber', params['work_order_number']))  # noqa: E501
        if 'assigned_employees' in params:
            query_params.append(('assignedEmployees', params['assigned_employees']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToClientOrderResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_get_work_orders_0(self, employee_id, **kwargs):  # noqa: E501
        """service_orders_get_work_orders_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_orders_0(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :param bool is_internal:
        :return: list[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_get_work_orders_0_with_http_info(employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_get_work_orders_0_with_http_info(employee_id, **kwargs)  # noqa: E501
            return data

    def service_orders_get_work_orders_0_with_http_info(self, employee_id, **kwargs):  # noqa: E501
        """service_orders_get_work_orders_0  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_get_work_orders_0_with_http_info(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :param bool is_internal:
        :return: list[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_id', 'is_internal']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_get_work_orders_0" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_id' is set
        if self.api_client.client_side_validation and ('employee_id' not in params or
                                                       params['employee_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `employee_id` when calling `service_orders_get_work_orders_0`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []
        if 'is_internal' in params:
            query_params.append(('isInternal', params['is_internal']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employee/{employeeId}/workorders', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_order_cancel(self, service_order_id, **kwargs):  # noqa: E501
        """Cancel work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_order_cancel(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str reason_text: cancel description
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_order_cancel_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_order_cancel_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_orders_order_cancel_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """Cancel work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_order_cancel_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str reason_text: cancel description
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'reason_text']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_order_cancel" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_order_cancel`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []
        if 'reason_text' in params:
            query_params.append(('reasonText', params['reason_text']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/cancel', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_orders_put_charges(self, service_order_id, model, **kwargs):  # noqa: E501
        """Charge Names: LateFee, ServiceDiscount, PrepaidCredit, TradeInCredit, TravelCharge, TaxAmount, ShippingFee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_put_charges(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param QualerApiModelsServiceOrdersFromChargeUpdateModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_orders_put_charges_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
        else:
            (data) = self.service_orders_put_charges_with_http_info(service_order_id, model, **kwargs)  # noqa: E501
            return data

    def service_orders_put_charges_with_http_info(self, service_order_id, model, **kwargs):  # noqa: E501
        """Charge Names: LateFee, ServiceDiscount, PrepaidCredit, TradeInCredit, TravelCharge, TaxAmount, ShippingFee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_orders_put_charges_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param QualerApiModelsServiceOrdersFromChargeUpdateModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id', 'model']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_orders_put_charges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and ('service_order_id' not in params or
                                                       params['service_order_id'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_orders_put_charges`")  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and ('model' not in params or
                                                       params['model'] is None):  # noqa: E501
            raise ValueError("Missing the required parameter `model` when calling `service_orders_put_charges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'model' in params:
            body_params = params['model']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/charges', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
