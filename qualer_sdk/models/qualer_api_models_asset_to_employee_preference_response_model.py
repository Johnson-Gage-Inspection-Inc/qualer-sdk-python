# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class QualerApiModelsAssetToEmployeePreferenceResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_type': 'str',
        'element_page': 'str',
        'element_id': 'str',
        'preference': 'list[str]',
        'is_pinned': 'bool'
    }

    attribute_map = {
        'element_type': 'ElementType',
        'element_page': 'ElementPage',
        'element_id': 'ElementId',
        'preference': 'Preference',
        'is_pinned': 'IsPinned'
    }

    def __init__(self, element_type=None, element_page=None, element_id=None, preference=None, is_pinned=None):  # noqa: E501
        """QualerApiModelsAssetToEmployeePreferenceResponseModel - a model defined in Swagger"""  # noqa: E501
        self._element_type = None
        self._element_page = None
        self._element_id = None
        self._preference = None
        self._is_pinned = None
        self.discriminator = None
        if element_type is not None:
            self.element_type = element_type
        if element_page is not None:
            self.element_page = element_page
        if element_id is not None:
            self.element_id = element_id
        if preference is not None:
            self.preference = preference
        if is_pinned is not None:
            self.is_pinned = is_pinned

    @property
    def element_type(self):
        """Gets the element_type of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501


        :return: The element_type of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this QualerApiModelsAssetToEmployeePreferenceResponseModel.


        :param element_type: The element_type of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :type: str
        """

        self._element_type = element_type

    @property
    def element_page(self):
        """Gets the element_page of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501


        :return: The element_page of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._element_page

    @element_page.setter
    def element_page(self, element_page):
        """Sets the element_page of this QualerApiModelsAssetToEmployeePreferenceResponseModel.


        :param element_page: The element_page of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :type: str
        """

        self._element_page = element_page

    @property
    def element_id(self):
        """Gets the element_id of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501


        :return: The element_id of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this QualerApiModelsAssetToEmployeePreferenceResponseModel.


        :param element_id: The element_id of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def preference(self):
        """Gets the preference of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501


        :return: The preference of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :rtype: list[str]
        """
        return self._preference

    @preference.setter
    def preference(self, preference):
        """Sets the preference of this QualerApiModelsAssetToEmployeePreferenceResponseModel.


        :param preference: The preference of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :type: list[str]
        """

        self._preference = preference

    @property
    def is_pinned(self):
        """Gets the is_pinned of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501


        :return: The is_pinned of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :rtype: bool
        """
        return self._is_pinned

    @is_pinned.setter
    def is_pinned(self, is_pinned):
        """Sets the is_pinned of this QualerApiModelsAssetToEmployeePreferenceResponseModel.


        :param is_pinned: The is_pinned of this QualerApiModelsAssetToEmployeePreferenceResponseModel.  # noqa: E501
        :type: bool
        """

        self._is_pinned = is_pinned

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(QualerApiModelsAssetToEmployeePreferenceResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsAssetToEmployeePreferenceResponseModel):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
