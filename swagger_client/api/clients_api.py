# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ClientsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def clients_create(self, body, **kwargs):  # noqa: E501
        """Create Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_create(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromSponsoredClientCreateModel body: Client update model (required)
        :return: QualerApiModelsClientsToCreatedClientCompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_create_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_create_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def clients_create_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_create_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromSponsoredClientCreateModel body: Client update model (required)
        :return: QualerApiModelsClientsToCreatedClientCompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clients_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'account_number_text' in params:
            form_params.append(('AccountNumberText', params['account_number_text']))  # noqa: E501
        if 'client_status' in params:
            form_params.append(('ClientStatus', params['client_status']))  # noqa: E501
        if 'domain_name' in params:
            form_params.append(('DomainName', params['domain_name']))  # noqa: E501
        if 'custom_client_name' in params:
            form_params.append(('CustomClientName', params['custom_client_name']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'currency_id' in params:
            form_params.append(('CurrencyId', params['currency_id']))  # noqa: E501
        if 'account_representative_employee_id' in params:
            form_params.append(('AccountRepresentativeEmployeeId', params['account_representative_employee_id']))  # noqa: E501
        if 'account_representative_site_id' in params:
            form_params.append(('AccountRepresentativeSiteId', params['account_representative_site_id']))  # noqa: E501
        if 'account_manager_employee_id' in params:
            form_params.append(('AccountManagerEmployeeId', params['account_manager_employee_id']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsClientsToCreatedClientCompanyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_create(self, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs):  # noqa: E501
        """Create Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_create(account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number_text: (required)
        :param str client_status: (required)
        :param str domain_name: (required)
        :param str custom_client_name: (required)
        :param str legacy_id: (required)
        :param int currency_id: (required)
        :param int account_representative_employee_id: (required)
        :param int account_representative_site_id: (required)
        :param int account_manager_employee_id: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :return: QualerApiModelsClientsToCreatedClientCompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_create_with_http_info(account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_create_with_http_info(account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs)  # noqa: E501
            return data

    def clients_create_with_http_info(self, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs):  # noqa: E501
        """Create Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_create_with_http_info(account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str account_number_text: (required)
        :param str client_status: (required)
        :param str domain_name: (required)
        :param str custom_client_name: (required)
        :param str legacy_id: (required)
        :param int currency_id: (required)
        :param int account_representative_employee_id: (required)
        :param int account_representative_site_id: (required)
        :param int account_manager_employee_id: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :return: QualerApiModelsClientsToCreatedClientCompanyResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['account_number_text', 'client_status', 'domain_name', 'custom_client_name', 'legacy_id', 'currency_id', 'account_representative_employee_id', 'account_representative_site_id', 'account_manager_employee_id', 'company_name', 'billing_address', 'shipping_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_create" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'account_number_text' is set
        if ('account_number_text' not in params or
                params['account_number_text'] is None):
            raise ValueError("Missing the required parameter `account_number_text` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'client_status' is set
        if ('client_status' not in params or
                params['client_status'] is None):
            raise ValueError("Missing the required parameter `client_status` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'custom_client_name' is set
        if ('custom_client_name' not in params or
                params['custom_client_name'] is None):
            raise ValueError("Missing the required parameter `custom_client_name` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'legacy_id' is set
        if ('legacy_id' not in params or
                params['legacy_id'] is None):
            raise ValueError("Missing the required parameter `legacy_id` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'currency_id' is set
        if ('currency_id' not in params or
                params['currency_id'] is None):
            raise ValueError("Missing the required parameter `currency_id` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'account_representative_employee_id' is set
        if ('account_representative_employee_id' not in params or
                params['account_representative_employee_id'] is None):
            raise ValueError("Missing the required parameter `account_representative_employee_id` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'account_representative_site_id' is set
        if ('account_representative_site_id' not in params or
                params['account_representative_site_id'] is None):
            raise ValueError("Missing the required parameter `account_representative_site_id` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'account_manager_employee_id' is set
        if ('account_manager_employee_id' not in params or
                params['account_manager_employee_id'] is None):
            raise ValueError("Missing the required parameter `account_manager_employee_id` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params or
                params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'billing_address' is set
        if ('billing_address' not in params or
                params['billing_address'] is None):
            raise ValueError("Missing the required parameter `billing_address` when calling `clients_create`")  # noqa: E501
        # verify the required parameter 'shipping_address' is set
        if ('shipping_address' not in params or
                params['shipping_address'] is None):
            raise ValueError("Missing the required parameter `shipping_address` when calling `clients_create`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'account_number_text' in params:
            form_params.append(('AccountNumberText', params['account_number_text']))  # noqa: E501
        if 'client_status' in params:
            form_params.append(('ClientStatus', params['client_status']))  # noqa: E501
        if 'domain_name' in params:
            form_params.append(('DomainName', params['domain_name']))  # noqa: E501
        if 'custom_client_name' in params:
            form_params.append(('CustomClientName', params['custom_client_name']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'currency_id' in params:
            form_params.append(('CurrencyId', params['currency_id']))  # noqa: E501
        if 'account_representative_employee_id' in params:
            form_params.append(('AccountRepresentativeEmployeeId', params['account_representative_employee_id']))  # noqa: E501
        if 'account_representative_site_id' in params:
            form_params.append(('AccountRepresentativeSiteId', params['account_representative_site_id']))  # noqa: E501
        if 'account_manager_employee_id' in params:
            form_params.append(('AccountManagerEmployeeId', params['account_manager_employee_id']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsClientsToCreatedClientCompanyResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_get(self, client_company_id, **kwargs):  # noqa: E501
        """clients_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: QualerApiModelsClientsToClientCompanyResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_get_with_http_info(client_company_id, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_get_with_http_info(client_company_id, **kwargs)  # noqa: E501
            return data

    def clients_get_with_http_info(self, client_company_id, **kwargs):  # noqa: E501
        """clients_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int client_company_id: (required)
        :return: QualerApiModelsClientsToClientCompanyResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['client_company_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'client_company_id' is set
        if ('client_company_id' not in params or
                params['client_company_id'] is None):
            raise ValueError("Missing the required parameter `client_company_id` when calling `clients_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'client_company_id' in params:
            path_params['clientCompanyId'] = params['client_company_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients/{clientCompanyId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsClientsToClientCompanyResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_get_all(self, **kwargs):  # noqa: E501
        """clients_get_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get_all(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_legacy_id:
        :param str model_account_number_text:
        :param str model_company_name:
        :param int model_take:
        :param datetime model_modified_after:
        :return: list[QualerApiModelsClientsToClientCompanyResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_get_all_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.clients_get_all_with_http_info(**kwargs)  # noqa: E501
            return data

    def clients_get_all_with_http_info(self, **kwargs):  # noqa: E501
        """clients_get_all  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_get_all_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_legacy_id:
        :param str model_account_number_text:
        :param str model_company_name:
        :param int model_take:
        :param datetime model_modified_after:
        :return: list[QualerApiModelsClientsToClientCompanyResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_legacy_id', 'model_account_number_text', 'model_company_name', 'model_take', 'model_modified_after']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_get_all" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_legacy_id' in params:
            query_params.append(('model.legacyId', params['model_legacy_id']))  # noqa: E501
        if 'model_account_number_text' in params:
            query_params.append(('model.accountNumberText', params['model_account_number_text']))  # noqa: E501
        if 'model_company_name' in params:
            query_params.append(('model.companyName', params['model_company_name']))  # noqa: E501
        if 'model_take' in params:
            query_params.append(('model.take', params['model_take']))  # noqa: E501
        if 'model_modified_after' in params:
            query_params.append(('model.modifiedAfter', params['model_modified_after']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsClientsToClientCompanyResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_update(self, body, **kwargs):  # noqa: E501
        """Update Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_update(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromSponsoredClientEditModel body: Client update model (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_update_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_update_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def clients_update_with_http_info(self, body, **kwargs):  # noqa: E501
        """Update Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_update_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsClientsFromSponsoredClientEditModel body: Client update model (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `clients_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_id' in params:
            form_params.append(('CompanyId', params['company_id']))  # noqa: E501
        if 'account_number_text' in params:
            form_params.append(('AccountNumberText', params['account_number_text']))  # noqa: E501
        if 'client_status' in params:
            form_params.append(('ClientStatus', params['client_status']))  # noqa: E501
        if 'domain_name' in params:
            form_params.append(('DomainName', params['domain_name']))  # noqa: E501
        if 'custom_client_name' in params:
            form_params.append(('CustomClientName', params['custom_client_name']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'currency_id' in params:
            form_params.append(('CurrencyId', params['currency_id']))  # noqa: E501
        if 'account_representative_employee_id' in params:
            form_params.append(('AccountRepresentativeEmployeeId', params['account_representative_employee_id']))  # noqa: E501
        if 'account_representative_site_id' in params:
            form_params.append(('AccountRepresentativeSiteId', params['account_representative_site_id']))  # noqa: E501
        if 'account_manager_employee_id' in params:
            form_params.append(('AccountManagerEmployeeId', params['account_manager_employee_id']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def clients_update(self, company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs):  # noqa: E501
        """Update Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_update(company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :param str account_number_text: (required)
        :param str client_status: (required)
        :param str domain_name: (required)
        :param str custom_client_name: (required)
        :param str legacy_id: (required)
        :param int currency_id: (required)
        :param int account_representative_employee_id: (required)
        :param int account_representative_site_id: (required)
        :param int account_manager_employee_id: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.clients_update_with_http_info(company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs)  # noqa: E501
        else:
            (data) = self.clients_update_with_http_info(company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs)  # noqa: E501
            return data

    def clients_update_with_http_info(self, company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, **kwargs):  # noqa: E501
        """Update Client information.  # noqa: E501

        ClientStatus: Prospect = 0, Approved = 1, NotApproved = 2, Hidden = 3  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.clients_update_with_http_info(company_id, account_number_text, client_status, domain_name, custom_client_name, legacy_id, currency_id, account_representative_employee_id, account_representative_site_id, account_manager_employee_id, company_name, billing_address, shipping_address, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int company_id: (required)
        :param str account_number_text: (required)
        :param str client_status: (required)
        :param str domain_name: (required)
        :param str custom_client_name: (required)
        :param str legacy_id: (required)
        :param int currency_id: (required)
        :param int account_representative_employee_id: (required)
        :param int account_representative_site_id: (required)
        :param int account_manager_employee_id: (required)
        :param str company_name: (required)
        :param QualerApiModelsAddressAddressModel billing_address: (required)
        :param QualerApiModelsAddressAddressModel shipping_address: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['company_id', 'account_number_text', 'client_status', 'domain_name', 'custom_client_name', 'legacy_id', 'currency_id', 'account_representative_employee_id', 'account_representative_site_id', 'account_manager_employee_id', 'company_name', 'billing_address', 'shipping_address']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method clients_update" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'company_id' is set
        if ('company_id' not in params or
                params['company_id'] is None):
            raise ValueError("Missing the required parameter `company_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'account_number_text' is set
        if ('account_number_text' not in params or
                params['account_number_text'] is None):
            raise ValueError("Missing the required parameter `account_number_text` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'client_status' is set
        if ('client_status' not in params or
                params['client_status'] is None):
            raise ValueError("Missing the required parameter `client_status` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'domain_name' is set
        if ('domain_name' not in params or
                params['domain_name'] is None):
            raise ValueError("Missing the required parameter `domain_name` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'custom_client_name' is set
        if ('custom_client_name' not in params or
                params['custom_client_name'] is None):
            raise ValueError("Missing the required parameter `custom_client_name` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'legacy_id' is set
        if ('legacy_id' not in params or
                params['legacy_id'] is None):
            raise ValueError("Missing the required parameter `legacy_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'currency_id' is set
        if ('currency_id' not in params or
                params['currency_id'] is None):
            raise ValueError("Missing the required parameter `currency_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'account_representative_employee_id' is set
        if ('account_representative_employee_id' not in params or
                params['account_representative_employee_id'] is None):
            raise ValueError("Missing the required parameter `account_representative_employee_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'account_representative_site_id' is set
        if ('account_representative_site_id' not in params or
                params['account_representative_site_id'] is None):
            raise ValueError("Missing the required parameter `account_representative_site_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'account_manager_employee_id' is set
        if ('account_manager_employee_id' not in params or
                params['account_manager_employee_id'] is None):
            raise ValueError("Missing the required parameter `account_manager_employee_id` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'company_name' is set
        if ('company_name' not in params or
                params['company_name'] is None):
            raise ValueError("Missing the required parameter `company_name` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'billing_address' is set
        if ('billing_address' not in params or
                params['billing_address'] is None):
            raise ValueError("Missing the required parameter `billing_address` when calling `clients_update`")  # noqa: E501
        # verify the required parameter 'shipping_address' is set
        if ('shipping_address' not in params or
                params['shipping_address'] is None):
            raise ValueError("Missing the required parameter `shipping_address` when calling `clients_update`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'company_id' in params:
            form_params.append(('CompanyId', params['company_id']))  # noqa: E501
        if 'account_number_text' in params:
            form_params.append(('AccountNumberText', params['account_number_text']))  # noqa: E501
        if 'client_status' in params:
            form_params.append(('ClientStatus', params['client_status']))  # noqa: E501
        if 'domain_name' in params:
            form_params.append(('DomainName', params['domain_name']))  # noqa: E501
        if 'custom_client_name' in params:
            form_params.append(('CustomClientName', params['custom_client_name']))  # noqa: E501
        if 'legacy_id' in params:
            form_params.append(('LegacyId', params['legacy_id']))  # noqa: E501
        if 'currency_id' in params:
            form_params.append(('CurrencyId', params['currency_id']))  # noqa: E501
        if 'account_representative_employee_id' in params:
            form_params.append(('AccountRepresentativeEmployeeId', params['account_representative_employee_id']))  # noqa: E501
        if 'account_representative_site_id' in params:
            form_params.append(('AccountRepresentativeSiteId', params['account_representative_site_id']))  # noqa: E501
        if 'account_manager_employee_id' in params:
            form_params.append(('AccountManagerEmployeeId', params['account_manager_employee_id']))  # noqa: E501
        if 'company_name' in params:
            form_params.append(('CompanyName', params['company_name']))  # noqa: E501
        if 'billing_address' in params:
            form_params.append(('BillingAddress', params['billing_address']))  # noqa: E501
        if 'shipping_address' in params:
            form_params.append(('ShippingAddress', params['shipping_address']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/clients', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
