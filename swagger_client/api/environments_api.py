# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EnvironmentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def environments_get(self, id, **kwargs):  # noqa: E501
        """environments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_get(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: list[QualerApiModelsEnvironmentToEnvironmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.environments_get_with_http_info(id, **kwargs)  # noqa: E501
        else:
            (data) = self.environments_get_with_http_info(id, **kwargs)  # noqa: E501
            return data

    def environments_get_with_http_info(self, id, **kwargs):  # noqa: E501
        """environments_get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_get_with_http_info(id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str id: (required)
        :return: list[QualerApiModelsEnvironmentToEnvironmentModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_get" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `environments_get`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Environments/{id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsEnvironmentToEnvironmentModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_post(self, body, id, **kwargs):  # noqa: E501
        """environments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_post(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEnvironmentFromEnvironmentModel body: (required)
        :param str id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.environments_post_with_http_info(body, id, **kwargs)  # noqa: E501
        else:
            (data) = self.environments_post_with_http_info(body, id, **kwargs)  # noqa: E501
            return data

    def environments_post_with_http_info(self, body, id, **kwargs):  # noqa: E501
        """environments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_post_with_http_info(body, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEnvironmentFromEnvironmentModel body: (required)
        :param str id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `environments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'station_id' in params:
            form_params.append(('StationId', params['station_id']))  # noqa: E501
        if 'factor_id' in params:
            form_params.append(('FactorId', params['factor_id']))  # noqa: E501
        if 'factor_name' in params:
            form_params.append(('FactorName', params['factor_name']))  # noqa: E501
        if 'factor_value' in params:
            form_params.append(('FactorValue', params['factor_value']))  # noqa: E501
        if 'unit_of_measure' in params:
            form_params.append(('UnitOfMeasure', params['unit_of_measure']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Environments/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def environments_post(self, station_id, factor_id, factor_name, factor_value, unit_of_measure, id, **kwargs):  # noqa: E501
        """environments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_post(station_id, factor_id, factor_name, factor_value, unit_of_measure, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int station_id: (required)
        :param str factor_id: (required)
        :param str factor_name: (required)
        :param float factor_value: (required)
        :param str unit_of_measure: (required)
        :param str id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.environments_post_with_http_info(station_id, factor_id, factor_name, factor_value, unit_of_measure, id, **kwargs)  # noqa: E501
        else:
            (data) = self.environments_post_with_http_info(station_id, factor_id, factor_name, factor_value, unit_of_measure, id, **kwargs)  # noqa: E501
            return data

    def environments_post_with_http_info(self, station_id, factor_id, factor_name, factor_value, unit_of_measure, id, **kwargs):  # noqa: E501
        """environments_post  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.environments_post_with_http_info(station_id, factor_id, factor_name, factor_value, unit_of_measure, id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int station_id: (required)
        :param str factor_id: (required)
        :param str factor_name: (required)
        :param float factor_value: (required)
        :param str unit_of_measure: (required)
        :param str id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['station_id', 'factor_id', 'factor_name', 'factor_value', 'unit_of_measure', 'id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method environments_post" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'station_id' is set
        if ('station_id' not in params or
                params['station_id'] is None):
            raise ValueError("Missing the required parameter `station_id` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'factor_id' is set
        if ('factor_id' not in params or
                params['factor_id'] is None):
            raise ValueError("Missing the required parameter `factor_id` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'factor_name' is set
        if ('factor_name' not in params or
                params['factor_name'] is None):
            raise ValueError("Missing the required parameter `factor_name` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'factor_value' is set
        if ('factor_value' not in params or
                params['factor_value'] is None):
            raise ValueError("Missing the required parameter `factor_value` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'unit_of_measure' is set
        if ('unit_of_measure' not in params or
                params['unit_of_measure'] is None):
            raise ValueError("Missing the required parameter `unit_of_measure` when calling `environments_post`")  # noqa: E501
        # verify the required parameter 'id' is set
        if ('id' not in params or
                params['id'] is None):
            raise ValueError("Missing the required parameter `id` when calling `environments_post`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'id' in params:
            path_params['id'] = params['id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'station_id' in params:
            form_params.append(('StationId', params['station_id']))  # noqa: E501
        if 'factor_id' in params:
            form_params.append(('FactorId', params['factor_id']))  # noqa: E501
        if 'factor_name' in params:
            form_params.append(('FactorName', params['factor_name']))  # noqa: E501
        if 'factor_value' in params:
            form_params.append(('FactorValue', params['factor_value']))  # noqa: E501
        if 'unit_of_measure' in params:
            form_params.append(('UnitOfMeasure', params['unit_of_measure']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/Environments/{id}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
