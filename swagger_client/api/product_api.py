# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ProductApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def product_add_manufacturer(self, manufacturer_name, **kwargs):  # noqa: E501
        """product_add_manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_manufacturer(manufacturer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manufacturer_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_add_manufacturer_with_http_info(manufacturer_name, **kwargs)  # noqa: E501
        else:
            (data) = self.product_add_manufacturer_with_http_info(manufacturer_name, **kwargs)  # noqa: E501
            return data

    def product_add_manufacturer_with_http_info(self, manufacturer_name, **kwargs):  # noqa: E501
        """product_add_manufacturer  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_manufacturer_with_http_info(manufacturer_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str manufacturer_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['manufacturer_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_add_manufacturer" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'manufacturer_name' is set
        if ('manufacturer_name' not in params or
                params['manufacturer_name'] is None):
            raise ValueError("Missing the required parameter `manufacturer_name` when calling `product_add_manufacturer`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'manufacturer_name' in params:
            query_params.append(('manufacturerName', params['manufacturer_name']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/manufacturers/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_add_product(self, body, **kwargs):  # noqa: E501
        """product_add_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_product(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsProductFromProductApiEditModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_add_product_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_add_product_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_add_product_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_add_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_product_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsProductFromProductApiEditModel body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_add_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_add_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_description' in params:
            form_params.append(('ProductDescription', params['product_description']))  # noqa: E501
        if 'category_id' in params:
            form_params.append(('CategoryId', params['category_id']))  # noqa: E501
        if 'manufacturer_id' in params:
            form_params.append(('ManufacturerId', params['manufacturer_id']))  # noqa: E501
        if 'parent_product_id' in params:
            form_params.append(('ParentProductId', params['parent_product_id']))  # noqa: E501
        if 'product_name' in params:
            form_params.append(('ProductName', params['product_name']))  # noqa: E501
        if 'manufacturer_part_number' in params:
            form_params.append(('ManufacturerPartNumber', params['manufacturer_part_number']))  # noqa: E501
        if 'is_family' in params:
            form_params.append(('IsFamily', params['is_family']))  # noqa: E501
        if 'is_discontinued' in params:
            form_params.append(('IsDiscontinued', params['is_discontinued']))  # noqa: E501
        if 'is_stock_item' in params:
            form_params.append(('IsStockItem', params['is_stock_item']))  # noqa: E501
        if 'unit_sale_price' in params:
            form_params.append(('UnitSalePrice', params['unit_sale_price']))  # noqa: E501
        if 'supplier_information' in params:
            form_params.append(('SupplierInformation', params['supplier_information']))  # noqa: E501
        if 'quantity_on_hand' in params:
            form_params.append(('QuantityOnHand', params['quantity_on_hand']))  # noqa: E501
        if 'product_code' in params:
            form_params.append(('ProductCode', params['product_code']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_add_product(self, product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, **kwargs):  # noqa: E501
        """product_add_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_product(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_description: (required)
        :param int category_id: (required)
        :param int manufacturer_id: (required)
        :param int parent_product_id: (required)
        :param str product_name: (required)
        :param str manufacturer_part_number: (required)
        :param bool is_family: (required)
        :param bool is_discontinued: (required)
        :param bool is_stock_item: (required)
        :param float unit_sale_price: (required)
        :param str supplier_information: (required)
        :param int quantity_on_hand: (required)
        :param str product_code: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_add_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, **kwargs)  # noqa: E501
        else:
            (data) = self.product_add_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, **kwargs)  # noqa: E501
            return data

    def product_add_product_with_http_info(self, product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, **kwargs):  # noqa: E501
        """product_add_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_add_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_description: (required)
        :param int category_id: (required)
        :param int manufacturer_id: (required)
        :param int parent_product_id: (required)
        :param str product_name: (required)
        :param str manufacturer_part_number: (required)
        :param bool is_family: (required)
        :param bool is_discontinued: (required)
        :param bool is_stock_item: (required)
        :param float unit_sale_price: (required)
        :param str supplier_information: (required)
        :param int quantity_on_hand: (required)
        :param str product_code: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_description', 'category_id', 'manufacturer_id', 'parent_product_id', 'product_name', 'manufacturer_part_number', 'is_family', 'is_discontinued', 'is_stock_item', 'unit_sale_price', 'supplier_information', 'quantity_on_hand', 'product_code']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_add_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_description' is set
        if ('product_description' not in params or
                params['product_description'] is None):
            raise ValueError("Missing the required parameter `product_description` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'manufacturer_id' is set
        if ('manufacturer_id' not in params or
                params['manufacturer_id'] is None):
            raise ValueError("Missing the required parameter `manufacturer_id` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'parent_product_id' is set
        if ('parent_product_id' not in params or
                params['parent_product_id'] is None):
            raise ValueError("Missing the required parameter `parent_product_id` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'product_name' is set
        if ('product_name' not in params or
                params['product_name'] is None):
            raise ValueError("Missing the required parameter `product_name` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'manufacturer_part_number' is set
        if ('manufacturer_part_number' not in params or
                params['manufacturer_part_number'] is None):
            raise ValueError("Missing the required parameter `manufacturer_part_number` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'is_family' is set
        if ('is_family' not in params or
                params['is_family'] is None):
            raise ValueError("Missing the required parameter `is_family` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'is_discontinued' is set
        if ('is_discontinued' not in params or
                params['is_discontinued'] is None):
            raise ValueError("Missing the required parameter `is_discontinued` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'is_stock_item' is set
        if ('is_stock_item' not in params or
                params['is_stock_item'] is None):
            raise ValueError("Missing the required parameter `is_stock_item` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'unit_sale_price' is set
        if ('unit_sale_price' not in params or
                params['unit_sale_price'] is None):
            raise ValueError("Missing the required parameter `unit_sale_price` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'supplier_information' is set
        if ('supplier_information' not in params or
                params['supplier_information'] is None):
            raise ValueError("Missing the required parameter `supplier_information` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'quantity_on_hand' is set
        if ('quantity_on_hand' not in params or
                params['quantity_on_hand'] is None):
            raise ValueError("Missing the required parameter `quantity_on_hand` when calling `product_add_product`")  # noqa: E501
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `product_add_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_description' in params:
            form_params.append(('ProductDescription', params['product_description']))  # noqa: E501
        if 'category_id' in params:
            form_params.append(('CategoryId', params['category_id']))  # noqa: E501
        if 'manufacturer_id' in params:
            form_params.append(('ManufacturerId', params['manufacturer_id']))  # noqa: E501
        if 'parent_product_id' in params:
            form_params.append(('ParentProductId', params['parent_product_id']))  # noqa: E501
        if 'product_name' in params:
            form_params.append(('ProductName', params['product_name']))  # noqa: E501
        if 'manufacturer_part_number' in params:
            form_params.append(('ManufacturerPartNumber', params['manufacturer_part_number']))  # noqa: E501
        if 'is_family' in params:
            form_params.append(('IsFamily', params['is_family']))  # noqa: E501
        if 'is_discontinued' in params:
            form_params.append(('IsDiscontinued', params['is_discontinued']))  # noqa: E501
        if 'is_stock_item' in params:
            form_params.append(('IsStockItem', params['is_stock_item']))  # noqa: E501
        if 'unit_sale_price' in params:
            form_params.append(('UnitSalePrice', params['unit_sale_price']))  # noqa: E501
        if 'supplier_information' in params:
            form_params.append(('SupplierInformation', params['supplier_information']))  # noqa: E501
        if 'quantity_on_hand' in params:
            form_params.append(('QuantityOnHand', params['quantity_on_hand']))  # noqa: E501
        if 'product_code' in params:
            form_params.append(('ProductCode', params['product_code']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/add', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_get_inventory_count(self, **kwargs):  # noqa: E501
        """product_get_inventory_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_inventory_count(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsInventoryToInventoryResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_get_inventory_count_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_get_inventory_count_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_get_inventory_count_with_http_info(self, **kwargs):  # noqa: E501
        """product_get_inventory_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_inventory_count_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsInventoryToInventoryResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_get_inventory_count" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/inventorycount', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsInventoryToInventoryResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_get_manufacturers(self, **kwargs):  # noqa: E501
        """product_get_manufacturers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_manufacturers(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsProductToManufacturerResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_get_manufacturers_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.product_get_manufacturers_with_http_info(**kwargs)  # noqa: E501
            return data

    def product_get_manufacturers_with_http_info(self, **kwargs):  # noqa: E501
        """product_get_manufacturers  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_manufacturers_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: list[QualerApiModelsProductToManufacturerResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_get_manufacturers" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/manufacturers', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsProductToManufacturerResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_get_product(self, product_id, **kwargs):  # noqa: E501
        """product_get_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_product(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_id: (required)
        :return: QualerApiModelsProductToProductApiResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_get_product_with_http_info(product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_get_product_with_http_info(product_id, **kwargs)  # noqa: E501
            return data

    def product_get_product_with_http_info(self, product_id, **kwargs):  # noqa: E501
        """product_get_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_get_product_with_http_info(product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int product_id: (required)
        :return: QualerApiModelsProductToProductApiResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_get_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_get_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/{productId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsProductToProductApiResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_product(self, body, product_id, **kwargs):  # noqa: E501
        """product_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_product(body, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsProductFromProductApiEditModel body: (required)
        :param int product_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_product_with_http_info(body, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_product_with_http_info(body, product_id, **kwargs)  # noqa: E501
            return data

    def product_product_with_http_info(self, body, product_id, **kwargs):  # noqa: E501
        """product_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_product_with_http_info(body, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsProductFromProductApiEditModel body: (required)
        :param int product_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_description' in params:
            form_params.append(('ProductDescription', params['product_description']))  # noqa: E501
        if 'category_id' in params:
            form_params.append(('CategoryId', params['category_id']))  # noqa: E501
        if 'manufacturer_id' in params:
            form_params.append(('ManufacturerId', params['manufacturer_id']))  # noqa: E501
        if 'parent_product_id' in params:
            form_params.append(('ParentProductId', params['parent_product_id']))  # noqa: E501
        if 'product_name' in params:
            form_params.append(('ProductName', params['product_name']))  # noqa: E501
        if 'manufacturer_part_number' in params:
            form_params.append(('ManufacturerPartNumber', params['manufacturer_part_number']))  # noqa: E501
        if 'is_family' in params:
            form_params.append(('IsFamily', params['is_family']))  # noqa: E501
        if 'is_discontinued' in params:
            form_params.append(('IsDiscontinued', params['is_discontinued']))  # noqa: E501
        if 'is_stock_item' in params:
            form_params.append(('IsStockItem', params['is_stock_item']))  # noqa: E501
        if 'unit_sale_price' in params:
            form_params.append(('UnitSalePrice', params['unit_sale_price']))  # noqa: E501
        if 'supplier_information' in params:
            form_params.append(('SupplierInformation', params['supplier_information']))  # noqa: E501
        if 'quantity_on_hand' in params:
            form_params.append(('QuantityOnHand', params['quantity_on_hand']))  # noqa: E501
        if 'product_code' in params:
            form_params.append(('ProductCode', params['product_code']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/{productId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_product(self, product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, **kwargs):  # noqa: E501
        """product_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_product(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_description: (required)
        :param int category_id: (required)
        :param int manufacturer_id: (required)
        :param int parent_product_id: (required)
        :param str product_name: (required)
        :param str manufacturer_part_number: (required)
        :param bool is_family: (required)
        :param bool is_discontinued: (required)
        :param bool is_stock_item: (required)
        :param float unit_sale_price: (required)
        :param str supplier_information: (required)
        :param int quantity_on_hand: (required)
        :param str product_code: (required)
        :param int product_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, **kwargs)  # noqa: E501
        else:
            (data) = self.product_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, **kwargs)  # noqa: E501
            return data

    def product_product_with_http_info(self, product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, **kwargs):  # noqa: E501
        """product_product  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_product_with_http_info(product_description, category_id, manufacturer_id, parent_product_id, product_name, manufacturer_part_number, is_family, is_discontinued, is_stock_item, unit_sale_price, supplier_information, quantity_on_hand, product_code, product_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str product_description: (required)
        :param int category_id: (required)
        :param int manufacturer_id: (required)
        :param int parent_product_id: (required)
        :param str product_name: (required)
        :param str manufacturer_part_number: (required)
        :param bool is_family: (required)
        :param bool is_discontinued: (required)
        :param bool is_stock_item: (required)
        :param float unit_sale_price: (required)
        :param str supplier_information: (required)
        :param int quantity_on_hand: (required)
        :param str product_code: (required)
        :param int product_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['product_description', 'category_id', 'manufacturer_id', 'parent_product_id', 'product_name', 'manufacturer_part_number', 'is_family', 'is_discontinued', 'is_stock_item', 'unit_sale_price', 'supplier_information', 'quantity_on_hand', 'product_code', 'product_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_product" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'product_description' is set
        if ('product_description' not in params or
                params['product_description'] is None):
            raise ValueError("Missing the required parameter `product_description` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'category_id' is set
        if ('category_id' not in params or
                params['category_id'] is None):
            raise ValueError("Missing the required parameter `category_id` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'manufacturer_id' is set
        if ('manufacturer_id' not in params or
                params['manufacturer_id'] is None):
            raise ValueError("Missing the required parameter `manufacturer_id` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'parent_product_id' is set
        if ('parent_product_id' not in params or
                params['parent_product_id'] is None):
            raise ValueError("Missing the required parameter `parent_product_id` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'product_name' is set
        if ('product_name' not in params or
                params['product_name'] is None):
            raise ValueError("Missing the required parameter `product_name` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'manufacturer_part_number' is set
        if ('manufacturer_part_number' not in params or
                params['manufacturer_part_number'] is None):
            raise ValueError("Missing the required parameter `manufacturer_part_number` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'is_family' is set
        if ('is_family' not in params or
                params['is_family'] is None):
            raise ValueError("Missing the required parameter `is_family` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'is_discontinued' is set
        if ('is_discontinued' not in params or
                params['is_discontinued'] is None):
            raise ValueError("Missing the required parameter `is_discontinued` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'is_stock_item' is set
        if ('is_stock_item' not in params or
                params['is_stock_item'] is None):
            raise ValueError("Missing the required parameter `is_stock_item` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'unit_sale_price' is set
        if ('unit_sale_price' not in params or
                params['unit_sale_price'] is None):
            raise ValueError("Missing the required parameter `unit_sale_price` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'supplier_information' is set
        if ('supplier_information' not in params or
                params['supplier_information'] is None):
            raise ValueError("Missing the required parameter `supplier_information` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'quantity_on_hand' is set
        if ('quantity_on_hand' not in params or
                params['quantity_on_hand'] is None):
            raise ValueError("Missing the required parameter `quantity_on_hand` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'product_code' is set
        if ('product_code' not in params or
                params['product_code'] is None):
            raise ValueError("Missing the required parameter `product_code` when calling `product_product`")  # noqa: E501
        # verify the required parameter 'product_id' is set
        if ('product_id' not in params or
                params['product_id'] is None):
            raise ValueError("Missing the required parameter `product_id` when calling `product_product`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'product_id' in params:
            path_params['productId'] = params['product_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'product_description' in params:
            form_params.append(('ProductDescription', params['product_description']))  # noqa: E501
        if 'category_id' in params:
            form_params.append(('CategoryId', params['category_id']))  # noqa: E501
        if 'manufacturer_id' in params:
            form_params.append(('ManufacturerId', params['manufacturer_id']))  # noqa: E501
        if 'parent_product_id' in params:
            form_params.append(('ParentProductId', params['parent_product_id']))  # noqa: E501
        if 'product_name' in params:
            form_params.append(('ProductName', params['product_name']))  # noqa: E501
        if 'manufacturer_part_number' in params:
            form_params.append(('ManufacturerPartNumber', params['manufacturer_part_number']))  # noqa: E501
        if 'is_family' in params:
            form_params.append(('IsFamily', params['is_family']))  # noqa: E501
        if 'is_discontinued' in params:
            form_params.append(('IsDiscontinued', params['is_discontinued']))  # noqa: E501
        if 'is_stock_item' in params:
            form_params.append(('IsStockItem', params['is_stock_item']))  # noqa: E501
        if 'unit_sale_price' in params:
            form_params.append(('UnitSalePrice', params['unit_sale_price']))  # noqa: E501
        if 'supplier_information' in params:
            form_params.append(('SupplierInformation', params['supplier_information']))  # noqa: E501
        if 'quantity_on_hand' in params:
            form_params.append(('QuantityOnHand', params['quantity_on_hand']))  # noqa: E501
        if 'product_code' in params:
            form_params.append(('ProductCode', params['product_code']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/{productId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def product_put_inventory_count(self, body, **kwargs):  # noqa: E501
        """product_put_inventory_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_put_inventory_count(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsInventoryFromInventoryCountModel] body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.product_put_inventory_count_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.product_put_inventory_count_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def product_put_inventory_count_with_http_info(self, body, **kwargs):  # noqa: E501
        """product_put_inventory_count  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.product_put_inventory_count_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param list[QualerApiModelsInventoryFromInventoryCountModel] body: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method product_put_inventory_count" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `product_put_inventory_count`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/products/inventorycount', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
