# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ServiceOrderPaymentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def service_order_payments_change_work_order_payment_status(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_change_work_order_payment_status(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromUpdatePaymentStatusModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_change_work_order_payment_status_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_change_work_order_payment_status_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_change_work_order_payment_status_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_change_work_order_payment_status_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromUpdatePaymentStatusModel body: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_change_work_order_payment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_payments_change_work_order_payment_status`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_payments_change_work_order_payment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payment_status' in params:
            form_params.append(('PaymentStatus', params['payment_status']))  # noqa: E501
        if 'invoiced_on' in params:
            form_params.append(('InvoicedOn', params['invoiced_on']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_payments_change_work_order_payment_status(self, payment_status, invoiced_on, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_change_work_order_payment_status(payment_status, invoiced_on, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_status: (required)
        :param datetime invoiced_on: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_change_work_order_payment_status_with_http_info(payment_status, invoiced_on, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_change_work_order_payment_status_with_http_info(payment_status, invoiced_on, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_change_work_order_payment_status_with_http_info(self, payment_status, invoiced_on, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_change_work_order_payment_status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_change_work_order_payment_status_with_http_info(payment_status, invoiced_on, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_status: (required)
        :param datetime invoiced_on: (required)
        :param int service_order_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_status', 'invoiced_on', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_change_work_order_payment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_status' is set
        if ('payment_status' not in params or
                params['payment_status'] is None):
            raise ValueError("Missing the required parameter `payment_status` when calling `service_order_payments_change_work_order_payment_status`")  # noqa: E501
        # verify the required parameter 'invoiced_on' is set
        if ('invoiced_on' not in params or
                params['invoiced_on'] is None):
            raise ValueError("Missing the required parameter `invoiced_on` when calling `service_order_payments_change_work_order_payment_status`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_payments_change_work_order_payment_status`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payment_status' in params:
            form_params.append(('PaymentStatus', params['payment_status']))  # noqa: E501
        if 'invoiced_on' in params:
            form_params.append(('InvoicedOn', params['invoiced_on']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments/status', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_payments_create_work_order_payment(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_create_work_order_payment(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromAddPaymentModel body: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_create_work_order_payment_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_create_work_order_payment_with_http_info(body, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_create_work_order_payment_with_http_info(self, body, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_create_work_order_payment_with_http_info(body, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsServiceOrdersFromAddPaymentModel body: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_create_work_order_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payment_type' in params:
            form_params.append(('PaymentType', params['payment_type']))  # noqa: E501
        if 'payment_amount' in params:
            form_params.append(('PaymentAmount', params['payment_amount']))  # noqa: E501
        if 'details' in params:
            form_params.append(('Details', params['details']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_payments_create_work_order_payment(self, payment_type, payment_amount, details, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_create_work_order_payment(payment_type, payment_amount, details, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_type: (required)
        :param float payment_amount: (required)
        :param str details: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_create_work_order_payment_with_http_info(payment_type, payment_amount, details, service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_create_work_order_payment_with_http_info(payment_type, payment_amount, details, service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_create_work_order_payment_with_http_info(self, payment_type, payment_amount, details, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_create_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_create_work_order_payment_with_http_info(payment_type, payment_amount, details, service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str payment_type: (required)
        :param float payment_amount: (required)
        :param str details: (required)
        :param int service_order_id: (required)
        :return: QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['payment_type', 'payment_amount', 'details', 'service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_create_work_order_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'payment_type' is set
        if ('payment_type' not in params or
                params['payment_type'] is None):
            raise ValueError("Missing the required parameter `payment_type` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501
        # verify the required parameter 'payment_amount' is set
        if ('payment_amount' not in params or
                params['payment_amount'] is None):
            raise ValueError("Missing the required parameter `payment_amount` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501
        # verify the required parameter 'details' is set
        if ('details' not in params or
                params['details'] is None):
            raise ValueError("Missing the required parameter `details` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_payments_create_work_order_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'payment_type' in params:
            form_params.append(('PaymentType', params['payment_type']))  # noqa: E501
        if 'payment_amount' in params:
            form_params.append(('PaymentAmount', params['payment_amount']))  # noqa: E501
        if 'details' in params:
            form_params.append(('Details', params['details']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToCreatedWorkOrderPaymentResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_payments_get_all_work_order_payments(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_get_all_work_order_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_get_all_work_order_payments(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToPaymentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_get_all_work_order_payments_with_http_info(service_order_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_get_all_work_order_payments_with_http_info(service_order_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_get_all_work_order_payments_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """service_order_payments_get_all_work_order_payments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_get_all_work_order_payments_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToPaymentResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_get_all_work_order_payments" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_id' is set
        if ('service_order_id' not in params or
                params['service_order_id'] is None):
            raise ValueError("Missing the required parameter `service_order_id` when calling `service_order_payments_get_all_work_order_payments`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_id' in params:
            path_params['serviceOrderId'] = params['service_order_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/{serviceOrderId}/payments', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsServiceOrdersToPaymentResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def service_order_payments_get_work_order_payment(self, service_order_payment_id, **kwargs):  # noqa: E501
        """service_order_payments_get_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_get_work_order_payment(service_order_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_payment_id: (required)
        :return: QualerApiModelsServiceOrdersToPaymentResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.service_order_payments_get_work_order_payment_with_http_info(service_order_payment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.service_order_payments_get_work_order_payment_with_http_info(service_order_payment_id, **kwargs)  # noqa: E501
            return data

    def service_order_payments_get_work_order_payment_with_http_info(self, service_order_payment_id, **kwargs):  # noqa: E501
        """service_order_payments_get_work_order_payment  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.service_order_payments_get_work_order_payment_with_http_info(service_order_payment_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_payment_id: (required)
        :return: QualerApiModelsServiceOrdersToPaymentResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['service_order_payment_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method service_order_payments_get_work_order_payment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'service_order_payment_id' is set
        if ('service_order_payment_id' not in params or
                params['service_order_payment_id'] is None):
            raise ValueError("Missing the required parameter `service_order_payment_id` when calling `service_order_payments_get_work_order_payment`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'service_order_payment_id' in params:
            path_params['serviceOrderPaymentId'] = params['service_order_payment_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/service/workorders/payments/{serviceOrderPaymentId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsServiceOrdersToPaymentResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
