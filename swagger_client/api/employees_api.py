# coding: utf-8

"""
    Qualer.Web.Mvc

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EmployeesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def employees_add_employee_department(self, body, employee_id, **kwargs):  # noqa: E501
        """employees_add_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_add_employee_department(body, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeDepartmentModel body: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_add_employee_department_with_http_info(body, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_add_employee_department_with_http_info(body, employee_id, **kwargs)  # noqa: E501
            return data

    def employees_add_employee_department_with_http_info(self, body, employee_id, **kwargs):  # noqa: E501
        """employees_add_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_add_employee_department_with_http_info(body, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeDepartmentModel body: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_add_employee_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `employees_add_employee_department`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_add_employee_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'department_id' in params:
            form_params.append(('DepartmentId', params['department_id']))  # noqa: E501
        if 'position' in params:
            form_params.append(('Position', params['position']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}/department', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_add_employee_department(self, department_id, position, employee_id, **kwargs):  # noqa: E501
        """employees_add_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_add_employee_department(department_id, position, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int department_id: (required)
        :param str position: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_add_employee_department_with_http_info(department_id, position, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_add_employee_department_with_http_info(department_id, position, employee_id, **kwargs)  # noqa: E501
            return data

    def employees_add_employee_department_with_http_info(self, department_id, position, employee_id, **kwargs):  # noqa: E501
        """employees_add_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_add_employee_department_with_http_info(department_id, position, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int department_id: (required)
        :param str position: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['department_id', 'position', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_add_employee_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'department_id' is set
        if ('department_id' not in params or
                params['department_id'] is None):
            raise ValueError("Missing the required parameter `department_id` when calling `employees_add_employee_department`")  # noqa: E501
        # verify the required parameter 'position' is set
        if ('position' not in params or
                params['position'] is None):
            raise ValueError("Missing the required parameter `position` when calling `employees_add_employee_department`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_add_employee_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'department_id' in params:
            form_params.append(('DepartmentId', params['department_id']))  # noqa: E501
        if 'position' in params:
            form_params.append(('Position', params['position']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}/department', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_create_employee(self, body, **kwargs):  # noqa: E501
        """Create Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_create_employee(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromCreateEmployeeModel body: (required)
        :return: QualerApiModelsEmployeesToCreatedEmployeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_create_employee_with_http_info(body, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_create_employee_with_http_info(body, **kwargs)  # noqa: E501
            return data

    def employees_create_employee_with_http_info(self, body, **kwargs):  # noqa: E501
        """Create Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_create_employee_with_http_info(body, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromCreateEmployeeModel body: (required)
        :return: QualerApiModelsEmployeesToCreatedEmployeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_create_employee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `employees_create_employee`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'login_email' in params:
            form_params.append(('LoginEmail', params['login_email']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'first_name' in params:
            form_params.append(('FirstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LastName', params['last_name']))  # noqa: E501
        if 'subscription_email' in params:
            form_params.append(('SubscriptionEmail', params['subscription_email']))  # noqa: E501
        if 'mobile_phone' in params:
            form_params.append(('MobilePhone', params['mobile_phone']))  # noqa: E501
        if 'office_phone' in params:
            form_params.append(('OfficePhone', params['office_phone']))  # noqa: E501
        if 'alias' in params:
            form_params.append(('Alias', params['alias']))  # noqa: E501
        if 'title' in params:
            form_params.append(('Title', params['title']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'culture_ui_name' in params:
            form_params.append(('CultureUiName', params['culture_ui_name']))  # noqa: E501
        if 'image_url' in params:
            form_params.append(('ImageUrl', params['image_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsEmployeesToCreatedEmployeeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_create_employee(self, login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, **kwargs):  # noqa: E501
        """Create Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_create_employee(login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login_email: (required)
        :param str password: (required)
        :param str first_name: (required)
        :param str last_name: (required)
        :param str subscription_email: (required)
        :param str mobile_phone: (required)
        :param str office_phone: (required)
        :param str alias: (required)
        :param str title: (required)
        :param str culture_name: (required)
        :param str culture_ui_name: (required)
        :param str image_url: (required)
        :return: QualerApiModelsEmployeesToCreatedEmployeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_create_employee_with_http_info(login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_create_employee_with_http_info(login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, **kwargs)  # noqa: E501
            return data

    def employees_create_employee_with_http_info(self, login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, **kwargs):  # noqa: E501
        """Create Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_create_employee_with_http_info(login_email, password, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str login_email: (required)
        :param str password: (required)
        :param str first_name: (required)
        :param str last_name: (required)
        :param str subscription_email: (required)
        :param str mobile_phone: (required)
        :param str office_phone: (required)
        :param str alias: (required)
        :param str title: (required)
        :param str culture_name: (required)
        :param str culture_ui_name: (required)
        :param str image_url: (required)
        :return: QualerApiModelsEmployeesToCreatedEmployeeResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['login_email', 'password', 'first_name', 'last_name', 'subscription_email', 'mobile_phone', 'office_phone', 'alias', 'title', 'culture_name', 'culture_ui_name', 'image_url']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_create_employee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'login_email' is set
        if ('login_email' not in params or
                params['login_email'] is None):
            raise ValueError("Missing the required parameter `login_email` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'password' is set
        if ('password' not in params or
                params['password'] is None):
            raise ValueError("Missing the required parameter `password` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params or
                params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params or
                params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'subscription_email' is set
        if ('subscription_email' not in params or
                params['subscription_email'] is None):
            raise ValueError("Missing the required parameter `subscription_email` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'mobile_phone' is set
        if ('mobile_phone' not in params or
                params['mobile_phone'] is None):
            raise ValueError("Missing the required parameter `mobile_phone` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'office_phone' is set
        if ('office_phone' not in params or
                params['office_phone'] is None):
            raise ValueError("Missing the required parameter `office_phone` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'culture_name' is set
        if ('culture_name' not in params or
                params['culture_name'] is None):
            raise ValueError("Missing the required parameter `culture_name` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'culture_ui_name' is set
        if ('culture_ui_name' not in params or
                params['culture_ui_name'] is None):
            raise ValueError("Missing the required parameter `culture_ui_name` when calling `employees_create_employee`")  # noqa: E501
        # verify the required parameter 'image_url' is set
        if ('image_url' not in params or
                params['image_url'] is None):
            raise ValueError("Missing the required parameter `image_url` when calling `employees_create_employee`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'login_email' in params:
            form_params.append(('LoginEmail', params['login_email']))  # noqa: E501
        if 'password' in params:
            form_params.append(('Password', params['password']))  # noqa: E501
        if 'first_name' in params:
            form_params.append(('FirstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LastName', params['last_name']))  # noqa: E501
        if 'subscription_email' in params:
            form_params.append(('SubscriptionEmail', params['subscription_email']))  # noqa: E501
        if 'mobile_phone' in params:
            form_params.append(('MobilePhone', params['mobile_phone']))  # noqa: E501
        if 'office_phone' in params:
            form_params.append(('OfficePhone', params['office_phone']))  # noqa: E501
        if 'alias' in params:
            form_params.append(('Alias', params['alias']))  # noqa: E501
        if 'title' in params:
            form_params.append(('Title', params['title']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'culture_ui_name' in params:
            form_params.append(('CultureUiName', params['culture_ui_name']))  # noqa: E501
        if 'image_url' in params:
            form_params.append(('ImageUrl', params['image_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsEmployeesToCreatedEmployeeResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_delete_employee_department(self, employee_id, department_id, **kwargs):  # noqa: E501
        """employees_delete_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_delete_employee_department(employee_id, department_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :param int department_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_delete_employee_department_with_http_info(employee_id, department_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_delete_employee_department_with_http_info(employee_id, department_id, **kwargs)  # noqa: E501
            return data

    def employees_delete_employee_department_with_http_info(self, employee_id, department_id, **kwargs):  # noqa: E501
        """employees_delete_employee_department  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_delete_employee_department_with_http_info(employee_id, department_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :param int department_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_id', 'department_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_delete_employee_department" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_delete_employee_department`")  # noqa: E501
        # verify the required parameter 'department_id' is set
        if ('department_id' not in params or
                params['department_id'] is None):
            raise ValueError("Missing the required parameter `department_id` when calling `employees_delete_employee_department`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501
        if 'department_id' in params:
            path_params['departmentId'] = params['department_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}/department/{departmentId}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_get_employee(self, employee_id, **kwargs):  # noqa: E501
        """employees_get_employee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_get_employee(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :return: QualerApiModelsClientsToEmployeeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_get_employee_with_http_info(employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_get_employee_with_http_info(employee_id, **kwargs)  # noqa: E501
            return data

    def employees_get_employee_with_http_info(self, employee_id, **kwargs):  # noqa: E501
        """employees_get_employee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_get_employee_with_http_info(employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int employee_id: (required)
        :return: QualerApiModelsClientsToEmployeeResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_get_employee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_get_employee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='QualerApiModelsClientsToEmployeeResponseModel',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_get_employees(self, **kwargs):  # noqa: E501
        """employees_get_employees  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_get_employees(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_search_string:
        :return: list[QualerApiModelsClientsToEmployeeResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_get_employees_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.employees_get_employees_with_http_info(**kwargs)  # noqa: E501
            return data

    def employees_get_employees_with_http_info(self, **kwargs):  # noqa: E501
        """employees_get_employees  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_get_employees_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str model_search_string:
        :return: list[QualerApiModelsClientsToEmployeeResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['model_search_string']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_get_employees" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'model_search_string' in params:
            query_params.append(('model.searchString', params['model_search_string']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='list[QualerApiModelsClientsToEmployeeResponseModel]',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_update_employee(self, body, employee_id, **kwargs):  # noqa: E501
        """Update Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_update_employee(body, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromUpdateEmployeeModel body: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_update_employee_with_http_info(body, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_update_employee_with_http_info(body, employee_id, **kwargs)  # noqa: E501
            return data

    def employees_update_employee_with_http_info(self, body, employee_id, **kwargs):  # noqa: E501
        """Update Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_update_employee_with_http_info(body, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromUpdateEmployeeModel body: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_update_employee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'body' is set
        if ('body' not in params or
                params['body'] is None):
            raise ValueError("Missing the required parameter `body` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_update_employee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'first_name' in params:
            form_params.append(('FirstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LastName', params['last_name']))  # noqa: E501
        if 'subscription_email' in params:
            form_params.append(('SubscriptionEmail', params['subscription_email']))  # noqa: E501
        if 'mobile_phone' in params:
            form_params.append(('MobilePhone', params['mobile_phone']))  # noqa: E501
        if 'office_phone' in params:
            form_params.append(('OfficePhone', params['office_phone']))  # noqa: E501
        if 'alias' in params:
            form_params.append(('Alias', params['alias']))  # noqa: E501
        if 'title' in params:
            form_params.append(('Title', params['title']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'culture_ui_name' in params:
            form_params.append(('CultureUiName', params['culture_ui_name']))  # noqa: E501
        if 'image_url' in params:
            form_params.append(('ImageUrl', params['image_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def employees_update_employee(self, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, **kwargs):  # noqa: E501
        """Update Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_update_employee(first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str subscription_email: (required)
        :param str mobile_phone: (required)
        :param str office_phone: (required)
        :param str alias: (required)
        :param str title: (required)
        :param str culture_name: (required)
        :param str culture_ui_name: (required)
        :param str image_url: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.employees_update_employee_with_http_info(first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, **kwargs)  # noqa: E501
        else:
            (data) = self.employees_update_employee_with_http_info(first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, **kwargs)  # noqa: E501
            return data

    def employees_update_employee_with_http_info(self, first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, **kwargs):  # noqa: E501
        """Update Employee  # noqa: E501

        CultureName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\".<br />  CultureUiName examples: \"en-US\", \"en-AU\" , \"de-DE\", \"es-ES\"<br />  List of culture codes: GET /api/common/culturelist\"  List of UI culture codes: GET /api/common/cultureuilist\"  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.employees_update_employee_with_http_info(first_name, last_name, subscription_email, mobile_phone, office_phone, alias, title, culture_name, culture_ui_name, image_url, employee_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str first_name: (required)
        :param str last_name: (required)
        :param str subscription_email: (required)
        :param str mobile_phone: (required)
        :param str office_phone: (required)
        :param str alias: (required)
        :param str title: (required)
        :param str culture_name: (required)
        :param str culture_ui_name: (required)
        :param str image_url: (required)
        :param int employee_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['first_name', 'last_name', 'subscription_email', 'mobile_phone', 'office_phone', 'alias', 'title', 'culture_name', 'culture_ui_name', 'image_url', 'employee_id']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method employees_update_employee" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'first_name' is set
        if ('first_name' not in params or
                params['first_name'] is None):
            raise ValueError("Missing the required parameter `first_name` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'last_name' is set
        if ('last_name' not in params or
                params['last_name'] is None):
            raise ValueError("Missing the required parameter `last_name` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'subscription_email' is set
        if ('subscription_email' not in params or
                params['subscription_email'] is None):
            raise ValueError("Missing the required parameter `subscription_email` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'mobile_phone' is set
        if ('mobile_phone' not in params or
                params['mobile_phone'] is None):
            raise ValueError("Missing the required parameter `mobile_phone` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'office_phone' is set
        if ('office_phone' not in params or
                params['office_phone'] is None):
            raise ValueError("Missing the required parameter `office_phone` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'alias' is set
        if ('alias' not in params or
                params['alias'] is None):
            raise ValueError("Missing the required parameter `alias` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'title' is set
        if ('title' not in params or
                params['title'] is None):
            raise ValueError("Missing the required parameter `title` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'culture_name' is set
        if ('culture_name' not in params or
                params['culture_name'] is None):
            raise ValueError("Missing the required parameter `culture_name` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'culture_ui_name' is set
        if ('culture_ui_name' not in params or
                params['culture_ui_name'] is None):
            raise ValueError("Missing the required parameter `culture_ui_name` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'image_url' is set
        if ('image_url' not in params or
                params['image_url'] is None):
            raise ValueError("Missing the required parameter `image_url` when calling `employees_update_employee`")  # noqa: E501
        # verify the required parameter 'employee_id' is set
        if ('employee_id' not in params or
                params['employee_id'] is None):
            raise ValueError("Missing the required parameter `employee_id` when calling `employees_update_employee`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'employee_id' in params:
            path_params['employeeId'] = params['employee_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'first_name' in params:
            form_params.append(('FirstName', params['first_name']))  # noqa: E501
        if 'last_name' in params:
            form_params.append(('LastName', params['last_name']))  # noqa: E501
        if 'subscription_email' in params:
            form_params.append(('SubscriptionEmail', params['subscription_email']))  # noqa: E501
        if 'mobile_phone' in params:
            form_params.append(('MobilePhone', params['mobile_phone']))  # noqa: E501
        if 'office_phone' in params:
            form_params.append(('OfficePhone', params['office_phone']))  # noqa: E501
        if 'alias' in params:
            form_params.append(('Alias', params['alias']))  # noqa: E501
        if 'title' in params:
            form_params.append(('Title', params['title']))  # noqa: E501
        if 'culture_name' in params:
            form_params.append(('CultureName', params['culture_name']))  # noqa: E501
        if 'culture_ui_name' in params:
            form_params.append(('CultureUiName', params['culture_ui_name']))  # noqa: E501
        if 'image_url' in params:
            form_params.append(('ImageUrl', params['image_url']))  # noqa: E501

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'text/json', 'application/xml', 'text/xml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/employees/{employeeId}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
