# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsReportDatasetsToReferenceStandardResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToReferenceStandardResponse
    """  # noqa: E501

    is_auxiliary: Optional[StrictBool] = Field(default=None, alias="IsAuxiliary")
    last_service_date: Optional[datetime] = Field(default=None, alias="LastServiceDate")
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    certificate_number: Optional[StrictStr] = Field(
        default=None, alias="CertificateNumber"
    )
    calibrated_by: Optional[StrictStr] = Field(default=None, alias="CalibratedBy")
    tool_name: Optional[StrictStr] = Field(default=None, alias="ToolName")
    tool_site: Optional[StrictStr] = Field(default=None, alias="ToolSite")
    tool_room: Optional[StrictStr] = Field(default=None, alias="ToolRoom")
    tool_station: Optional[StrictStr] = Field(default=None, alias="ToolStation")
    tool_location: Optional[StrictStr] = Field(default=None, alias="ToolLocation")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    lot_number: Optional[StrictStr] = Field(default=None, alias="LotNumber")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    tool_type_name: Optional[StrictStr] = Field(default=None, alias="ToolTypeName")
    tool_description: Optional[StrictStr] = Field(default=None, alias="ToolDescription")
    tool_id: Optional[StrictInt] = Field(default=None, alias="ToolId")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    area: Optional[StrictStr] = Field(default=None, alias="Area")
    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerPartNumber"
    )
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    __properties: ClassVar[List[str]] = [
        "IsAuxiliary",
        "LastServiceDate",
        "NextServiceDate",
        "CertificateNumber",
        "CalibratedBy",
        "ToolName",
        "ToolSite",
        "ToolRoom",
        "ToolStation",
        "ToolLocation",
        "AssetTag",
        "LotNumber",
        "AssetUser",
        "ToolTypeName",
        "ToolDescription",
        "ToolId",
        "Manufacturer",
        "SerialNumber",
        "Area",
        "ServiceOrderItemId",
        "ManufacturerPartNumber",
        "EquipmentId",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToReferenceStandardResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "lot_number",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToReferenceStandardResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "IsAuxiliary": obj.get("IsAuxiliary"),
                "LastServiceDate": obj.get("LastServiceDate"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "CertificateNumber": obj.get("CertificateNumber"),
                "CalibratedBy": obj.get("CalibratedBy"),
                "ToolName": obj.get("ToolName"),
                "ToolSite": obj.get("ToolSite"),
                "ToolRoom": obj.get("ToolRoom"),
                "ToolStation": obj.get("ToolStation"),
                "ToolLocation": obj.get("ToolLocation"),
                "AssetTag": obj.get("AssetTag"),
                "LotNumber": obj.get("LotNumber"),
                "AssetUser": obj.get("AssetUser"),
                "ToolTypeName": obj.get("ToolTypeName"),
                "ToolDescription": obj.get("ToolDescription"),
                "ToolId": obj.get("ToolId"),
                "Manufacturer": obj.get("Manufacturer"),
                "SerialNumber": obj.get("SerialNumber"),
                "Area": obj.get("Area"),
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "ManufacturerPartNumber": obj.get("ManufacturerPartNumber"),
                "EquipmentId": obj.get("EquipmentId"),
            }
        )
        return _obj
