# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse
    """  # noqa: E501

    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    previous_status_name: Optional[StrictStr] = Field(
        default=None, alias="PreviousStatusName"
    )
    selected_status_name: Optional[StrictStr] = Field(
        default=None, alias="SelectedStatusName"
    )
    explanation: Optional[StrictStr] = Field(default=None, alias="Explanation")
    is_password_reentered: Optional[StrictBool] = Field(
        default=None, alias="IsPasswordReentered"
    )
    created_on: Optional[datetime] = Field(default=None, alias="CreatedOn")
    created_on_utc: Optional[datetime] = Field(default=None, alias="CreatedOnUtc")
    employee_id: Optional[StrictInt] = Field(default=None, alias="EmployeeId")
    first_name: Optional[StrictStr] = Field(default=None, alias="FirstName")
    last_name: Optional[StrictStr] = Field(default=None, alias="LastName")
    alias: Optional[StrictStr] = Field(default=None, alias="Alias")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderItemId",
        "PreviousStatusName",
        "SelectedStatusName",
        "Explanation",
        "IsPasswordReentered",
        "CreatedOn",
        "CreatedOnUtc",
        "EmployeeId",
        "FirstName",
        "LastName",
        "Alias",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemStatusHistoryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "PreviousStatusName": obj.get("PreviousStatusName"),
                "SelectedStatusName": obj.get("SelectedStatusName"),
                "Explanation": obj.get("Explanation"),
                "IsPasswordReentered": obj.get("IsPasswordReentered"),
                "CreatedOn": obj.get("CreatedOn"),
                "CreatedOnUtc": obj.get("CreatedOnUtc"),
                "EmployeeId": obj.get("EmployeeId"),
                "FirstName": obj.get("FirstName"),
                "LastName": obj.get("LastName"),
                "Alias": obj.get("Alias"),
            }
        )
        return _obj
