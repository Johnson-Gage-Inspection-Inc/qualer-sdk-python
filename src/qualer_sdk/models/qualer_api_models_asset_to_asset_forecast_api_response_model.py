# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator


class QualerApiModelsAssetToAssetForecastApiResponseModel(BaseModel):
    """
    QualerApiModelsAssetToAssetForecastApiResponseModel
    """

    last_due_date: Optional[datetime] = Field(None, alias="LastDueDate")
    last_service_date: Optional[datetime] = Field(None, alias="LastServiceDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    next_service_task: Optional[StrictStr] = Field(None, alias="NextServiceTask")
    company_id: Optional[StrictInt] = Field(None, alias="CompanyId")
    asset_id: Optional[StrictInt] = Field(None, alias="AssetId")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    asset_status: Optional[StrictStr] = Field(None, alias="AssetStatus")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    asset_maker: Optional[StrictStr] = Field(None, alias="AssetMaker")
    location: Optional[StrictStr] = Field(None, alias="Location")
    room_number: Optional[StrictStr] = Field(None, alias="RoomNumber")
    barcode: Optional[StrictStr] = Field(None, alias="Barcode")
    legacy_identifier: Optional[StrictStr] = Field(None, alias="LegacyIdentifier")
    root_category_name: Optional[StrictStr] = Field(None, alias="RootCategoryName")
    category_name: Optional[StrictStr] = Field(None, alias="CategoryName")
    var_class: Optional[StrictStr] = Field(None, alias="Class")
    custodian_email: Optional[StrictStr] = Field(None, alias="CustodianEmail")
    custodian_first_name: Optional[StrictStr] = Field(None, alias="CustodianFirstName")
    custodian_last_name: Optional[StrictStr] = Field(None, alias="CustodianLastName")
    custodian_name: Optional[StrictStr] = Field(None, alias="CustodianName")
    department: Optional[StrictStr] = Field(None, alias="Department")
    station: Optional[StrictStr] = Field(None, alias="Station")
    notes: Optional[StrictStr] = Field(None, alias="Notes")
    document_number: Optional[StrictStr] = Field(None, alias="DocumentNumber")
    document_section: Optional[StrictStr] = Field(None, alias="DocumentSection")
    cumulative_service_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="CumulativeServiceCost"
    )
    product_id: Optional[StrictInt] = Field(None, alias="ProductId")
    manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="ManufacturerPartNumber"
    )
    product_name: Optional[StrictStr] = Field(None, alias="ProductName")
    product_description: Optional[StrictStr] = Field(None, alias="ProductDescription")
    product_manufacturer: Optional[StrictStr] = Field(None, alias="ProductManufacturer")
    site_name: Optional[StrictStr] = Field(None, alias="SiteName")
    site_id: Optional[StrictInt] = Field(None, alias="SiteId")
    condition: Optional[StrictStr] = Field(None, alias="Condition")
    criticality: Optional[StrictStr] = Field(None, alias="Criticality")
    pool: Optional[StrictStr] = Field(None, alias="Pool")
    purchase_date: Optional[datetime] = Field(None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PurchaseCost"
    )
    life_span_months: Optional[StrictInt] = Field(None, alias="LifeSpanMonths")
    activation_date: Optional[datetime] = Field(None, alias="ActivationDate")
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="DepreciationBasis"
    )
    depreciation_method: Optional[StrictInt] = Field(None, alias="DepreciationMethod")
    retirement_date: Optional[datetime] = Field(None, alias="RetirementDate")
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="SalvageValue"
    )
    retirment_reason: Optional[StrictStr] = Field(None, alias="RetirmentReason")
    composite_parent_id: Optional[StrictInt] = Field(None, alias="CompositeParentId")
    composite_child_count: Optional[StrictInt] = Field(
        None, alias="CompositeChildCount"
    )
    __properties = [
        "LastDueDate",
        "LastServiceDate",
        "NextServiceDate",
        "NextServiceTask",
        "CompanyId",
        "AssetId",
        "SerialNumber",
        "AssetUser",
        "AssetTag",
        "EquipmentId",
        "AssetStatus",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "Location",
        "RoomNumber",
        "Barcode",
        "LegacyIdentifier",
        "RootCategoryName",
        "CategoryName",
        "Class",
        "CustodianEmail",
        "CustodianFirstName",
        "CustodianLastName",
        "CustodianName",
        "Department",
        "Station",
        "Notes",
        "DocumentNumber",
        "DocumentSection",
        "CumulativeServiceCost",
        "ProductId",
        "ManufacturerPartNumber",
        "ProductName",
        "ProductDescription",
        "ProductManufacturer",
        "SiteName",
        "SiteId",
        "Condition",
        "Criticality",
        "Pool",
        "PurchaseDate",
        "PurchaseCost",
        "LifeSpanMonths",
        "ActivationDate",
        "DepreciationBasis",
        "DepreciationMethod",
        "RetirementDate",
        "SalvageValue",
        "RetirmentReason",
        "CompositeParentId",
        "CompositeChildCount",
    ]

    @validator("asset_status")
    def asset_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("0", "1", "2", "3", "4"):
            raise ValueError("must be one of enum values ('0', '1', '2', '3', '4')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsAssetToAssetForecastApiResponseModel:
        """Create an instance of QualerApiModelsAssetToAssetForecastApiResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "custodian_name",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsAssetToAssetForecastApiResponseModel:
        """Create an instance of QualerApiModelsAssetToAssetForecastApiResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsAssetToAssetForecastApiResponseModel.parse_obj(obj)

        _obj = QualerApiModelsAssetToAssetForecastApiResponseModel.parse_obj(
            {
                "last_due_date": obj.get("LastDueDate"),
                "last_service_date": obj.get("LastServiceDate"),
                "next_service_date": obj.get("NextServiceDate"),
                "next_service_task": obj.get("NextServiceTask"),
                "company_id": obj.get("CompanyId"),
                "asset_id": obj.get("AssetId"),
                "serial_number": obj.get("SerialNumber"),
                "asset_user": obj.get("AssetUser"),
                "asset_tag": obj.get("AssetTag"),
                "equipment_id": obj.get("EquipmentId"),
                "asset_status": obj.get("AssetStatus"),
                "asset_name": obj.get("AssetName"),
                "asset_description": obj.get("AssetDescription"),
                "asset_maker": obj.get("AssetMaker"),
                "location": obj.get("Location"),
                "room_number": obj.get("RoomNumber"),
                "barcode": obj.get("Barcode"),
                "legacy_identifier": obj.get("LegacyIdentifier"),
                "root_category_name": obj.get("RootCategoryName"),
                "category_name": obj.get("CategoryName"),
                "var_class": obj.get("Class"),
                "custodian_email": obj.get("CustodianEmail"),
                "custodian_first_name": obj.get("CustodianFirstName"),
                "custodian_last_name": obj.get("CustodianLastName"),
                "custodian_name": obj.get("CustodianName"),
                "department": obj.get("Department"),
                "station": obj.get("Station"),
                "notes": obj.get("Notes"),
                "document_number": obj.get("DocumentNumber"),
                "document_section": obj.get("DocumentSection"),
                "cumulative_service_cost": obj.get("CumulativeServiceCost"),
                "product_id": obj.get("ProductId"),
                "manufacturer_part_number": obj.get("ManufacturerPartNumber"),
                "product_name": obj.get("ProductName"),
                "product_description": obj.get("ProductDescription"),
                "product_manufacturer": obj.get("ProductManufacturer"),
                "site_name": obj.get("SiteName"),
                "site_id": obj.get("SiteId"),
                "condition": obj.get("Condition"),
                "criticality": obj.get("Criticality"),
                "pool": obj.get("Pool"),
                "purchase_date": obj.get("PurchaseDate"),
                "purchase_cost": obj.get("PurchaseCost"),
                "life_span_months": obj.get("LifeSpanMonths"),
                "activation_date": obj.get("ActivationDate"),
                "depreciation_basis": obj.get("DepreciationBasis"),
                "depreciation_method": obj.get("DepreciationMethod"),
                "retirement_date": obj.get("RetirementDate"),
                "salvage_value": obj.get("SalvageValue"),
                "retirment_reason": obj.get("RetirmentReason"),
                "composite_parent_id": obj.get("CompositeParentId"),
                "composite_child_count": obj.get("CompositeChildCount"),
            }
        )
        return _obj
