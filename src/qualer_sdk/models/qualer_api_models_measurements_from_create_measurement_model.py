# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr


class QualerApiModelsMeasurementsFromCreateMeasurementModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromCreateMeasurementModel
    """

    values: Optional[StrictStr] = Field(None, alias="Values")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Mean")
    sd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="SD")
    range: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Range")
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Delta")
    cv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="CV")
    cmc: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="CMC")
    mu: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="MU")
    tur: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TUR")
    tar: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TAR")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="MaxValue")
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="MinValue")
    error: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Error")
    result: Optional[StrictStr] = Field(None, alias="Result")
    updated_on: Optional[datetime] = Field(None, alias="UpdatedOn")
    updated_by: Optional[StrictStr] = Field(None, alias="UpdatedBy")
    __properties = [
        "Values",
        "Mean",
        "SD",
        "Range",
        "Delta",
        "CV",
        "CMC",
        "MU",
        "TUR",
        "TAR",
        "MaxValue",
        "MinValue",
        "Error",
        "Result",
        "UpdatedOn",
        "UpdatedBy",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsFromCreateMeasurementModel:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsFromCreateMeasurementModel:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsFromCreateMeasurementModel.parse_obj(obj)

        _obj = QualerApiModelsMeasurementsFromCreateMeasurementModel.parse_obj(
            {
                "values": obj.get("Values"),
                "mean": obj.get("Mean"),
                "sd": obj.get("SD"),
                "range": obj.get("Range"),
                "delta": obj.get("Delta"),
                "cv": obj.get("CV"),
                "cmc": obj.get("CMC"),
                "mu": obj.get("MU"),
                "tur": obj.get("TUR"),
                "tar": obj.get("TAR"),
                "max_value": obj.get("MaxValue"),
                "min_value": obj.get("MinValue"),
                "error": obj.get("Error"),
                "result": obj.get("Result"),
                "updated_on": obj.get("UpdatedOn"),
                "updated_by": obj.get("UpdatedBy"),
            }
        )
        return _obj
