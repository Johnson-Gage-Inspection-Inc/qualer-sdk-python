# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, conlist

from qualer_sdk.models.qualer_api_models_service_orders_to_base_work_item_model_order_item_task_price_model import (
    QualerApiModelsServiceOrdersToBaseWorkItemModelOrderItemTaskPriceModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_base_work_item_model_order_part_repair_price_model import (
    QualerApiModelsServiceOrdersToBaseWorkItemModelOrderPartRepairPriceModel,
)


class QualerApiModelsServiceOrdersToBaseWorkItemModel(BaseModel):
    """
    QualerApiModelsServiceOrdersToBaseWorkItemModel
    """

    tasks: Optional[
        conlist(QualerApiModelsServiceOrdersToBaseWorkItemModelOrderItemTaskPriceModel)
    ] = Field(None, alias="Tasks")
    parts: Optional[
        conlist(
            QualerApiModelsServiceOrdersToBaseWorkItemModelOrderPartRepairPriceModel
        )
    ] = Field(None, alias="Parts")
    repairs: Optional[
        conlist(
            QualerApiModelsServiceOrdersToBaseWorkItemModelOrderPartRepairPriceModel
        )
    ] = Field(None, alias="Repairs")
    work_item_id: Optional[StrictInt] = Field(None, alias="WorkItemId")
    vendor_tag: Optional[StrictStr] = Field(None, alias="VendorTag")
    __properties = ["Tasks", "Parts", "Repairs", "WorkItemId", "VendorTag"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsServiceOrdersToBaseWorkItemModel:
        """Create an instance of QualerApiModelsServiceOrdersToBaseWorkItemModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "tasks",
                "parts",
                "repairs",
                "work_item_id",
                "vendor_tag",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Tasks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parts (list)
        _items = []
        if self.parts:
            for _item in self.parts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Parts"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in repairs (list)
        _items = []
        if self.repairs:
            for _item in self.repairs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Repairs"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsServiceOrdersToBaseWorkItemModel:
        """Create an instance of QualerApiModelsServiceOrdersToBaseWorkItemModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsServiceOrdersToBaseWorkItemModel.parse_obj(obj)

        _obj = QualerApiModelsServiceOrdersToBaseWorkItemModel.parse_obj(
            {
                "tasks": (
                    [
                        QualerApiModelsServiceOrdersToBaseWorkItemModelOrderItemTaskPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Tasks")
                    ]
                    if obj.get("Tasks") is not None
                    else None
                ),
                "parts": (
                    [
                        QualerApiModelsServiceOrdersToBaseWorkItemModelOrderPartRepairPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Parts")
                    ]
                    if obj.get("Parts") is not None
                    else None
                ),
                "repairs": (
                    [
                        QualerApiModelsServiceOrdersToBaseWorkItemModelOrderPartRepairPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Repairs")
                    ]
                    if obj.get("Repairs") is not None
                    else None
                ),
                "work_item_id": obj.get("WorkItemId"),
                "vendor_tag": obj.get("VendorTag"),
            }
        )
        return _obj
