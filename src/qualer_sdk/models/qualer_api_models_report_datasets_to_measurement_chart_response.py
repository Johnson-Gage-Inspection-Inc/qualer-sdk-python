# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Annotated, Self


class QualerApiModelsReportDatasetsToMeasurementChartResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementChartResponse
    """  # noqa: E501

    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    measurement_set_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetId"
    )
    chart_type: Optional[StrictInt] = Field(default=None, alias="ChartType")
    chart_image: Optional[
        Union[Annotated[bytes, Field(strict=True)], Annotated[str, Field(strict=True)]]
    ] = Field(default=None, alias="ChartImage")
    nominal: Optional[StrictStr] = Field(default=None, alias="Nominal")
    title: Optional[StrictStr] = Field(default=None, alias="Title")
    unit_of_measure: Optional[StrictStr] = Field(default=None, alias="UnitOfMeasure")
    abbreviated_uom: Optional[StrictStr] = Field(default=None, alias="AbbreviatedUOM")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderItemId",
        "MeasurementSetId",
        "ChartType",
        "ChartImage",
        "Nominal",
        "Title",
        "UnitOfMeasure",
        "AbbreviatedUOM",
    ]

    @field_validator("chart_image")
    def chart_image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChartResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChartResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "MeasurementSetId": obj.get("MeasurementSetId"),
                "ChartType": obj.get("ChartType"),
                "ChartImage": obj.get("ChartImage"),
                "Nominal": obj.get("Nominal"),
                "Title": obj.get("Title"),
                "UnitOfMeasure": obj.get("UnitOfMeasure"),
                "AbbreviatedUOM": obj.get("AbbreviatedUOM"),
            }
        )
        return _obj
