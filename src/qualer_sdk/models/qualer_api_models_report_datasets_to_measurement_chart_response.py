# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictInt, StrictStr, conbytes, constr, validator


class QualerApiModelsReportDatasetsToMeasurementChartResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementChartResponse
    """

    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    measurement_set_id: Optional[StrictInt] = Field(None, alias="MeasurementSetId")
    chart_type: Optional[StrictInt] = Field(None, alias="ChartType")
    chart_image: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(
        None, alias="ChartImage"
    )
    nominal: Optional[StrictStr] = Field(None, alias="Nominal")
    title: Optional[StrictStr] = Field(None, alias="Title")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="UnitOfMeasure")
    abbreviated_uom: Optional[StrictStr] = Field(None, alias="AbbreviatedUOM")
    __properties = [
        "ServiceOrderItemId",
        "MeasurementSetId",
        "ChartType",
        "ChartImage",
        "Nominal",
        "Title",
        "UnitOfMeasure",
        "AbbreviatedUOM",
    ]

    @validator("chart_image")
    def chart_image_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToMeasurementChartResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChartResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToMeasurementChartResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChartResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToMeasurementChartResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsReportDatasetsToMeasurementChartResponse.parse_obj(
            {
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "measurement_set_id": obj.get("MeasurementSetId"),
                "chart_type": obj.get("ChartType"),
                "chart_image": obj.get("ChartImage"),
                "nominal": obj.get("Nominal"),
                "title": obj.get("Title"),
                "unit_of_measure": obj.get("UnitOfMeasure"),
                "abbreviated_uom": obj.get("AbbreviatedUOM"),
            }
        )
        return _obj
