# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_measurements_from_update_measurement_field_model import (
    QualerApiModelsMeasurementsFromUpdateMeasurementFieldModel,
)
from qualer_sdk.models.qualer_api_models_measurements_from_update_measurement_point_model import (
    QualerApiModelsMeasurementsFromUpdateMeasurementPointModel,
)


class QualerApiModelsMeasurementsFromUpdateMeasurementSetModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromUpdateMeasurementSetModel
    """  # noqa: E501

    measurement_set_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetId"
    )
    is_accredited: Optional[StrictBool] = Field(default=None, alias="IsAccredited")
    measurement_name: Optional[StrictStr] = Field(default=None, alias="MeasurementName")
    use_expected_value: Optional[StrictBool] = Field(
        default=None, alias="UseExpectedValue"
    )
    decimal_places: Optional[StrictInt] = Field(default=None, alias="DecimalPlaces")
    significant_figures: Optional[StrictInt] = Field(
        default=None, alias="SignificantFigures"
    )
    influence_parameter1_type: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter1Type"
    )
    influence_parameter1_tool_type_id: Optional[StrictInt] = Field(
        default=None, alias="InfluenceParameter1ToolTypeId"
    )
    influence_parameter1_parameter_id: Optional[StrictInt] = Field(
        default=None, alias="InfluenceParameter1ParameterId"
    )
    influence_parameter1_source: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter1Source"
    )
    influence_parameter1_value: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter1Value"
    )
    influence_parameter2_type: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter2Type"
    )
    influence_parameter2_tool_type_id: Optional[StrictInt] = Field(
        default=None, alias="InfluenceParameter2ToolTypeId"
    )
    influence_parameter2_parameter_id: Optional[StrictInt] = Field(
        default=None, alias="InfluenceParameter2ParameterId"
    )
    influence_parameter2_source: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter2Source"
    )
    influence_parameter2_value: Optional[StrictStr] = Field(
        default=None, alias="InfluenceParameter2Value"
    )
    measurement_points: Optional[
        List[QualerApiModelsMeasurementsFromUpdateMeasurementPointModel]
    ] = Field(default=None, alias="MeasurementPoints")
    measurement_fields: Optional[
        List[QualerApiModelsMeasurementsFromUpdateMeasurementFieldModel]
    ] = Field(default=None, alias="MeasurementFields")
    __properties: ClassVar[List[str]] = [
        "MeasurementSetId",
        "IsAccredited",
        "MeasurementName",
        "UseExpectedValue",
        "DecimalPlaces",
        "SignificantFigures",
        "InfluenceParameter1Type",
        "InfluenceParameter1ToolTypeId",
        "InfluenceParameter1ParameterId",
        "InfluenceParameter1Source",
        "InfluenceParameter1Value",
        "InfluenceParameter2Type",
        "InfluenceParameter2ToolTypeId",
        "InfluenceParameter2ParameterId",
        "InfluenceParameter2Source",
        "InfluenceParameter2Value",
        "MeasurementPoints",
        "MeasurementFields",
    ]

    @field_validator("influence_parameter1_type")
    def influence_parameter1_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "MeasurementQuantity",
                "StaticValue",
                "UutAttribute",
                "ToolAttribute",
                "CustomField",
                "ManuallySelected",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('MeasurementQuantity', 'StaticValue', 'UutAttribute', 'ToolAttribute', 'CustomField', 'ManuallySelected')"
            )
        return value

    @field_validator("influence_parameter2_type")
    def influence_parameter2_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "MeasurementQuantity",
                "StaticValue",
                "UutAttribute",
                "ToolAttribute",
                "CustomField",
                "ManuallySelected",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('MeasurementQuantity', 'StaticValue', 'UutAttribute', 'ToolAttribute', 'CustomField', 'ManuallySelected')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementSetModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_points (list)
        _items = []
        if self.measurement_points:
            for _item_measurement_points in self.measurement_points:
                if _item_measurement_points:
                    _items.append(_item_measurement_points.to_dict())
            _dict["MeasurementPoints"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_fields (list)
        _items = []
        if self.measurement_fields:
            for _item_measurement_fields in self.measurement_fields:
                if _item_measurement_fields:
                    _items.append(_item_measurement_fields.to_dict())
            _dict["MeasurementFields"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementSetModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "MeasurementSetId": obj.get("MeasurementSetId"),
                "IsAccredited": obj.get("IsAccredited"),
                "MeasurementName": obj.get("MeasurementName"),
                "UseExpectedValue": obj.get("UseExpectedValue"),
                "DecimalPlaces": obj.get("DecimalPlaces"),
                "SignificantFigures": obj.get("SignificantFigures"),
                "InfluenceParameter1Type": obj.get("InfluenceParameter1Type"),
                "InfluenceParameter1ToolTypeId": obj.get(
                    "InfluenceParameter1ToolTypeId"
                ),
                "InfluenceParameter1ParameterId": obj.get(
                    "InfluenceParameter1ParameterId"
                ),
                "InfluenceParameter1Source": obj.get("InfluenceParameter1Source"),
                "InfluenceParameter1Value": obj.get("InfluenceParameter1Value"),
                "InfluenceParameter2Type": obj.get("InfluenceParameter2Type"),
                "InfluenceParameter2ToolTypeId": obj.get(
                    "InfluenceParameter2ToolTypeId"
                ),
                "InfluenceParameter2ParameterId": obj.get(
                    "InfluenceParameter2ParameterId"
                ),
                "InfluenceParameter2Source": obj.get("InfluenceParameter2Source"),
                "InfluenceParameter2Value": obj.get("InfluenceParameter2Value"),
                "MeasurementPoints": (
                    [
                        QualerApiModelsMeasurementsFromUpdateMeasurementPointModel.from_dict(
                            _item
                        )
                        for _item in obj["MeasurementPoints"]
                    ]
                    if obj.get("MeasurementPoints") is not None
                    else None
                ),
                "MeasurementFields": (
                    [
                        QualerApiModelsMeasurementsFromUpdateMeasurementFieldModel.from_dict(
                            _item
                        )
                        for _item in obj["MeasurementFields"]
                    ]
                    if obj.get("MeasurementFields") is not None
                    else None
                ),
            }
        )
        return _obj
