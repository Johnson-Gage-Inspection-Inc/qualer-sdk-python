# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt
from typing_extensions import Self


class QualerApiModelsAssetToClientAssetCountersResponseModel(BaseModel):
    """
    QualerApiModelsAssetToClientAssetCountersResponseModel
    """  # noqa: E501

    client_assets_collected: Optional[StrictInt] = Field(
        default=None, alias="ClientAssetsCollected"
    )
    client_unset: Optional[StrictInt] = Field(default=None, alias="ClientUnset")
    client_due_for_service: Optional[StrictInt] = Field(
        default=None, alias="ClientDueForService"
    )
    client_past_due: Optional[StrictInt] = Field(default=None, alias="ClientPastDue")
    client_out_of_service: Optional[StrictInt] = Field(
        default=None, alias="ClientOutOfService"
    )
    client_without_schedule: Optional[StrictInt] = Field(
        default=None, alias="ClientWithoutSchedule"
    )
    __properties: ClassVar[List[str]] = [
        "ClientAssetsCollected",
        "ClientUnset",
        "ClientDueForService",
        "ClientPastDue",
        "ClientOutOfService",
        "ClientWithoutSchedule",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToClientAssetCountersResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToClientAssetCountersResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ClientAssetsCollected": obj.get("ClientAssetsCollected"),
                "ClientUnset": obj.get("ClientUnset"),
                "ClientDueForService": obj.get("ClientDueForService"),
                "ClientPastDue": obj.get("ClientPastDue"),
                "ClientOutOfService": obj.get("ClientOutOfService"),
                "ClientWithoutSchedule": obj.get("ClientWithoutSchedule"),
            }
        )
        return _obj
