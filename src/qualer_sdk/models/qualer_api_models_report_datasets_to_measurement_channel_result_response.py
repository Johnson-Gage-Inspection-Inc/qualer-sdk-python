# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator


class QualerApiModelsReportDatasetsToMeasurementChannelResultResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementChannelResultResponse
    """

    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    measurement_point_id: Optional[StrictInt] = Field(None, alias="MeasurementPointId")
    column_index: Optional[StrictInt] = Field(None, alias="ColumnIndex")
    batch_type: Optional[StrictStr] = Field(None, alias="BatchType")
    result: Optional[StrictStr] = Field(None, alias="Result")
    mean_result: Optional[StrictBool] = Field(None, alias="MeanResult")
    range_result: Optional[StrictBool] = Field(None, alias="RangeResult")
    delta_result: Optional[StrictBool] = Field(None, alias="DeltaResult")
    min_result: Optional[StrictBool] = Field(None, alias="MinResult")
    max_result: Optional[StrictBool] = Field(None, alias="MaxResult")
    tar_result: Optional[StrictBool] = Field(None, alias="TarResult")
    tur_result: Optional[StrictBool] = Field(None, alias="TurResult")
    error_result: Optional[StrictBool] = Field(None, alias="ErrorResult")
    sd_result: Optional[StrictBool] = Field(None, alias="SdResult")
    cv_result: Optional[StrictBool] = Field(None, alias="CvResult")
    __properties = [
        "ServiceOrderItemId",
        "MeasurementPointId",
        "ColumnIndex",
        "BatchType",
        "Result",
        "MeanResult",
        "RangeResult",
        "DeltaResult",
        "MinResult",
        "MaxResult",
        "TarResult",
        "TurResult",
        "ErrorResult",
        "SdResult",
        "CvResult",
    ]

    @validator("batch_type")
    def batch_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Unset", "AsFound", "AsLeft"):
            raise ValueError(
                "must be one of enum values ('Unset', 'AsFound', 'AsLeft')"
            )
        return value

    @validator("result")
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotServiced",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
            "Pending",
        ):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToMeasurementChannelResultResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChannelResultResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToMeasurementChannelResultResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChannelResultResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToMeasurementChannelResultResponse.parse_obj(
                obj
            )

        _obj = (
            QualerApiModelsReportDatasetsToMeasurementChannelResultResponse.parse_obj(
                {
                    "service_order_item_id": obj.get("ServiceOrderItemId"),
                    "measurement_point_id": obj.get("MeasurementPointId"),
                    "column_index": obj.get("ColumnIndex"),
                    "batch_type": obj.get("BatchType"),
                    "result": obj.get("Result"),
                    "mean_result": obj.get("MeanResult"),
                    "range_result": obj.get("RangeResult"),
                    "delta_result": obj.get("DeltaResult"),
                    "min_result": obj.get("MinResult"),
                    "max_result": obj.get("MaxResult"),
                    "tar_result": obj.get("TarResult"),
                    "tur_result": obj.get("TurResult"),
                    "error_result": obj.get("ErrorResult"),
                    "sd_result": obj.get("SdResult"),
                    "cv_result": obj.get("CvResult"),
                }
            )
        )
        return _obj
