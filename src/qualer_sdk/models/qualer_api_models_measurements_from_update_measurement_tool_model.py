# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class QualerApiModelsMeasurementsFromUpdateMeasurementToolModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromUpdateMeasurementToolModel
    """

    measurement_tool_id: Optional[StrictInt] = Field(None, alias="MeasurementToolId")
    tool_id: Optional[StrictInt] = Field(None, alias="ToolId")
    tool_type_name: Optional[StrictStr] = Field(None, alias="ToolTypeName")
    last_service_date: Optional[datetime] = Field(None, alias="LastServiceDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    calibrated_by: Optional[StrictStr] = Field(None, alias="CalibratedBy")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    tool_name: Optional[StrictStr] = Field(None, alias="ToolName")
    tool_description: Optional[StrictStr] = Field(None, alias="ToolDescription")
    manufacturer: Optional[StrictStr] = Field(None, alias="Manufacturer")
    manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="ManufacturerPartNumber"
    )
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    __properties = [
        "MeasurementToolId",
        "ToolId",
        "ToolTypeName",
        "LastServiceDate",
        "NextServiceDate",
        "CalibratedBy",
        "CertificateNumber",
        "ToolName",
        "ToolDescription",
        "Manufacturer",
        "ManufacturerPartNumber",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "EquipmentId",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsFromUpdateMeasurementToolModel:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementToolModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "tool_id",
                "tool_type_name",
            },
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsFromUpdateMeasurementToolModel:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementToolModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsFromUpdateMeasurementToolModel.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsFromUpdateMeasurementToolModel.parse_obj(
            {
                "measurement_tool_id": obj.get("MeasurementToolId"),
                "tool_id": obj.get("ToolId"),
                "tool_type_name": obj.get("ToolTypeName"),
                "last_service_date": obj.get("LastServiceDate"),
                "next_service_date": obj.get("NextServiceDate"),
                "calibrated_by": obj.get("CalibratedBy"),
                "certificate_number": obj.get("CertificateNumber"),
                "tool_name": obj.get("ToolName"),
                "tool_description": obj.get("ToolDescription"),
                "manufacturer": obj.get("Manufacturer"),
                "manufacturer_part_number": obj.get("ManufacturerPartNumber"),
                "serial_number": obj.get("SerialNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "equipment_id": obj.get("EquipmentId"),
            }
        )
        return _obj
