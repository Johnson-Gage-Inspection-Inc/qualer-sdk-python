# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    validator,
)


class QualerApiModelsReportDatasetsToMeasurementResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementResponse
    """

    is_accredited: Optional[StrictBool] = Field(None, alias="IsAccredited")
    service_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ServiceTotal"
    )
    repairs_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="RepairsTotal"
    )
    parts_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsTotal"
    )
    parameter_id: Optional[StrictInt] = Field(None, alias="ParameterId")
    tool_range_name: Optional[StrictStr] = Field(None, alias="ToolRangeName")
    tool_range_uncertainty: Optional[StrictStr] = Field(
        None, alias="ToolRangeUncertainty"
    )
    primary_tool_last_service_date: Optional[datetime] = Field(
        None, alias="PrimaryToolLastServiceDate"
    )
    primary_tool_next_service_date: Optional[datetime] = Field(
        None, alias="PrimaryToolNextServiceDate"
    )
    primary_tool_calibrated_by: Optional[StrictStr] = Field(
        None, alias="PrimaryToolCalibratedBy"
    )
    primary_tool_tool_name: Optional[StrictStr] = Field(
        None, alias="PrimaryToolToolName"
    )
    primary_tool_tool_description: Optional[StrictStr] = Field(
        None, alias="PrimaryToolToolDescription"
    )
    primary_tool_tool_type_name: Optional[StrictStr] = Field(
        None, alias="PrimaryToolToolTypeName"
    )
    primary_tool_manufacturer: Optional[StrictStr] = Field(
        None, alias="PrimaryToolManufacturer"
    )
    primary_tool_manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="PrimaryToolManufacturerPartNumber"
    )
    primary_tool_serial_number: Optional[StrictStr] = Field(
        None, alias="PrimaryToolSerialNumber"
    )
    secondary_tool_last_service_date: Optional[datetime] = Field(
        None, alias="SecondaryToolLastServiceDate"
    )
    secondary_tool_next_service_date: Optional[datetime] = Field(
        None, alias="SecondaryToolNextServiceDate"
    )
    secondary_tool_calibrated_by: Optional[StrictStr] = Field(
        None, alias="SecondaryToolCalibratedBy"
    )
    secondary_tool_tool_name: Optional[StrictStr] = Field(
        None, alias="SecondaryToolToolName"
    )
    secondary_tool_tool_description: Optional[StrictStr] = Field(
        None, alias="SecondaryToolToolDescription"
    )
    secondary_tool_tool_type_name: Optional[StrictStr] = Field(
        None, alias="SecondaryToolToolTypeName"
    )
    secondary_tool_manufacturer: Optional[StrictStr] = Field(
        None, alias="SecondaryToolManufacturer"
    )
    secondary_tool_manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="SecondaryToolManufacturerPartNumber"
    )
    secondary_tool_serial_number: Optional[StrictStr] = Field(
        None, alias="SecondaryToolSerialNumber"
    )
    measurement_set_name: Optional[StrictStr] = Field(None, alias="MeasurementSetName")
    decimal_places: Optional[StrictInt] = Field(None, alias="DecimalPlaces")
    significant_figures: Optional[StrictInt] = Field(None, alias="SignificantFigures")
    sd_header: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="SdHeader")
    cv_header: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="CvHeader")
    measurement_local_time: Optional[datetime] = Field(
        None, alias="MeasurementLocalTime"
    )
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Mean")
    mean_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="MeanRaw")
    mean_decimal_places: Optional[StrictInt] = Field(None, alias="MeanDecimalPlaces")
    mean_extended: Optional[StrictStr] = Field(None, alias="MeanExtended")
    sd: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Sd")
    sd_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="SdRaw")
    sd_decimal_places: Optional[StrictInt] = Field(None, alias="SDDecimalPlaces")
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Delta")
    range: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Range")
    sd_extended: Optional[StrictStr] = Field(None, alias="SdExtended")
    range_extended: Optional[StrictStr] = Field(None, alias="RangeExtended")
    delta_extended: Optional[StrictStr] = Field(None, alias="DeltaExtended")
    minimum_measured_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="MinimumMeasuredValue"
    )
    maximum_measured_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="MaximumMeasuredValue"
    )
    min_max_value_extended: Optional[StrictStr] = Field(
        None, alias="MinMaxValueExtended"
    )
    cv: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Cv")
    cv_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="CvRaw")
    cv_decimal_places: Optional[StrictInt] = Field(None, alias="CVDecimalPlaces")
    cv_extended: Optional[StrictStr] = Field(None, alias="CvExtended")
    result: Optional[StrictInt] = Field(None, alias="Result")
    range_result: Optional[StrictBool] = Field(None, alias="RangeResult")
    delta_result: Optional[StrictBool] = Field(None, alias="DeltaResult")
    min_result: Optional[StrictBool] = Field(None, alias="MinResult")
    max_result: Optional[StrictBool] = Field(None, alias="MaxResult")
    tar_result: Optional[StrictBool] = Field(None, alias="TarResult")
    tur_result: Optional[StrictBool] = Field(None, alias="TurResult")
    error_result: Optional[StrictBool] = Field(None, alias="ErrorResult")
    sd_result: Optional[StrictBool] = Field(None, alias="SdResult")
    cv_result: Optional[StrictBool] = Field(None, alias="CvResult")
    custom_field_result: Optional[StrictInt] = Field(None, alias="CustomFieldResult")
    mu: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Mu")
    mu_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="MuRaw")
    mu_effective_dof: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="MUEffectiveDOF"
    )
    mu_coverage_factor: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="MUCoverageFactor"
    )
    mu_extended: Optional[StrictStr] = Field(None, alias="MuExtended")
    cmc: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Cmc")
    cmc_comments: Optional[StrictStr] = Field(None, alias="CmcComments")
    tur: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Tur")
    tur_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TurRaw")
    tur_decimal_places: Optional[StrictInt] = Field(None, alias="TURDecimalPlaces")
    tar: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Tar")
    tar_raw: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TarRaw")
    tar_decimal_places: Optional[StrictInt] = Field(None, alias="TARDecimalPlaces")
    guard_band: Optional[StrictStr] = Field(None, alias="GuardBand")
    guard_band_logic: Optional[StrictStr] = Field(None, alias="GuardBandLogic")
    uncertainty_budget: Optional[StrictStr] = Field(None, alias="UncertaintyBudget")
    calculated_uncertainty: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="CalculatedUncertainty"
    )
    lock_uncertainty_budget: Optional[StrictBool] = Field(
        None, alias="LockUncertaintyBudget"
    )
    lab_mu: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="LabMu")
    channel: Optional[StrictInt] = Field(None, alias="Channel")
    measurement_type: Optional[StrictStr] = Field(None, alias="MeasurementType")
    updated_by: Optional[StrictStr] = Field(None, alias="UpdatedBy")
    updated_on: Optional[datetime] = Field(None, alias="UpdatedOn")
    error: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Error")
    error_extended: Optional[StrictStr] = Field(None, alias="ErrorExtended")
    require_adjustment: Optional[StrictBool] = Field(None, alias="RequireAdjustment")
    adjustment_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AdjustmentThreshold"
    )
    percent_of_tolerance: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PercentOfTolerance"
    )
    percent_of_tolerance_extended: Optional[StrictStr] = Field(
        None, alias="PercentOfToleranceExtended"
    )
    tol_decimal_places: Optional[StrictInt] = Field(None, alias="TOLDecimalPlaces")
    specification_title: Optional[StrictStr] = Field(None, alias="SpecificationTitle")
    specification_subtitle: Optional[StrictStr] = Field(
        None, alias="SpecificationSubtitle"
    )
    specification_group: Optional[StrictStr] = Field(None, alias="SpecificationGroup")
    batch_type: Optional[StrictInt] = Field(None, alias="BatchType")
    batch_result: Optional[StrictInt] = Field(None, alias="BatchResult")
    is_by_channel: Optional[StrictBool] = Field(None, alias="IsByChannel")
    channel_count: Optional[StrictInt] = Field(None, alias="ChannelCount")
    is_range_accredited: Optional[StrictBool] = Field(None, alias="IsRangeAccredited")
    commenced_on: Optional[datetime] = Field(None, alias="CommencedOn")
    commenced_by: Optional[StrictStr] = Field(None, alias="CommencedBy")
    z_factor: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="ZFactor")
    air_buoyancy: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AirBuoyancy"
    )
    evaporation_rate: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="EvaporationRate"
    )
    air_humidity: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AirHumidity"
    )
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Altitude")
    ambient_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AmbientTemperature"
    )
    barometric_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="BarometricPressure"
    )
    light_intensity: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="LightIntensity"
    )
    noise_level: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="NoiseLevel"
    )
    ph_level: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="PhLevel")
    water_conductivity: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="WaterConductivity"
    )
    water_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="WaterTemperature"
    )
    solar_radiation: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="SolarRadiation"
    )
    wind_speed: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="WindSpeed")
    z_factor_uom: Optional[StrictStr] = Field(None, alias="ZFactorUom")
    air_buoyancy_uom: Optional[StrictStr] = Field(None, alias="AirBuoyancyUom")
    evaporation_rate_uom: Optional[StrictStr] = Field(None, alias="EvaporationRateUom")
    air_humidity_uom: Optional[StrictStr] = Field(None, alias="AirHumidityUom")
    altitude_uom: Optional[StrictStr] = Field(None, alias="AltitudeUom")
    ambient_temperature_uom: Optional[StrictStr] = Field(
        None, alias="AmbientTemperatureUom"
    )
    barometric_pressure_uom: Optional[StrictStr] = Field(
        None, alias="BarometricPressureUom"
    )
    light_intensity_uom: Optional[StrictStr] = Field(None, alias="LightIntensityUom")
    noise_level_uom: Optional[StrictStr] = Field(None, alias="NoiseLevelUom")
    ph_level_uom: Optional[StrictStr] = Field(None, alias="PhLevelUom")
    water_conductivity_uom: Optional[StrictStr] = Field(
        None, alias="WaterConductivityUom"
    )
    water_temperature_uom: Optional[StrictStr] = Field(
        None, alias="WaterTemperatureUom"
    )
    solar_radiation_uom: Optional[StrictStr] = Field(None, alias="SolarRadiationUom")
    wind_speed_uom: Optional[StrictStr] = Field(None, alias="WindSpeedUom")
    specification_name: Optional[StrictStr] = Field(None, alias="SpecificationName")
    parameter_name: Optional[StrictStr] = Field(None, alias="ParameterName")
    measurement_set_display_order: Optional[StrictInt] = Field(
        None, alias="MeasurementSetDisplayOrder"
    )
    display_order: Optional[StrictInt] = Field(None, alias="DisplayOrder")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="UnitOfMeasure")
    display_format: Optional[StrictStr] = Field(None, alias="DisplayFormat")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Precision")
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Minimum")
    nominal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Nominal")
    expected_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ExpectedValue"
    )
    expected_value_raw: Optional[StrictStr] = Field(None, alias="ExpectedValueRaw")
    test_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TestValue")
    base_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="BaseValue")
    use_expected_value: Optional[StrictBool] = Field(None, alias="UseExpectedValue")
    reading_entry_logic: Optional[StrictStr] = Field(None, alias="ReadingEntryLogic")
    reading_entry_math: Optional[StrictStr] = Field(None, alias="ReadingEntryMath")
    double_substitution_sequence: Optional[StrictStr] = Field(
        None, alias="DoubleSubstitutionSequence"
    )
    reading_entry_math_string: Optional[StrictStr] = Field(
        None, alias="ReadingEntryMathString"
    )
    nominal_extended: Optional[StrictStr] = Field(None, alias="NominalExtended")
    expected_value_extended: Optional[StrictStr] = Field(
        None, alias="ExpectedValueExtended"
    )
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Maximum")
    tolerance_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ToleranceMin"
    )
    tolerance_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ToleranceMax"
    )
    resolution: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="Resolution"
    )
    resolution_count: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ResolutionCount"
    )
    min_max_header: Optional[StrictStr] = Field(None, alias="MinMaxHeader")
    accuracy_class: Optional[StrictStr] = Field(None, alias="AccuracyClass")
    accuracy_class_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AccuracyClassMin"
    )
    accuracy_class_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AccuracyClassMax"
    )
    environment_mask: Optional[StrictStr] = Field(None, alias="EnvironmentMask")
    display_name: Optional[StrictStr] = Field(None, alias="DisplayName")
    display_part_number: Optional[StrictStr] = Field(None, alias="DisplayPartNumber")
    part_number: Optional[StrictStr] = Field(None, alias="PartNumber")
    vendor_company_id: Optional[StrictInt] = Field(None, alias="VendorCompanyId")
    service_order_number: Optional[StrictInt] = Field(None, alias="ServiceOrderNumber")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    completed_by_name: Optional[StrictStr] = Field(None, alias="CompletedByName")
    completed_on: Optional[datetime] = Field(None, alias="CompletedOn")
    is_limited: Optional[StrictBool] = Field(None, alias="IsLimited")
    vendor_tag: Optional[StrictStr] = Field(None, alias="VendorTag")
    vendor_service_notes: Optional[StrictStr] = Field(None, alias="VendorServiceNotes")
    room: Optional[StrictStr] = Field(None, alias="Room")
    segment_name: Optional[StrictStr] = Field(None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(None, alias="ScheduleName")
    next_segment_name: Optional[StrictStr] = Field(None, alias="NextSegmentName")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    work_status: Optional[StrictInt] = Field(None, alias="WorkStatus")
    service_type: Optional[StrictStr] = Field(None, alias="ServiceType")
    service_level: Optional[StrictStr] = Field(None, alias="ServiceLevel")
    barcode: Optional[StrictStr] = Field(None, alias="Barcode")
    service_comments: Optional[StrictStr] = Field(None, alias="ServiceComments")
    order_item_number: Optional[StrictInt] = Field(None, alias="OrderItemNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    legacy_identifier: Optional[StrictStr] = Field(None, alias="LegacyIdentifier")
    site_name: Optional[StrictStr] = Field(None, alias="SiteName")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    product_name: Optional[StrictStr] = Field(None, alias="ProductName")
    product_description: Optional[StrictStr] = Field(None, alias="ProductDescription")
    asset_maker: Optional[StrictStr] = Field(None, alias="AssetMaker")
    station: Optional[StrictStr] = Field(None, alias="Station")
    asset_tag_change: Optional[StrictStr] = Field(None, alias="AssetTagChange")
    asset_user_change: Optional[StrictStr] = Field(None, alias="AssetUserChange")
    serial_number_change: Optional[StrictStr] = Field(None, alias="SerialNumberChange")
    service_date: Optional[datetime] = Field(None, alias="ServiceDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    measurement_batch_id: Optional[StrictInt] = Field(None, alias="MeasurementBatchId")
    measurement_id: Optional[StrictInt] = Field(None, alias="MeasurementId")
    standard_id: Optional[StrictInt] = Field(None, alias="StandardId")
    tool_id: Optional[StrictInt] = Field(None, alias="ToolId")
    measurement_tool_id: Optional[StrictInt] = Field(None, alias="MeasurementToolId")
    measurement_condition_id: Optional[StrictInt] = Field(
        None, alias="MeasurementConditionId"
    )
    measurement_point_id: Optional[StrictInt] = Field(None, alias="MeasurementPointId")
    measurement_set_id: Optional[StrictInt] = Field(None, alias="MeasurementSetId")
    is_hidden: Optional[StrictBool] = Field(None, alias="IsHidden")
    readings: Optional[StrictInt] = Field(None, alias="Readings")
    tolerance_type: Optional[StrictStr] = Field(None, alias="ToleranceType")
    tolerance_type_string: Optional[StrictStr] = Field(
        None, alias="ToleranceTypeString"
    )
    precision_type: Optional[StrictStr] = Field(None, alias="PrecisionType")
    specification_mode: Optional[StrictStr] = Field(None, alias="SpecificationMode")
    tolerance_mode: Optional[StrictStr] = Field(None, alias="ToleranceMode")
    tolerance_unit: Optional[StrictStr] = Field(None, alias="ToleranceUnit")
    tolerance_string: Optional[StrictStr] = Field(None, alias="ToleranceString")
    po_number: Optional[StrictStr] = Field(None, alias="PoNumber")
    secondary_po: Optional[StrictStr] = Field(None, alias="SecondaryPo")
    shipped_date: Optional[datetime] = Field(None, alias="ShippedDate")
    shipment_status: Optional[StrictStr] = Field(None, alias="ShipmentStatus")
    shipped_on: Optional[datetime] = Field(None, alias="ShippedOn")
    delivered_on: Optional[datetime] = Field(None, alias="DeliveredOn")
    tracking_number: Optional[StrictStr] = Field(None, alias="TrackingNumber")
    payment_terms: Optional[StrictInt] = Field(None, alias="PaymentTerms")
    shipping_method: Optional[StrictStr] = Field(None, alias="ShippingMethod")
    location: Optional[StrictStr] = Field(None, alias="Location")
    site_access_notes: Optional[StrictStr] = Field(None, alias="SiteAccessNotes")
    abbreviated_uom: Optional[StrictStr] = Field(None, alias="AbbreviatedUOM")
    unit_scale_factor: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="UnitScaleFactor"
    )
    measurement_not_taken_result: Optional[StrictStr] = Field(
        None, alias="MeasurementNotTakenResult"
    )
    hide_from_certificate: Optional[StrictBool] = Field(
        None, alias="HideFromCertificate"
    )
    measurement_not_taken_reason: Optional[StrictStr] = Field(
        None, alias="MeasurementNotTakenReason"
    )
    environment_text1: Optional[StrictStr] = Field(None, alias="EnvironmentText1")
    environment_text2: Optional[StrictStr] = Field(None, alias="EnvironmentText2")
    environment_text3: Optional[StrictStr] = Field(None, alias="EnvironmentText3")
    environment_text4: Optional[StrictStr] = Field(None, alias="EnvironmentText4")
    environment_text5: Optional[StrictStr] = Field(None, alias="EnvironmentText5")
    environment_text6: Optional[StrictStr] = Field(None, alias="EnvironmentText6")
    values: Optional[StrictStr] = Field(None, alias="Values")
    value1: Optional[StrictStr] = Field(None, alias="Value1")
    value2: Optional[StrictStr] = Field(None, alias="Value2")
    value3: Optional[StrictStr] = Field(None, alias="Value3")
    value4: Optional[StrictStr] = Field(None, alias="Value4")
    value5: Optional[StrictStr] = Field(None, alias="Value5")
    value6: Optional[StrictStr] = Field(None, alias="Value6")
    value7: Optional[StrictStr] = Field(None, alias="Value7")
    value8: Optional[StrictStr] = Field(None, alias="Value8")
    value9: Optional[StrictStr] = Field(None, alias="Value9")
    value10: Optional[StrictStr] = Field(None, alias="Value10")
    value11: Optional[StrictStr] = Field(None, alias="Value11")
    value12: Optional[StrictStr] = Field(None, alias="Value12")
    value13: Optional[StrictStr] = Field(None, alias="Value13")
    value14: Optional[StrictStr] = Field(None, alias="Value14")
    value15: Optional[StrictStr] = Field(None, alias="Value15")
    value16: Optional[StrictStr] = Field(None, alias="Value16")
    value17: Optional[StrictStr] = Field(None, alias="Value17")
    value18: Optional[StrictStr] = Field(None, alias="Value18")
    value19: Optional[StrictStr] = Field(None, alias="Value19")
    value20: Optional[StrictStr] = Field(None, alias="Value20")
    value21: Optional[StrictStr] = Field(None, alias="Value21")
    value22: Optional[StrictStr] = Field(None, alias="Value22")
    value23: Optional[StrictStr] = Field(None, alias="Value23")
    value24: Optional[StrictStr] = Field(None, alias="Value24")
    value25: Optional[StrictStr] = Field(None, alias="Value25")
    value26: Optional[StrictStr] = Field(None, alias="Value26")
    value27: Optional[StrictStr] = Field(None, alias="Value27")
    value28: Optional[StrictStr] = Field(None, alias="Value28")
    value29: Optional[StrictStr] = Field(None, alias="Value29")
    value30: Optional[StrictStr] = Field(None, alias="Value30")
    value31: Optional[StrictStr] = Field(None, alias="Value31")
    value32: Optional[StrictStr] = Field(None, alias="Value32")
    value33: Optional[StrictStr] = Field(None, alias="Value33")
    value34: Optional[StrictStr] = Field(None, alias="Value34")
    value35: Optional[StrictStr] = Field(None, alias="Value35")
    value36: Optional[StrictStr] = Field(None, alias="Value36")
    value37: Optional[StrictStr] = Field(None, alias="Value37")
    value38: Optional[StrictStr] = Field(None, alias="Value38")
    value39: Optional[StrictStr] = Field(None, alias="Value39")
    value40: Optional[StrictStr] = Field(None, alias="Value40")
    raw_value1: Optional[StrictStr] = Field(None, alias="RawValue1")
    raw_value2: Optional[StrictStr] = Field(None, alias="RawValue2")
    raw_value3: Optional[StrictStr] = Field(None, alias="RawValue3")
    raw_value4: Optional[StrictStr] = Field(None, alias="RawValue4")
    raw_value5: Optional[StrictStr] = Field(None, alias="RawValue5")
    raw_value6: Optional[StrictStr] = Field(None, alias="RawValue6")
    raw_value7: Optional[StrictStr] = Field(None, alias="RawValue7")
    raw_value8: Optional[StrictStr] = Field(None, alias="RawValue8")
    raw_value9: Optional[StrictStr] = Field(None, alias="RawValue9")
    raw_value10: Optional[StrictStr] = Field(None, alias="RawValue10")
    raw_value11: Optional[StrictStr] = Field(None, alias="RawValue11")
    raw_value12: Optional[StrictStr] = Field(None, alias="RawValue12")
    raw_value13: Optional[StrictStr] = Field(None, alias="RawValue13")
    raw_value14: Optional[StrictStr] = Field(None, alias="RawValue14")
    raw_value15: Optional[StrictStr] = Field(None, alias="RawValue15")
    raw_value16: Optional[StrictStr] = Field(None, alias="RawValue16")
    raw_value17: Optional[StrictStr] = Field(None, alias="RawValue17")
    raw_value18: Optional[StrictStr] = Field(None, alias="RawValue18")
    raw_value19: Optional[StrictStr] = Field(None, alias="RawValue19")
    raw_value20: Optional[StrictStr] = Field(None, alias="RawValue20")
    raw_value21: Optional[StrictStr] = Field(None, alias="RawValue21")
    raw_value22: Optional[StrictStr] = Field(None, alias="RawValue22")
    raw_value23: Optional[StrictStr] = Field(None, alias="RawValue23")
    raw_value24: Optional[StrictStr] = Field(None, alias="RawValue24")
    raw_value25: Optional[StrictStr] = Field(None, alias="RawValue25")
    raw_value26: Optional[StrictStr] = Field(None, alias="RawValue26")
    raw_value27: Optional[StrictStr] = Field(None, alias="RawValue27")
    raw_value28: Optional[StrictStr] = Field(None, alias="RawValue28")
    raw_value29: Optional[StrictStr] = Field(None, alias="RawValue29")
    raw_value30: Optional[StrictStr] = Field(None, alias="RawValue30")
    raw_value31: Optional[StrictStr] = Field(None, alias="RawValue31")
    raw_value32: Optional[StrictStr] = Field(None, alias="RawValue32")
    raw_value33: Optional[StrictStr] = Field(None, alias="RawValue33")
    raw_value34: Optional[StrictStr] = Field(None, alias="RawValue34")
    raw_value35: Optional[StrictStr] = Field(None, alias="RawValue35")
    raw_value36: Optional[StrictStr] = Field(None, alias="RawValue36")
    raw_value37: Optional[StrictStr] = Field(None, alias="RawValue37")
    raw_value38: Optional[StrictStr] = Field(None, alias="RawValue38")
    raw_value39: Optional[StrictStr] = Field(None, alias="RawValue39")
    raw_value40: Optional[StrictStr] = Field(None, alias="RawValue40")
    subtitles_to_readings: Optional[StrictStr] = Field(
        None, alias="SubtitlesToReadings"
    )
    value_subtitle1: Optional[StrictStr] = Field(None, alias="ValueSubtitle1")
    value_subtitle2: Optional[StrictStr] = Field(None, alias="ValueSubtitle2")
    value_subtitle3: Optional[StrictStr] = Field(None, alias="ValueSubtitle3")
    value_subtitle4: Optional[StrictStr] = Field(None, alias="ValueSubtitle4")
    value_subtitle5: Optional[StrictStr] = Field(None, alias="ValueSubtitle5")
    value_subtitle6: Optional[StrictStr] = Field(None, alias="ValueSubtitle6")
    value_subtitle7: Optional[StrictStr] = Field(None, alias="ValueSubtitle7")
    value_subtitle8: Optional[StrictStr] = Field(None, alias="ValueSubtitle8")
    value_subtitle9: Optional[StrictStr] = Field(None, alias="ValueSubtitle9")
    value_subtitle10: Optional[StrictStr] = Field(None, alias="ValueSubtitle10")
    value_subtitle11: Optional[StrictStr] = Field(None, alias="ValueSubtitle11")
    value_subtitle12: Optional[StrictStr] = Field(None, alias="ValueSubtitle12")
    value_subtitle13: Optional[StrictStr] = Field(None, alias="ValueSubtitle13")
    value_subtitle14: Optional[StrictStr] = Field(None, alias="ValueSubtitle14")
    value_subtitle15: Optional[StrictStr] = Field(None, alias="ValueSubtitle15")
    value_subtitle16: Optional[StrictStr] = Field(None, alias="ValueSubtitle16")
    value_subtitle17: Optional[StrictStr] = Field(None, alias="ValueSubtitle17")
    value_subtitle18: Optional[StrictStr] = Field(None, alias="ValueSubtitle18")
    value_subtitle19: Optional[StrictStr] = Field(None, alias="ValueSubtitle19")
    value_subtitle20: Optional[StrictStr] = Field(None, alias="ValueSubtitle20")
    value_subtitle21: Optional[StrictStr] = Field(None, alias="ValueSubtitle21")
    value_subtitle22: Optional[StrictStr] = Field(None, alias="ValueSubtitle22")
    value_subtitle23: Optional[StrictStr] = Field(None, alias="ValueSubtitle23")
    value_subtitle24: Optional[StrictStr] = Field(None, alias="ValueSubtitle24")
    value_subtitle25: Optional[StrictStr] = Field(None, alias="ValueSubtitle25")
    value_subtitle26: Optional[StrictStr] = Field(None, alias="ValueSubtitle26")
    value_subtitle27: Optional[StrictStr] = Field(None, alias="ValueSubtitle27")
    value_subtitle28: Optional[StrictStr] = Field(None, alias="ValueSubtitle28")
    value_subtitle29: Optional[StrictStr] = Field(None, alias="ValueSubtitle29")
    value_subtitle30: Optional[StrictStr] = Field(None, alias="ValueSubtitle30")
    value_subtitle31: Optional[StrictStr] = Field(None, alias="ValueSubtitle31")
    value_subtitle32: Optional[StrictStr] = Field(None, alias="ValueSubtitle32")
    value_subtitle33: Optional[StrictStr] = Field(None, alias="ValueSubtitle33")
    value_subtitle34: Optional[StrictStr] = Field(None, alias="ValueSubtitle34")
    value_subtitle35: Optional[StrictStr] = Field(None, alias="ValueSubtitle35")
    value_subtitle36: Optional[StrictStr] = Field(None, alias="ValueSubtitle36")
    value_subtitle37: Optional[StrictStr] = Field(None, alias="ValueSubtitle37")
    value_subtitle38: Optional[StrictStr] = Field(None, alias="ValueSubtitle38")
    value_subtitle39: Optional[StrictStr] = Field(None, alias="ValueSubtitle39")
    value_subtitle40: Optional[StrictStr] = Field(None, alias="ValueSubtitle40")
    values_decimal_places: Optional[StrictInt] = Field(
        None, alias="ValuesDecimalPlaces"
    )
    repeat_measurement_and_calculate_hysteresis: Optional[StrictBool] = Field(
        None, alias="RepeatMeasurementAndCalculateHysteresis"
    )
    measurement_point_order: Optional[StrictStr] = Field(
        None, alias="MeasurementPointOrder"
    )
    hysteresis_point: Optional[StrictStr] = Field(None, alias="HysteresisPoint")
    max_hysteresis: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="MaxHysteresis"
    )
    run: Optional[StrictInt] = Field(None, alias="Run")
    direction: Optional[StrictInt] = Field(None, alias="Direction")
    hysteresis: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="Hysteresis"
    )
    column_mean: Optional[StrictStr] = Field(None, alias="ColumnMean")
    column_mean_result: Optional[StrictStr] = Field(None, alias="ColumnMeanResult")
    column_sd: Optional[StrictStr] = Field(None, alias="ColumnSD")
    column_sd_result: Optional[StrictStr] = Field(None, alias="ColumnSDResult")
    column_cv: Optional[StrictStr] = Field(None, alias="ColumnCV")
    column_cv_result: Optional[StrictStr] = Field(None, alias="ColumnCVResult")
    column_range: Optional[StrictStr] = Field(None, alias="ColumnRange")
    column_range_result: Optional[StrictStr] = Field(None, alias="ColumnRangeResult")
    column_delta: Optional[StrictStr] = Field(None, alias="ColumnDelta")
    column_delta_result: Optional[StrictStr] = Field(None, alias="ColumnDeltaResult")
    column_result: Optional[StrictStr] = Field(None, alias="ColumnResult")
    __properties = [
        "IsAccredited",
        "ServiceTotal",
        "RepairsTotal",
        "PartsTotal",
        "ParameterId",
        "ToolRangeName",
        "ToolRangeUncertainty",
        "PrimaryToolLastServiceDate",
        "PrimaryToolNextServiceDate",
        "PrimaryToolCalibratedBy",
        "PrimaryToolToolName",
        "PrimaryToolToolDescription",
        "PrimaryToolToolTypeName",
        "PrimaryToolManufacturer",
        "PrimaryToolManufacturerPartNumber",
        "PrimaryToolSerialNumber",
        "SecondaryToolLastServiceDate",
        "SecondaryToolNextServiceDate",
        "SecondaryToolCalibratedBy",
        "SecondaryToolToolName",
        "SecondaryToolToolDescription",
        "SecondaryToolToolTypeName",
        "SecondaryToolManufacturer",
        "SecondaryToolManufacturerPartNumber",
        "SecondaryToolSerialNumber",
        "MeasurementSetName",
        "DecimalPlaces",
        "SignificantFigures",
        "SdHeader",
        "CvHeader",
        "MeasurementLocalTime",
        "Mean",
        "MeanRaw",
        "MeanDecimalPlaces",
        "MeanExtended",
        "Sd",
        "SdRaw",
        "SDDecimalPlaces",
        "Delta",
        "Range",
        "SdExtended",
        "RangeExtended",
        "DeltaExtended",
        "MinimumMeasuredValue",
        "MaximumMeasuredValue",
        "MinMaxValueExtended",
        "Cv",
        "CvRaw",
        "CVDecimalPlaces",
        "CvExtended",
        "Result",
        "RangeResult",
        "DeltaResult",
        "MinResult",
        "MaxResult",
        "TarResult",
        "TurResult",
        "ErrorResult",
        "SdResult",
        "CvResult",
        "CustomFieldResult",
        "Mu",
        "MuRaw",
        "MUEffectiveDOF",
        "MUCoverageFactor",
        "MuExtended",
        "Cmc",
        "CmcComments",
        "Tur",
        "TurRaw",
        "TURDecimalPlaces",
        "Tar",
        "TarRaw",
        "TARDecimalPlaces",
        "GuardBand",
        "GuardBandLogic",
        "UncertaintyBudget",
        "CalculatedUncertainty",
        "LockUncertaintyBudget",
        "LabMu",
        "Channel",
        "MeasurementType",
        "UpdatedBy",
        "UpdatedOn",
        "Error",
        "ErrorExtended",
        "RequireAdjustment",
        "AdjustmentThreshold",
        "PercentOfTolerance",
        "PercentOfToleranceExtended",
        "TOLDecimalPlaces",
        "SpecificationTitle",
        "SpecificationSubtitle",
        "SpecificationGroup",
        "BatchType",
        "BatchResult",
        "IsByChannel",
        "ChannelCount",
        "IsRangeAccredited",
        "CommencedOn",
        "CommencedBy",
        "ZFactor",
        "AirBuoyancy",
        "EvaporationRate",
        "AirHumidity",
        "Altitude",
        "AmbientTemperature",
        "BarometricPressure",
        "LightIntensity",
        "NoiseLevel",
        "PhLevel",
        "WaterConductivity",
        "WaterTemperature",
        "SolarRadiation",
        "WindSpeed",
        "ZFactorUom",
        "AirBuoyancyUom",
        "EvaporationRateUom",
        "AirHumidityUom",
        "AltitudeUom",
        "AmbientTemperatureUom",
        "BarometricPressureUom",
        "LightIntensityUom",
        "NoiseLevelUom",
        "PhLevelUom",
        "WaterConductivityUom",
        "WaterTemperatureUom",
        "SolarRadiationUom",
        "WindSpeedUom",
        "SpecificationName",
        "ParameterName",
        "MeasurementSetDisplayOrder",
        "DisplayOrder",
        "UnitOfMeasure",
        "DisplayFormat",
        "Precision",
        "Minimum",
        "Nominal",
        "ExpectedValue",
        "ExpectedValueRaw",
        "TestValue",
        "BaseValue",
        "UseExpectedValue",
        "ReadingEntryLogic",
        "ReadingEntryMath",
        "DoubleSubstitutionSequence",
        "ReadingEntryMathString",
        "NominalExtended",
        "ExpectedValueExtended",
        "Maximum",
        "ToleranceMin",
        "ToleranceMax",
        "Resolution",
        "ResolutionCount",
        "MinMaxHeader",
        "AccuracyClass",
        "AccuracyClassMin",
        "AccuracyClassMax",
        "EnvironmentMask",
        "DisplayName",
        "DisplayPartNumber",
        "PartNumber",
        "VendorCompanyId",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "CompletedByName",
        "CompletedOn",
        "IsLimited",
        "VendorTag",
        "VendorServiceNotes",
        "Room",
        "SegmentName",
        "ScheduleName",
        "NextSegmentName",
        "CertificateNumber",
        "WorkStatus",
        "ServiceType",
        "ServiceLevel",
        "Barcode",
        "ServiceComments",
        "OrderItemNumber",
        "AssetTag",
        "AssetUser",
        "SerialNumber",
        "EquipmentId",
        "LegacyIdentifier",
        "SiteName",
        "AssetName",
        "AssetDescription",
        "ProductName",
        "ProductDescription",
        "AssetMaker",
        "Station",
        "AssetTagChange",
        "AssetUserChange",
        "SerialNumberChange",
        "ServiceDate",
        "NextServiceDate",
        "ServiceOrderItemId",
        "ServiceOrderId",
        "MeasurementBatchId",
        "MeasurementId",
        "StandardId",
        "ToolId",
        "MeasurementToolId",
        "MeasurementConditionId",
        "MeasurementPointId",
        "MeasurementSetId",
        "IsHidden",
        "Readings",
        "ToleranceType",
        "ToleranceTypeString",
        "PrecisionType",
        "SpecificationMode",
        "ToleranceMode",
        "ToleranceUnit",
        "ToleranceString",
        "PoNumber",
        "SecondaryPo",
        "ShippedDate",
        "ShipmentStatus",
        "ShippedOn",
        "DeliveredOn",
        "TrackingNumber",
        "PaymentTerms",
        "ShippingMethod",
        "Location",
        "SiteAccessNotes",
        "AbbreviatedUOM",
        "UnitScaleFactor",
        "MeasurementNotTakenResult",
        "HideFromCertificate",
        "MeasurementNotTakenReason",
        "EnvironmentText1",
        "EnvironmentText2",
        "EnvironmentText3",
        "EnvironmentText4",
        "EnvironmentText5",
        "EnvironmentText6",
        "Values",
        "Value1",
        "Value2",
        "Value3",
        "Value4",
        "Value5",
        "Value6",
        "Value7",
        "Value8",
        "Value9",
        "Value10",
        "Value11",
        "Value12",
        "Value13",
        "Value14",
        "Value15",
        "Value16",
        "Value17",
        "Value18",
        "Value19",
        "Value20",
        "Value21",
        "Value22",
        "Value23",
        "Value24",
        "Value25",
        "Value26",
        "Value27",
        "Value28",
        "Value29",
        "Value30",
        "Value31",
        "Value32",
        "Value33",
        "Value34",
        "Value35",
        "Value36",
        "Value37",
        "Value38",
        "Value39",
        "Value40",
        "RawValue1",
        "RawValue2",
        "RawValue3",
        "RawValue4",
        "RawValue5",
        "RawValue6",
        "RawValue7",
        "RawValue8",
        "RawValue9",
        "RawValue10",
        "RawValue11",
        "RawValue12",
        "RawValue13",
        "RawValue14",
        "RawValue15",
        "RawValue16",
        "RawValue17",
        "RawValue18",
        "RawValue19",
        "RawValue20",
        "RawValue21",
        "RawValue22",
        "RawValue23",
        "RawValue24",
        "RawValue25",
        "RawValue26",
        "RawValue27",
        "RawValue28",
        "RawValue29",
        "RawValue30",
        "RawValue31",
        "RawValue32",
        "RawValue33",
        "RawValue34",
        "RawValue35",
        "RawValue36",
        "RawValue37",
        "RawValue38",
        "RawValue39",
        "RawValue40",
        "SubtitlesToReadings",
        "ValueSubtitle1",
        "ValueSubtitle2",
        "ValueSubtitle3",
        "ValueSubtitle4",
        "ValueSubtitle5",
        "ValueSubtitle6",
        "ValueSubtitle7",
        "ValueSubtitle8",
        "ValueSubtitle9",
        "ValueSubtitle10",
        "ValueSubtitle11",
        "ValueSubtitle12",
        "ValueSubtitle13",
        "ValueSubtitle14",
        "ValueSubtitle15",
        "ValueSubtitle16",
        "ValueSubtitle17",
        "ValueSubtitle18",
        "ValueSubtitle19",
        "ValueSubtitle20",
        "ValueSubtitle21",
        "ValueSubtitle22",
        "ValueSubtitle23",
        "ValueSubtitle24",
        "ValueSubtitle25",
        "ValueSubtitle26",
        "ValueSubtitle27",
        "ValueSubtitle28",
        "ValueSubtitle29",
        "ValueSubtitle30",
        "ValueSubtitle31",
        "ValueSubtitle32",
        "ValueSubtitle33",
        "ValueSubtitle34",
        "ValueSubtitle35",
        "ValueSubtitle36",
        "ValueSubtitle37",
        "ValueSubtitle38",
        "ValueSubtitle39",
        "ValueSubtitle40",
        "ValuesDecimalPlaces",
        "RepeatMeasurementAndCalculateHysteresis",
        "MeasurementPointOrder",
        "HysteresisPoint",
        "MaxHysteresis",
        "Run",
        "Direction",
        "Hysteresis",
        "ColumnMean",
        "ColumnMeanResult",
        "ColumnSD",
        "ColumnSDResult",
        "ColumnCV",
        "ColumnCVResult",
        "ColumnRange",
        "ColumnRangeResult",
        "ColumnDelta",
        "ColumnDeltaResult",
        "ColumnResult",
    ]

    @validator("guard_band_logic")
    def guard_band_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Ncslz5403", "Uncertainty", "Tur41", "Rds"):
            raise ValueError(
                "must be one of enum values ('Ncslz5403', 'Uncertainty', 'Tur41', 'Rds')"
            )
        return value

    @validator("measurement_type")
    def measurement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Data", "Cumulative"):
            raise ValueError("must be one of enum values ('Data', 'Cumulative')")
        return value

    @validator("reading_entry_logic")
    def reading_entry_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "SingleValue",
            "TwoValues",
            "TwoValuesAndResult",
            "MeasuredValueConversion",
            "MeasuredValueConversionDisplay",
            "DoubleSubstitution",
        ):
            raise ValueError(
                "must be one of enum values ('SingleValue', 'TwoValues', 'TwoValuesAndResult', 'MeasuredValueConversion', 'MeasuredValueConversionDisplay', 'DoubleSubstitution')"
            )
        return value

    @validator("reading_entry_math")
    def reading_entry_math_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Multiplication",
            "Division",
            "Addition",
            "Subtraction",
            "ReverseSubtraction",
            "Difference",
            "Minimum",
            "Maximum",
            "Average",
        ):
            raise ValueError(
                "must be one of enum values ('Multiplication', 'Division', 'Addition', 'Subtraction', 'ReverseSubtraction', 'Difference', 'Minimum', 'Maximum', 'Average')"
            )
        return value

    @validator("double_substitution_sequence")
    def double_substitution_sequence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("ZeroStandard", "StandardTested", "TestedStandard"):
            raise ValueError(
                "must be one of enum values ('ZeroStandard', 'StandardTested', 'TestedStandard')"
            )
        return value

    @validator("environment_mask")
    def environment_mask_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "AmbientTemperature",
            "AirHumidity",
            "BarometricPressure",
            "EvaporationRate",
            "AirBuoyancy",
            "ZFactor",
            "Altitude",
            "WindSpeed",
            "SolarRadiation",
            "LightIntensity",
            "NoiseLevel",
            "PhLevel",
            "WaterConductivity",
            "WaterTemperature",
        ):
            raise ValueError(
                "must be one of enum values ('AmbientTemperature', 'AirHumidity', 'BarometricPressure', 'EvaporationRate', 'AirBuoyancy', 'ZFactor', 'Altitude', 'WindSpeed', 'SolarRadiation', 'LightIntensity', 'NoiseLevel', 'PhLevel', 'WaterConductivity', 'WaterTemperature')"
            )
        return value

    @validator("tolerance_type")
    def tolerance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Percentage",
            "Range",
            "Offset",
            "PercentagePlus",
            "Ppm",
            "PpmPlus",
            "Function",
        ):
            raise ValueError(
                "must be one of enum values ('Percentage', 'Range', 'Offset', 'PercentagePlus', 'Ppm', 'PpmPlus', 'Function')"
            )
        return value

    @validator("precision_type")
    def precision_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Percentage", "UnitOfMeasure", "Readability"):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Readability')"
            )
        return value

    @validator("specification_mode")
    def specification_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Point", "Range"):
            raise ValueError("must be one of enum values ('Point', 'Range')")
        return value

    @validator("tolerance_mode")
    def tolerance_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Symmetric", "Asymmetric", "Range"):
            raise ValueError(
                "must be one of enum values ('Symmetric', 'Asymmetric', 'Range')"
            )
        return value

    @validator("tolerance_unit")
    def tolerance_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Percentage", "UnitOfMeasure", "Ppm"):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Ppm')"
            )
        return value

    @validator("shipment_status")
    def shipment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotShipped",
            "PartialShipment",
            "Shipped",
            "Delivered",
            "OnSite",
        ):
            raise ValueError(
                "must be one of enum values ('NotShipped', 'PartialShipment', 'Shipped', 'Delivered', 'OnSite')"
            )
        return value

    @validator("measurement_not_taken_result")
    def measurement_not_taken_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Pass", "Fail", "Limited"):
            raise ValueError("must be one of enum values ('Pass', 'Fail', 'Limited')")
        return value

    @validator("measurement_point_order")
    def measurement_point_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "AsEntered",
            "DescendingAscending",
            "AscendingDescending",
            "ZeroDescendingAscending",
            "ZeroAscendingDescending",
        ):
            raise ValueError(
                "must be one of enum values ('AsEntered', 'DescendingAscending', 'AscendingDescending', 'ZeroDescendingAscending', 'ZeroAscendingDescending')"
            )
        return value

    @validator("hysteresis_point")
    def hysteresis_point_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("None", "Zero", "First", "Second"):
            raise ValueError(
                "must be one of enum values ('None', 'Zero', 'First', 'Second')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToMeasurementResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsReportDatasetsToMeasurementResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToMeasurementResponse.parse_obj(obj)

        _obj = QualerApiModelsReportDatasetsToMeasurementResponse.parse_obj(
            {
                "is_accredited": obj.get("IsAccredited"),
                "service_total": obj.get("ServiceTotal"),
                "repairs_total": obj.get("RepairsTotal"),
                "parts_total": obj.get("PartsTotal"),
                "parameter_id": obj.get("ParameterId"),
                "tool_range_name": obj.get("ToolRangeName"),
                "tool_range_uncertainty": obj.get("ToolRangeUncertainty"),
                "primary_tool_last_service_date": obj.get("PrimaryToolLastServiceDate"),
                "primary_tool_next_service_date": obj.get("PrimaryToolNextServiceDate"),
                "primary_tool_calibrated_by": obj.get("PrimaryToolCalibratedBy"),
                "primary_tool_tool_name": obj.get("PrimaryToolToolName"),
                "primary_tool_tool_description": obj.get("PrimaryToolToolDescription"),
                "primary_tool_tool_type_name": obj.get("PrimaryToolToolTypeName"),
                "primary_tool_manufacturer": obj.get("PrimaryToolManufacturer"),
                "primary_tool_manufacturer_part_number": obj.get(
                    "PrimaryToolManufacturerPartNumber"
                ),
                "primary_tool_serial_number": obj.get("PrimaryToolSerialNumber"),
                "secondary_tool_last_service_date": obj.get(
                    "SecondaryToolLastServiceDate"
                ),
                "secondary_tool_next_service_date": obj.get(
                    "SecondaryToolNextServiceDate"
                ),
                "secondary_tool_calibrated_by": obj.get("SecondaryToolCalibratedBy"),
                "secondary_tool_tool_name": obj.get("SecondaryToolToolName"),
                "secondary_tool_tool_description": obj.get(
                    "SecondaryToolToolDescription"
                ),
                "secondary_tool_tool_type_name": obj.get("SecondaryToolToolTypeName"),
                "secondary_tool_manufacturer": obj.get("SecondaryToolManufacturer"),
                "secondary_tool_manufacturer_part_number": obj.get(
                    "SecondaryToolManufacturerPartNumber"
                ),
                "secondary_tool_serial_number": obj.get("SecondaryToolSerialNumber"),
                "measurement_set_name": obj.get("MeasurementSetName"),
                "decimal_places": obj.get("DecimalPlaces"),
                "significant_figures": obj.get("SignificantFigures"),
                "sd_header": obj.get("SdHeader"),
                "cv_header": obj.get("CvHeader"),
                "measurement_local_time": obj.get("MeasurementLocalTime"),
                "mean": obj.get("Mean"),
                "mean_raw": obj.get("MeanRaw"),
                "mean_decimal_places": obj.get("MeanDecimalPlaces"),
                "mean_extended": obj.get("MeanExtended"),
                "sd": obj.get("Sd"),
                "sd_raw": obj.get("SdRaw"),
                "sd_decimal_places": obj.get("SDDecimalPlaces"),
                "delta": obj.get("Delta"),
                "range": obj.get("Range"),
                "sd_extended": obj.get("SdExtended"),
                "range_extended": obj.get("RangeExtended"),
                "delta_extended": obj.get("DeltaExtended"),
                "minimum_measured_value": obj.get("MinimumMeasuredValue"),
                "maximum_measured_value": obj.get("MaximumMeasuredValue"),
                "min_max_value_extended": obj.get("MinMaxValueExtended"),
                "cv": obj.get("Cv"),
                "cv_raw": obj.get("CvRaw"),
                "cv_decimal_places": obj.get("CVDecimalPlaces"),
                "cv_extended": obj.get("CvExtended"),
                "result": obj.get("Result"),
                "range_result": obj.get("RangeResult"),
                "delta_result": obj.get("DeltaResult"),
                "min_result": obj.get("MinResult"),
                "max_result": obj.get("MaxResult"),
                "tar_result": obj.get("TarResult"),
                "tur_result": obj.get("TurResult"),
                "error_result": obj.get("ErrorResult"),
                "sd_result": obj.get("SdResult"),
                "cv_result": obj.get("CvResult"),
                "custom_field_result": obj.get("CustomFieldResult"),
                "mu": obj.get("Mu"),
                "mu_raw": obj.get("MuRaw"),
                "mu_effective_dof": obj.get("MUEffectiveDOF"),
                "mu_coverage_factor": obj.get("MUCoverageFactor"),
                "mu_extended": obj.get("MuExtended"),
                "cmc": obj.get("Cmc"),
                "cmc_comments": obj.get("CmcComments"),
                "tur": obj.get("Tur"),
                "tur_raw": obj.get("TurRaw"),
                "tur_decimal_places": obj.get("TURDecimalPlaces"),
                "tar": obj.get("Tar"),
                "tar_raw": obj.get("TarRaw"),
                "tar_decimal_places": obj.get("TARDecimalPlaces"),
                "guard_band": obj.get("GuardBand"),
                "guard_band_logic": obj.get("GuardBandLogic"),
                "uncertainty_budget": obj.get("UncertaintyBudget"),
                "calculated_uncertainty": obj.get("CalculatedUncertainty"),
                "lock_uncertainty_budget": obj.get("LockUncertaintyBudget"),
                "lab_mu": obj.get("LabMu"),
                "channel": obj.get("Channel"),
                "measurement_type": obj.get("MeasurementType"),
                "updated_by": obj.get("UpdatedBy"),
                "updated_on": obj.get("UpdatedOn"),
                "error": obj.get("Error"),
                "error_extended": obj.get("ErrorExtended"),
                "require_adjustment": obj.get("RequireAdjustment"),
                "adjustment_threshold": obj.get("AdjustmentThreshold"),
                "percent_of_tolerance": obj.get("PercentOfTolerance"),
                "percent_of_tolerance_extended": obj.get("PercentOfToleranceExtended"),
                "tol_decimal_places": obj.get("TOLDecimalPlaces"),
                "specification_title": obj.get("SpecificationTitle"),
                "specification_subtitle": obj.get("SpecificationSubtitle"),
                "specification_group": obj.get("SpecificationGroup"),
                "batch_type": obj.get("BatchType"),
                "batch_result": obj.get("BatchResult"),
                "is_by_channel": obj.get("IsByChannel"),
                "channel_count": obj.get("ChannelCount"),
                "is_range_accredited": obj.get("IsRangeAccredited"),
                "commenced_on": obj.get("CommencedOn"),
                "commenced_by": obj.get("CommencedBy"),
                "z_factor": obj.get("ZFactor"),
                "air_buoyancy": obj.get("AirBuoyancy"),
                "evaporation_rate": obj.get("EvaporationRate"),
                "air_humidity": obj.get("AirHumidity"),
                "altitude": obj.get("Altitude"),
                "ambient_temperature": obj.get("AmbientTemperature"),
                "barometric_pressure": obj.get("BarometricPressure"),
                "light_intensity": obj.get("LightIntensity"),
                "noise_level": obj.get("NoiseLevel"),
                "ph_level": obj.get("PhLevel"),
                "water_conductivity": obj.get("WaterConductivity"),
                "water_temperature": obj.get("WaterTemperature"),
                "solar_radiation": obj.get("SolarRadiation"),
                "wind_speed": obj.get("WindSpeed"),
                "z_factor_uom": obj.get("ZFactorUom"),
                "air_buoyancy_uom": obj.get("AirBuoyancyUom"),
                "evaporation_rate_uom": obj.get("EvaporationRateUom"),
                "air_humidity_uom": obj.get("AirHumidityUom"),
                "altitude_uom": obj.get("AltitudeUom"),
                "ambient_temperature_uom": obj.get("AmbientTemperatureUom"),
                "barometric_pressure_uom": obj.get("BarometricPressureUom"),
                "light_intensity_uom": obj.get("LightIntensityUom"),
                "noise_level_uom": obj.get("NoiseLevelUom"),
                "ph_level_uom": obj.get("PhLevelUom"),
                "water_conductivity_uom": obj.get("WaterConductivityUom"),
                "water_temperature_uom": obj.get("WaterTemperatureUom"),
                "solar_radiation_uom": obj.get("SolarRadiationUom"),
                "wind_speed_uom": obj.get("WindSpeedUom"),
                "specification_name": obj.get("SpecificationName"),
                "parameter_name": obj.get("ParameterName"),
                "measurement_set_display_order": obj.get("MeasurementSetDisplayOrder"),
                "display_order": obj.get("DisplayOrder"),
                "unit_of_measure": obj.get("UnitOfMeasure"),
                "display_format": obj.get("DisplayFormat"),
                "precision": obj.get("Precision"),
                "minimum": obj.get("Minimum"),
                "nominal": obj.get("Nominal"),
                "expected_value": obj.get("ExpectedValue"),
                "expected_value_raw": obj.get("ExpectedValueRaw"),
                "test_value": obj.get("TestValue"),
                "base_value": obj.get("BaseValue"),
                "use_expected_value": obj.get("UseExpectedValue"),
                "reading_entry_logic": obj.get("ReadingEntryLogic"),
                "reading_entry_math": obj.get("ReadingEntryMath"),
                "double_substitution_sequence": obj.get("DoubleSubstitutionSequence"),
                "reading_entry_math_string": obj.get("ReadingEntryMathString"),
                "nominal_extended": obj.get("NominalExtended"),
                "expected_value_extended": obj.get("ExpectedValueExtended"),
                "maximum": obj.get("Maximum"),
                "tolerance_min": obj.get("ToleranceMin"),
                "tolerance_max": obj.get("ToleranceMax"),
                "resolution": obj.get("Resolution"),
                "resolution_count": obj.get("ResolutionCount"),
                "min_max_header": obj.get("MinMaxHeader"),
                "accuracy_class": obj.get("AccuracyClass"),
                "accuracy_class_min": obj.get("AccuracyClassMin"),
                "accuracy_class_max": obj.get("AccuracyClassMax"),
                "environment_mask": obj.get("EnvironmentMask"),
                "display_name": obj.get("DisplayName"),
                "display_part_number": obj.get("DisplayPartNumber"),
                "part_number": obj.get("PartNumber"),
                "vendor_company_id": obj.get("VendorCompanyId"),
                "service_order_number": obj.get("ServiceOrderNumber"),
                "custom_order_number": obj.get("CustomOrderNumber"),
                "completed_by_name": obj.get("CompletedByName"),
                "completed_on": obj.get("CompletedOn"),
                "is_limited": obj.get("IsLimited"),
                "vendor_tag": obj.get("VendorTag"),
                "vendor_service_notes": obj.get("VendorServiceNotes"),
                "room": obj.get("Room"),
                "segment_name": obj.get("SegmentName"),
                "schedule_name": obj.get("ScheduleName"),
                "next_segment_name": obj.get("NextSegmentName"),
                "certificate_number": obj.get("CertificateNumber"),
                "work_status": obj.get("WorkStatus"),
                "service_type": obj.get("ServiceType"),
                "service_level": obj.get("ServiceLevel"),
                "barcode": obj.get("Barcode"),
                "service_comments": obj.get("ServiceComments"),
                "order_item_number": obj.get("OrderItemNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "serial_number": obj.get("SerialNumber"),
                "equipment_id": obj.get("EquipmentId"),
                "legacy_identifier": obj.get("LegacyIdentifier"),
                "site_name": obj.get("SiteName"),
                "asset_name": obj.get("AssetName"),
                "asset_description": obj.get("AssetDescription"),
                "product_name": obj.get("ProductName"),
                "product_description": obj.get("ProductDescription"),
                "asset_maker": obj.get("AssetMaker"),
                "station": obj.get("Station"),
                "asset_tag_change": obj.get("AssetTagChange"),
                "asset_user_change": obj.get("AssetUserChange"),
                "serial_number_change": obj.get("SerialNumberChange"),
                "service_date": obj.get("ServiceDate"),
                "next_service_date": obj.get("NextServiceDate"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "service_order_id": obj.get("ServiceOrderId"),
                "measurement_batch_id": obj.get("MeasurementBatchId"),
                "measurement_id": obj.get("MeasurementId"),
                "standard_id": obj.get("StandardId"),
                "tool_id": obj.get("ToolId"),
                "measurement_tool_id": obj.get("MeasurementToolId"),
                "measurement_condition_id": obj.get("MeasurementConditionId"),
                "measurement_point_id": obj.get("MeasurementPointId"),
                "measurement_set_id": obj.get("MeasurementSetId"),
                "is_hidden": obj.get("IsHidden"),
                "readings": obj.get("Readings"),
                "tolerance_type": obj.get("ToleranceType"),
                "tolerance_type_string": obj.get("ToleranceTypeString"),
                "precision_type": obj.get("PrecisionType"),
                "specification_mode": obj.get("SpecificationMode"),
                "tolerance_mode": obj.get("ToleranceMode"),
                "tolerance_unit": obj.get("ToleranceUnit"),
                "tolerance_string": obj.get("ToleranceString"),
                "po_number": obj.get("PoNumber"),
                "secondary_po": obj.get("SecondaryPo"),
                "shipped_date": obj.get("ShippedDate"),
                "shipment_status": obj.get("ShipmentStatus"),
                "shipped_on": obj.get("ShippedOn"),
                "delivered_on": obj.get("DeliveredOn"),
                "tracking_number": obj.get("TrackingNumber"),
                "payment_terms": obj.get("PaymentTerms"),
                "shipping_method": obj.get("ShippingMethod"),
                "location": obj.get("Location"),
                "site_access_notes": obj.get("SiteAccessNotes"),
                "abbreviated_uom": obj.get("AbbreviatedUOM"),
                "unit_scale_factor": obj.get("UnitScaleFactor"),
                "measurement_not_taken_result": obj.get("MeasurementNotTakenResult"),
                "hide_from_certificate": obj.get("HideFromCertificate"),
                "measurement_not_taken_reason": obj.get("MeasurementNotTakenReason"),
                "environment_text1": obj.get("EnvironmentText1"),
                "environment_text2": obj.get("EnvironmentText2"),
                "environment_text3": obj.get("EnvironmentText3"),
                "environment_text4": obj.get("EnvironmentText4"),
                "environment_text5": obj.get("EnvironmentText5"),
                "environment_text6": obj.get("EnvironmentText6"),
                "values": obj.get("Values"),
                "value1": obj.get("Value1"),
                "value2": obj.get("Value2"),
                "value3": obj.get("Value3"),
                "value4": obj.get("Value4"),
                "value5": obj.get("Value5"),
                "value6": obj.get("Value6"),
                "value7": obj.get("Value7"),
                "value8": obj.get("Value8"),
                "value9": obj.get("Value9"),
                "value10": obj.get("Value10"),
                "value11": obj.get("Value11"),
                "value12": obj.get("Value12"),
                "value13": obj.get("Value13"),
                "value14": obj.get("Value14"),
                "value15": obj.get("Value15"),
                "value16": obj.get("Value16"),
                "value17": obj.get("Value17"),
                "value18": obj.get("Value18"),
                "value19": obj.get("Value19"),
                "value20": obj.get("Value20"),
                "value21": obj.get("Value21"),
                "value22": obj.get("Value22"),
                "value23": obj.get("Value23"),
                "value24": obj.get("Value24"),
                "value25": obj.get("Value25"),
                "value26": obj.get("Value26"),
                "value27": obj.get("Value27"),
                "value28": obj.get("Value28"),
                "value29": obj.get("Value29"),
                "value30": obj.get("Value30"),
                "value31": obj.get("Value31"),
                "value32": obj.get("Value32"),
                "value33": obj.get("Value33"),
                "value34": obj.get("Value34"),
                "value35": obj.get("Value35"),
                "value36": obj.get("Value36"),
                "value37": obj.get("Value37"),
                "value38": obj.get("Value38"),
                "value39": obj.get("Value39"),
                "value40": obj.get("Value40"),
                "raw_value1": obj.get("RawValue1"),
                "raw_value2": obj.get("RawValue2"),
                "raw_value3": obj.get("RawValue3"),
                "raw_value4": obj.get("RawValue4"),
                "raw_value5": obj.get("RawValue5"),
                "raw_value6": obj.get("RawValue6"),
                "raw_value7": obj.get("RawValue7"),
                "raw_value8": obj.get("RawValue8"),
                "raw_value9": obj.get("RawValue9"),
                "raw_value10": obj.get("RawValue10"),
                "raw_value11": obj.get("RawValue11"),
                "raw_value12": obj.get("RawValue12"),
                "raw_value13": obj.get("RawValue13"),
                "raw_value14": obj.get("RawValue14"),
                "raw_value15": obj.get("RawValue15"),
                "raw_value16": obj.get("RawValue16"),
                "raw_value17": obj.get("RawValue17"),
                "raw_value18": obj.get("RawValue18"),
                "raw_value19": obj.get("RawValue19"),
                "raw_value20": obj.get("RawValue20"),
                "raw_value21": obj.get("RawValue21"),
                "raw_value22": obj.get("RawValue22"),
                "raw_value23": obj.get("RawValue23"),
                "raw_value24": obj.get("RawValue24"),
                "raw_value25": obj.get("RawValue25"),
                "raw_value26": obj.get("RawValue26"),
                "raw_value27": obj.get("RawValue27"),
                "raw_value28": obj.get("RawValue28"),
                "raw_value29": obj.get("RawValue29"),
                "raw_value30": obj.get("RawValue30"),
                "raw_value31": obj.get("RawValue31"),
                "raw_value32": obj.get("RawValue32"),
                "raw_value33": obj.get("RawValue33"),
                "raw_value34": obj.get("RawValue34"),
                "raw_value35": obj.get("RawValue35"),
                "raw_value36": obj.get("RawValue36"),
                "raw_value37": obj.get("RawValue37"),
                "raw_value38": obj.get("RawValue38"),
                "raw_value39": obj.get("RawValue39"),
                "raw_value40": obj.get("RawValue40"),
                "subtitles_to_readings": obj.get("SubtitlesToReadings"),
                "value_subtitle1": obj.get("ValueSubtitle1"),
                "value_subtitle2": obj.get("ValueSubtitle2"),
                "value_subtitle3": obj.get("ValueSubtitle3"),
                "value_subtitle4": obj.get("ValueSubtitle4"),
                "value_subtitle5": obj.get("ValueSubtitle5"),
                "value_subtitle6": obj.get("ValueSubtitle6"),
                "value_subtitle7": obj.get("ValueSubtitle7"),
                "value_subtitle8": obj.get("ValueSubtitle8"),
                "value_subtitle9": obj.get("ValueSubtitle9"),
                "value_subtitle10": obj.get("ValueSubtitle10"),
                "value_subtitle11": obj.get("ValueSubtitle11"),
                "value_subtitle12": obj.get("ValueSubtitle12"),
                "value_subtitle13": obj.get("ValueSubtitle13"),
                "value_subtitle14": obj.get("ValueSubtitle14"),
                "value_subtitle15": obj.get("ValueSubtitle15"),
                "value_subtitle16": obj.get("ValueSubtitle16"),
                "value_subtitle17": obj.get("ValueSubtitle17"),
                "value_subtitle18": obj.get("ValueSubtitle18"),
                "value_subtitle19": obj.get("ValueSubtitle19"),
                "value_subtitle20": obj.get("ValueSubtitle20"),
                "value_subtitle21": obj.get("ValueSubtitle21"),
                "value_subtitle22": obj.get("ValueSubtitle22"),
                "value_subtitle23": obj.get("ValueSubtitle23"),
                "value_subtitle24": obj.get("ValueSubtitle24"),
                "value_subtitle25": obj.get("ValueSubtitle25"),
                "value_subtitle26": obj.get("ValueSubtitle26"),
                "value_subtitle27": obj.get("ValueSubtitle27"),
                "value_subtitle28": obj.get("ValueSubtitle28"),
                "value_subtitle29": obj.get("ValueSubtitle29"),
                "value_subtitle30": obj.get("ValueSubtitle30"),
                "value_subtitle31": obj.get("ValueSubtitle31"),
                "value_subtitle32": obj.get("ValueSubtitle32"),
                "value_subtitle33": obj.get("ValueSubtitle33"),
                "value_subtitle34": obj.get("ValueSubtitle34"),
                "value_subtitle35": obj.get("ValueSubtitle35"),
                "value_subtitle36": obj.get("ValueSubtitle36"),
                "value_subtitle37": obj.get("ValueSubtitle37"),
                "value_subtitle38": obj.get("ValueSubtitle38"),
                "value_subtitle39": obj.get("ValueSubtitle39"),
                "value_subtitle40": obj.get("ValueSubtitle40"),
                "values_decimal_places": obj.get("ValuesDecimalPlaces"),
                "repeat_measurement_and_calculate_hysteresis": obj.get(
                    "RepeatMeasurementAndCalculateHysteresis"
                ),
                "measurement_point_order": obj.get("MeasurementPointOrder"),
                "hysteresis_point": obj.get("HysteresisPoint"),
                "max_hysteresis": obj.get("MaxHysteresis"),
                "run": obj.get("Run"),
                "direction": obj.get("Direction"),
                "hysteresis": obj.get("Hysteresis"),
                "column_mean": obj.get("ColumnMean"),
                "column_mean_result": obj.get("ColumnMeanResult"),
                "column_sd": obj.get("ColumnSD"),
                "column_sd_result": obj.get("ColumnSDResult"),
                "column_cv": obj.get("ColumnCV"),
                "column_cv_result": obj.get("ColumnCVResult"),
                "column_range": obj.get("ColumnRange"),
                "column_range_result": obj.get("ColumnRangeResult"),
                "column_delta": obj.get("ColumnDelta"),
                "column_delta_result": obj.get("ColumnDeltaResult"),
                "column_result": obj.get("ColumnResult"),
            }
        )
        return _obj
