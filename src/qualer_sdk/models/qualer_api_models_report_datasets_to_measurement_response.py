# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsReportDatasetsToMeasurementResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementResponse
    """  # noqa: E501

    is_accredited: Optional[StrictBool] = Field(default=None, alias="IsAccredited")
    service_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ServiceTotal"
    )
    repairs_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="RepairsTotal"
    )
    parts_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PartsTotal"
    )
    parameter_id: Optional[StrictInt] = Field(default=None, alias="ParameterId")
    tool_range_name: Optional[StrictStr] = Field(default=None, alias="ToolRangeName")
    tool_range_uncertainty: Optional[StrictStr] = Field(
        default=None, alias="ToolRangeUncertainty"
    )
    primary_tool_last_service_date: Optional[datetime] = Field(
        default=None, alias="PrimaryToolLastServiceDate"
    )
    primary_tool_next_service_date: Optional[datetime] = Field(
        default=None, alias="PrimaryToolNextServiceDate"
    )
    primary_tool_calibrated_by: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolCalibratedBy"
    )
    primary_tool_tool_name: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolToolName"
    )
    primary_tool_tool_description: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolToolDescription"
    )
    primary_tool_tool_type_name: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolToolTypeName"
    )
    primary_tool_manufacturer: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolManufacturer"
    )
    primary_tool_manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolManufacturerPartNumber"
    )
    primary_tool_serial_number: Optional[StrictStr] = Field(
        default=None, alias="PrimaryToolSerialNumber"
    )
    secondary_tool_last_service_date: Optional[datetime] = Field(
        default=None, alias="SecondaryToolLastServiceDate"
    )
    secondary_tool_next_service_date: Optional[datetime] = Field(
        default=None, alias="SecondaryToolNextServiceDate"
    )
    secondary_tool_calibrated_by: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolCalibratedBy"
    )
    secondary_tool_tool_name: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolToolName"
    )
    secondary_tool_tool_description: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolToolDescription"
    )
    secondary_tool_tool_type_name: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolToolTypeName"
    )
    secondary_tool_manufacturer: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolManufacturer"
    )
    secondary_tool_manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolManufacturerPartNumber"
    )
    secondary_tool_serial_number: Optional[StrictStr] = Field(
        default=None, alias="SecondaryToolSerialNumber"
    )
    measurement_set_name: Optional[StrictStr] = Field(
        default=None, alias="MeasurementSetName"
    )
    decimal_places: Optional[StrictInt] = Field(default=None, alias="DecimalPlaces")
    significant_figures: Optional[StrictInt] = Field(
        default=None, alias="SignificantFigures"
    )
    sd_header: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="SdHeader"
    )
    cv_header: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="CvHeader"
    )
    measurement_local_time: Optional[datetime] = Field(
        default=None, alias="MeasurementLocalTime"
    )
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Mean")
    mean_raw: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MeanRaw"
    )
    mean_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="MeanDecimalPlaces"
    )
    mean_extended: Optional[StrictStr] = Field(default=None, alias="MeanExtended")
    sd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Sd")
    sd_raw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SdRaw")
    sd_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="SDDecimalPlaces"
    )
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Delta")
    range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Range")
    sd_extended: Optional[StrictStr] = Field(default=None, alias="SdExtended")
    range_extended: Optional[StrictStr] = Field(default=None, alias="RangeExtended")
    delta_extended: Optional[StrictStr] = Field(default=None, alias="DeltaExtended")
    minimum_measured_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MinimumMeasuredValue"
    )
    maximum_measured_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MaximumMeasuredValue"
    )
    min_max_value_extended: Optional[StrictStr] = Field(
        default=None, alias="MinMaxValueExtended"
    )
    cv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Cv")
    cv_raw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CvRaw")
    cv_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="CVDecimalPlaces"
    )
    cv_extended: Optional[StrictStr] = Field(default=None, alias="CvExtended")
    result: Optional[StrictInt] = Field(default=None, alias="Result")
    range_result: Optional[StrictBool] = Field(default=None, alias="RangeResult")
    delta_result: Optional[StrictBool] = Field(default=None, alias="DeltaResult")
    min_result: Optional[StrictBool] = Field(default=None, alias="MinResult")
    max_result: Optional[StrictBool] = Field(default=None, alias="MaxResult")
    tar_result: Optional[StrictBool] = Field(default=None, alias="TarResult")
    tur_result: Optional[StrictBool] = Field(default=None, alias="TurResult")
    error_result: Optional[StrictBool] = Field(default=None, alias="ErrorResult")
    sd_result: Optional[StrictBool] = Field(default=None, alias="SdResult")
    cv_result: Optional[StrictBool] = Field(default=None, alias="CvResult")
    custom_field_result: Optional[StrictInt] = Field(
        default=None, alias="CustomFieldResult"
    )
    mu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Mu")
    mu_raw: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MuRaw")
    mu_effective_dof: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MUEffectiveDOF"
    )
    mu_coverage_factor: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MUCoverageFactor"
    )
    mu_extended: Optional[StrictStr] = Field(default=None, alias="MuExtended")
    cmc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Cmc")
    cmc_comments: Optional[StrictStr] = Field(default=None, alias="CmcComments")
    tur: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Tur")
    tur_raw: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TurRaw"
    )
    tur_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="TURDecimalPlaces"
    )
    tar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Tar")
    tar_raw: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TarRaw"
    )
    tar_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="TARDecimalPlaces"
    )
    guard_band: Optional[StrictStr] = Field(default=None, alias="GuardBand")
    guard_band_logic: Optional[StrictStr] = Field(default=None, alias="GuardBandLogic")
    uncertainty_budget: Optional[StrictStr] = Field(
        default=None, alias="UncertaintyBudget"
    )
    calculated_uncertainty: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="CalculatedUncertainty"
    )
    lock_uncertainty_budget: Optional[StrictBool] = Field(
        default=None, alias="LockUncertaintyBudget"
    )
    lab_mu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="LabMu")
    channel: Optional[StrictInt] = Field(default=None, alias="Channel")
    measurement_type: Optional[StrictStr] = Field(default=None, alias="MeasurementType")
    updated_by: Optional[StrictStr] = Field(default=None, alias="UpdatedBy")
    updated_on: Optional[datetime] = Field(default=None, alias="UpdatedOn")
    error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Error")
    error_extended: Optional[StrictStr] = Field(default=None, alias="ErrorExtended")
    require_adjustment: Optional[StrictBool] = Field(
        default=None, alias="RequireAdjustment"
    )
    adjustment_threshold: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AdjustmentThreshold"
    )
    percent_of_tolerance: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PercentOfTolerance"
    )
    percent_of_tolerance_extended: Optional[StrictStr] = Field(
        default=None, alias="PercentOfToleranceExtended"
    )
    tol_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="TOLDecimalPlaces"
    )
    specification_title: Optional[StrictStr] = Field(
        default=None, alias="SpecificationTitle"
    )
    specification_subtitle: Optional[StrictStr] = Field(
        default=None, alias="SpecificationSubtitle"
    )
    specification_group: Optional[StrictStr] = Field(
        default=None, alias="SpecificationGroup"
    )
    batch_type: Optional[StrictInt] = Field(default=None, alias="BatchType")
    batch_result: Optional[StrictInt] = Field(default=None, alias="BatchResult")
    is_by_channel: Optional[StrictBool] = Field(default=None, alias="IsByChannel")
    channel_count: Optional[StrictInt] = Field(default=None, alias="ChannelCount")
    is_range_accredited: Optional[StrictBool] = Field(
        default=None, alias="IsRangeAccredited"
    )
    commenced_on: Optional[datetime] = Field(default=None, alias="CommencedOn")
    commenced_by: Optional[StrictStr] = Field(default=None, alias="CommencedBy")
    z_factor: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ZFactor"
    )
    air_buoyancy: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AirBuoyancy"
    )
    evaporation_rate: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="EvaporationRate"
    )
    air_humidity: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AirHumidity"
    )
    altitude: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Altitude"
    )
    ambient_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AmbientTemperature"
    )
    barometric_pressure: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="BarometricPressure"
    )
    light_intensity: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="LightIntensity"
    )
    noise_level: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="NoiseLevel"
    )
    ph_level: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PhLevel"
    )
    water_conductivity: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="WaterConductivity"
    )
    water_temperature: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="WaterTemperature"
    )
    solar_radiation: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="SolarRadiation"
    )
    wind_speed: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="WindSpeed"
    )
    z_factor_uom: Optional[StrictStr] = Field(default=None, alias="ZFactorUom")
    air_buoyancy_uom: Optional[StrictStr] = Field(default=None, alias="AirBuoyancyUom")
    evaporation_rate_uom: Optional[StrictStr] = Field(
        default=None, alias="EvaporationRateUom"
    )
    air_humidity_uom: Optional[StrictStr] = Field(default=None, alias="AirHumidityUom")
    altitude_uom: Optional[StrictStr] = Field(default=None, alias="AltitudeUom")
    ambient_temperature_uom: Optional[StrictStr] = Field(
        default=None, alias="AmbientTemperatureUom"
    )
    barometric_pressure_uom: Optional[StrictStr] = Field(
        default=None, alias="BarometricPressureUom"
    )
    light_intensity_uom: Optional[StrictStr] = Field(
        default=None, alias="LightIntensityUom"
    )
    noise_level_uom: Optional[StrictStr] = Field(default=None, alias="NoiseLevelUom")
    ph_level_uom: Optional[StrictStr] = Field(default=None, alias="PhLevelUom")
    water_conductivity_uom: Optional[StrictStr] = Field(
        default=None, alias="WaterConductivityUom"
    )
    water_temperature_uom: Optional[StrictStr] = Field(
        default=None, alias="WaterTemperatureUom"
    )
    solar_radiation_uom: Optional[StrictStr] = Field(
        default=None, alias="SolarRadiationUom"
    )
    wind_speed_uom: Optional[StrictStr] = Field(default=None, alias="WindSpeedUom")
    specification_name: Optional[StrictStr] = Field(
        default=None, alias="SpecificationName"
    )
    parameter_name: Optional[StrictStr] = Field(default=None, alias="ParameterName")
    measurement_set_display_order: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetDisplayOrder"
    )
    display_order: Optional[StrictInt] = Field(default=None, alias="DisplayOrder")
    unit_of_measure: Optional[StrictStr] = Field(default=None, alias="UnitOfMeasure")
    display_format: Optional[StrictStr] = Field(default=None, alias="DisplayFormat")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Precision"
    )
    minimum: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Minimum"
    )
    nominal: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Nominal"
    )
    expected_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ExpectedValue"
    )
    expected_value_raw: Optional[StrictStr] = Field(
        default=None, alias="ExpectedValueRaw"
    )
    test_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TestValue"
    )
    base_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="BaseValue"
    )
    use_expected_value: Optional[StrictBool] = Field(
        default=None, alias="UseExpectedValue"
    )
    reading_entry_logic: Optional[StrictStr] = Field(
        default=None, alias="ReadingEntryLogic"
    )
    reading_entry_math: Optional[StrictStr] = Field(
        default=None, alias="ReadingEntryMath"
    )
    double_substitution_sequence: Optional[StrictStr] = Field(
        default=None, alias="DoubleSubstitutionSequence"
    )
    reading_entry_math_string: Optional[StrictStr] = Field(
        default=None, alias="ReadingEntryMathString"
    )
    nominal_extended: Optional[StrictStr] = Field(default=None, alias="NominalExtended")
    expected_value_extended: Optional[StrictStr] = Field(
        default=None, alias="ExpectedValueExtended"
    )
    maximum: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Maximum"
    )
    tolerance_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ToleranceMin"
    )
    tolerance_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ToleranceMax"
    )
    resolution: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Resolution"
    )
    resolution_count: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ResolutionCount"
    )
    min_max_header: Optional[StrictStr] = Field(default=None, alias="MinMaxHeader")
    accuracy_class: Optional[StrictStr] = Field(default=None, alias="AccuracyClass")
    accuracy_class_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AccuracyClassMin"
    )
    accuracy_class_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="AccuracyClassMax"
    )
    environment_mask: Optional[StrictStr] = Field(default=None, alias="EnvironmentMask")
    display_name: Optional[StrictStr] = Field(default=None, alias="DisplayName")
    display_part_number: Optional[StrictStr] = Field(
        default=None, alias="DisplayPartNumber"
    )
    part_number: Optional[StrictStr] = Field(default=None, alias="PartNumber")
    vendor_company_id: Optional[StrictInt] = Field(
        default=None, alias="VendorCompanyId"
    )
    service_order_number: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderNumber"
    )
    custom_order_number: Optional[StrictStr] = Field(
        default=None, alias="CustomOrderNumber"
    )
    completed_by_name: Optional[StrictStr] = Field(
        default=None, alias="CompletedByName"
    )
    completed_on: Optional[datetime] = Field(default=None, alias="CompletedOn")
    is_limited: Optional[StrictBool] = Field(default=None, alias="IsLimited")
    vendor_tag: Optional[StrictStr] = Field(default=None, alias="VendorTag")
    vendor_service_notes: Optional[StrictStr] = Field(
        default=None, alias="VendorServiceNotes"
    )
    room: Optional[StrictStr] = Field(default=None, alias="Room")
    segment_name: Optional[StrictStr] = Field(default=None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(default=None, alias="ScheduleName")
    next_segment_name: Optional[StrictStr] = Field(
        default=None, alias="NextSegmentName"
    )
    certificate_number: Optional[StrictStr] = Field(
        default=None, alias="CertificateNumber"
    )
    work_status: Optional[StrictInt] = Field(default=None, alias="WorkStatus")
    service_type: Optional[StrictStr] = Field(default=None, alias="ServiceType")
    service_level: Optional[StrictStr] = Field(default=None, alias="ServiceLevel")
    barcode: Optional[StrictStr] = Field(default=None, alias="Barcode")
    service_comments: Optional[StrictStr] = Field(default=None, alias="ServiceComments")
    order_item_number: Optional[StrictInt] = Field(
        default=None, alias="OrderItemNumber"
    )
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    legacy_identifier: Optional[StrictStr] = Field(
        default=None, alias="LegacyIdentifier"
    )
    site_name: Optional[StrictStr] = Field(default=None, alias="SiteName")
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(
        default=None, alias="AssetDescription"
    )
    product_name: Optional[StrictStr] = Field(default=None, alias="ProductName")
    product_description: Optional[StrictStr] = Field(
        default=None, alias="ProductDescription"
    )
    asset_maker: Optional[StrictStr] = Field(default=None, alias="AssetMaker")
    station: Optional[StrictStr] = Field(default=None, alias="Station")
    asset_tag_change: Optional[StrictStr] = Field(default=None, alias="AssetTagChange")
    asset_user_change: Optional[StrictStr] = Field(
        default=None, alias="AssetUserChange"
    )
    serial_number_change: Optional[StrictStr] = Field(
        default=None, alias="SerialNumberChange"
    )
    service_date: Optional[datetime] = Field(default=None, alias="ServiceDate")
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    measurement_batch_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementBatchId"
    )
    measurement_id: Optional[StrictInt] = Field(default=None, alias="MeasurementId")
    standard_id: Optional[StrictInt] = Field(default=None, alias="StandardId")
    tool_id: Optional[StrictInt] = Field(default=None, alias="ToolId")
    measurement_tool_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementToolId"
    )
    measurement_condition_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementConditionId"
    )
    measurement_point_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementPointId"
    )
    measurement_set_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetId"
    )
    is_hidden: Optional[StrictBool] = Field(default=None, alias="IsHidden")
    readings: Optional[StrictInt] = Field(default=None, alias="Readings")
    tolerance_type: Optional[StrictStr] = Field(default=None, alias="ToleranceType")
    tolerance_type_string: Optional[StrictStr] = Field(
        default=None, alias="ToleranceTypeString"
    )
    precision_type: Optional[StrictStr] = Field(default=None, alias="PrecisionType")
    specification_mode: Optional[StrictStr] = Field(
        default=None, alias="SpecificationMode"
    )
    tolerance_mode: Optional[StrictStr] = Field(default=None, alias="ToleranceMode")
    tolerance_unit: Optional[StrictStr] = Field(default=None, alias="ToleranceUnit")
    tolerance_string: Optional[StrictStr] = Field(default=None, alias="ToleranceString")
    po_number: Optional[StrictStr] = Field(default=None, alias="PoNumber")
    secondary_po: Optional[StrictStr] = Field(default=None, alias="SecondaryPo")
    shipped_date: Optional[datetime] = Field(default=None, alias="ShippedDate")
    shipment_status: Optional[StrictStr] = Field(default=None, alias="ShipmentStatus")
    shipped_on: Optional[datetime] = Field(default=None, alias="ShippedOn")
    delivered_on: Optional[datetime] = Field(default=None, alias="DeliveredOn")
    tracking_number: Optional[StrictStr] = Field(default=None, alias="TrackingNumber")
    payment_terms: Optional[StrictInt] = Field(default=None, alias="PaymentTerms")
    shipping_method: Optional[StrictStr] = Field(default=None, alias="ShippingMethod")
    location: Optional[StrictStr] = Field(default=None, alias="Location")
    site_access_notes: Optional[StrictStr] = Field(
        default=None, alias="SiteAccessNotes"
    )
    abbreviated_uom: Optional[StrictStr] = Field(default=None, alias="AbbreviatedUOM")
    unit_scale_factor: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="UnitScaleFactor"
    )
    measurement_not_taken_result: Optional[StrictStr] = Field(
        default=None, alias="MeasurementNotTakenResult"
    )
    hide_from_certificate: Optional[StrictBool] = Field(
        default=None, alias="HideFromCertificate"
    )
    measurement_not_taken_reason: Optional[StrictStr] = Field(
        default=None, alias="MeasurementNotTakenReason"
    )
    environment_text1: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText1"
    )
    environment_text2: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText2"
    )
    environment_text3: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText3"
    )
    environment_text4: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText4"
    )
    environment_text5: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText5"
    )
    environment_text6: Optional[StrictStr] = Field(
        default=None, alias="EnvironmentText6"
    )
    values: Optional[StrictStr] = Field(default=None, alias="Values")
    value1: Optional[StrictStr] = Field(default=None, alias="Value1")
    value2: Optional[StrictStr] = Field(default=None, alias="Value2")
    value3: Optional[StrictStr] = Field(default=None, alias="Value3")
    value4: Optional[StrictStr] = Field(default=None, alias="Value4")
    value5: Optional[StrictStr] = Field(default=None, alias="Value5")
    value6: Optional[StrictStr] = Field(default=None, alias="Value6")
    value7: Optional[StrictStr] = Field(default=None, alias="Value7")
    value8: Optional[StrictStr] = Field(default=None, alias="Value8")
    value9: Optional[StrictStr] = Field(default=None, alias="Value9")
    value10: Optional[StrictStr] = Field(default=None, alias="Value10")
    value11: Optional[StrictStr] = Field(default=None, alias="Value11")
    value12: Optional[StrictStr] = Field(default=None, alias="Value12")
    value13: Optional[StrictStr] = Field(default=None, alias="Value13")
    value14: Optional[StrictStr] = Field(default=None, alias="Value14")
    value15: Optional[StrictStr] = Field(default=None, alias="Value15")
    value16: Optional[StrictStr] = Field(default=None, alias="Value16")
    value17: Optional[StrictStr] = Field(default=None, alias="Value17")
    value18: Optional[StrictStr] = Field(default=None, alias="Value18")
    value19: Optional[StrictStr] = Field(default=None, alias="Value19")
    value20: Optional[StrictStr] = Field(default=None, alias="Value20")
    value21: Optional[StrictStr] = Field(default=None, alias="Value21")
    value22: Optional[StrictStr] = Field(default=None, alias="Value22")
    value23: Optional[StrictStr] = Field(default=None, alias="Value23")
    value24: Optional[StrictStr] = Field(default=None, alias="Value24")
    value25: Optional[StrictStr] = Field(default=None, alias="Value25")
    value26: Optional[StrictStr] = Field(default=None, alias="Value26")
    value27: Optional[StrictStr] = Field(default=None, alias="Value27")
    value28: Optional[StrictStr] = Field(default=None, alias="Value28")
    value29: Optional[StrictStr] = Field(default=None, alias="Value29")
    value30: Optional[StrictStr] = Field(default=None, alias="Value30")
    value31: Optional[StrictStr] = Field(default=None, alias="Value31")
    value32: Optional[StrictStr] = Field(default=None, alias="Value32")
    value33: Optional[StrictStr] = Field(default=None, alias="Value33")
    value34: Optional[StrictStr] = Field(default=None, alias="Value34")
    value35: Optional[StrictStr] = Field(default=None, alias="Value35")
    value36: Optional[StrictStr] = Field(default=None, alias="Value36")
    value37: Optional[StrictStr] = Field(default=None, alias="Value37")
    value38: Optional[StrictStr] = Field(default=None, alias="Value38")
    value39: Optional[StrictStr] = Field(default=None, alias="Value39")
    value40: Optional[StrictStr] = Field(default=None, alias="Value40")
    raw_value1: Optional[StrictStr] = Field(default=None, alias="RawValue1")
    raw_value2: Optional[StrictStr] = Field(default=None, alias="RawValue2")
    raw_value3: Optional[StrictStr] = Field(default=None, alias="RawValue3")
    raw_value4: Optional[StrictStr] = Field(default=None, alias="RawValue4")
    raw_value5: Optional[StrictStr] = Field(default=None, alias="RawValue5")
    raw_value6: Optional[StrictStr] = Field(default=None, alias="RawValue6")
    raw_value7: Optional[StrictStr] = Field(default=None, alias="RawValue7")
    raw_value8: Optional[StrictStr] = Field(default=None, alias="RawValue8")
    raw_value9: Optional[StrictStr] = Field(default=None, alias="RawValue9")
    raw_value10: Optional[StrictStr] = Field(default=None, alias="RawValue10")
    raw_value11: Optional[StrictStr] = Field(default=None, alias="RawValue11")
    raw_value12: Optional[StrictStr] = Field(default=None, alias="RawValue12")
    raw_value13: Optional[StrictStr] = Field(default=None, alias="RawValue13")
    raw_value14: Optional[StrictStr] = Field(default=None, alias="RawValue14")
    raw_value15: Optional[StrictStr] = Field(default=None, alias="RawValue15")
    raw_value16: Optional[StrictStr] = Field(default=None, alias="RawValue16")
    raw_value17: Optional[StrictStr] = Field(default=None, alias="RawValue17")
    raw_value18: Optional[StrictStr] = Field(default=None, alias="RawValue18")
    raw_value19: Optional[StrictStr] = Field(default=None, alias="RawValue19")
    raw_value20: Optional[StrictStr] = Field(default=None, alias="RawValue20")
    raw_value21: Optional[StrictStr] = Field(default=None, alias="RawValue21")
    raw_value22: Optional[StrictStr] = Field(default=None, alias="RawValue22")
    raw_value23: Optional[StrictStr] = Field(default=None, alias="RawValue23")
    raw_value24: Optional[StrictStr] = Field(default=None, alias="RawValue24")
    raw_value25: Optional[StrictStr] = Field(default=None, alias="RawValue25")
    raw_value26: Optional[StrictStr] = Field(default=None, alias="RawValue26")
    raw_value27: Optional[StrictStr] = Field(default=None, alias="RawValue27")
    raw_value28: Optional[StrictStr] = Field(default=None, alias="RawValue28")
    raw_value29: Optional[StrictStr] = Field(default=None, alias="RawValue29")
    raw_value30: Optional[StrictStr] = Field(default=None, alias="RawValue30")
    raw_value31: Optional[StrictStr] = Field(default=None, alias="RawValue31")
    raw_value32: Optional[StrictStr] = Field(default=None, alias="RawValue32")
    raw_value33: Optional[StrictStr] = Field(default=None, alias="RawValue33")
    raw_value34: Optional[StrictStr] = Field(default=None, alias="RawValue34")
    raw_value35: Optional[StrictStr] = Field(default=None, alias="RawValue35")
    raw_value36: Optional[StrictStr] = Field(default=None, alias="RawValue36")
    raw_value37: Optional[StrictStr] = Field(default=None, alias="RawValue37")
    raw_value38: Optional[StrictStr] = Field(default=None, alias="RawValue38")
    raw_value39: Optional[StrictStr] = Field(default=None, alias="RawValue39")
    raw_value40: Optional[StrictStr] = Field(default=None, alias="RawValue40")
    subtitles_to_readings: Optional[StrictStr] = Field(
        default=None, alias="SubtitlesToReadings"
    )
    value_subtitle1: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle1")
    value_subtitle2: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle2")
    value_subtitle3: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle3")
    value_subtitle4: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle4")
    value_subtitle5: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle5")
    value_subtitle6: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle6")
    value_subtitle7: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle7")
    value_subtitle8: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle8")
    value_subtitle9: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle9")
    value_subtitle10: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle10")
    value_subtitle11: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle11")
    value_subtitle12: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle12")
    value_subtitle13: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle13")
    value_subtitle14: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle14")
    value_subtitle15: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle15")
    value_subtitle16: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle16")
    value_subtitle17: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle17")
    value_subtitle18: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle18")
    value_subtitle19: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle19")
    value_subtitle20: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle20")
    value_subtitle21: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle21")
    value_subtitle22: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle22")
    value_subtitle23: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle23")
    value_subtitle24: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle24")
    value_subtitle25: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle25")
    value_subtitle26: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle26")
    value_subtitle27: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle27")
    value_subtitle28: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle28")
    value_subtitle29: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle29")
    value_subtitle30: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle30")
    value_subtitle31: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle31")
    value_subtitle32: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle32")
    value_subtitle33: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle33")
    value_subtitle34: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle34")
    value_subtitle35: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle35")
    value_subtitle36: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle36")
    value_subtitle37: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle37")
    value_subtitle38: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle38")
    value_subtitle39: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle39")
    value_subtitle40: Optional[StrictStr] = Field(default=None, alias="ValueSubtitle40")
    values_decimal_places: Optional[StrictInt] = Field(
        default=None, alias="ValuesDecimalPlaces"
    )
    repeat_measurement_and_calculate_hysteresis: Optional[StrictBool] = Field(
        default=None, alias="RepeatMeasurementAndCalculateHysteresis"
    )
    measurement_point_order: Optional[StrictStr] = Field(
        default=None, alias="MeasurementPointOrder"
    )
    hysteresis_point: Optional[StrictStr] = Field(default=None, alias="HysteresisPoint")
    max_hysteresis: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MaxHysteresis"
    )
    run: Optional[StrictInt] = Field(default=None, alias="Run")
    direction: Optional[StrictInt] = Field(default=None, alias="Direction")
    hysteresis: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Hysteresis"
    )
    column_mean: Optional[StrictStr] = Field(default=None, alias="ColumnMean")
    column_mean_result: Optional[StrictStr] = Field(
        default=None, alias="ColumnMeanResult"
    )
    column_sd: Optional[StrictStr] = Field(default=None, alias="ColumnSD")
    column_sd_result: Optional[StrictStr] = Field(default=None, alias="ColumnSDResult")
    column_cv: Optional[StrictStr] = Field(default=None, alias="ColumnCV")
    column_cv_result: Optional[StrictStr] = Field(default=None, alias="ColumnCVResult")
    column_range: Optional[StrictStr] = Field(default=None, alias="ColumnRange")
    column_range_result: Optional[StrictStr] = Field(
        default=None, alias="ColumnRangeResult"
    )
    column_delta: Optional[StrictStr] = Field(default=None, alias="ColumnDelta")
    column_delta_result: Optional[StrictStr] = Field(
        default=None, alias="ColumnDeltaResult"
    )
    column_result: Optional[StrictStr] = Field(default=None, alias="ColumnResult")
    __properties: ClassVar[List[str]] = [
        "IsAccredited",
        "ServiceTotal",
        "RepairsTotal",
        "PartsTotal",
        "ParameterId",
        "ToolRangeName",
        "ToolRangeUncertainty",
        "PrimaryToolLastServiceDate",
        "PrimaryToolNextServiceDate",
        "PrimaryToolCalibratedBy",
        "PrimaryToolToolName",
        "PrimaryToolToolDescription",
        "PrimaryToolToolTypeName",
        "PrimaryToolManufacturer",
        "PrimaryToolManufacturerPartNumber",
        "PrimaryToolSerialNumber",
        "SecondaryToolLastServiceDate",
        "SecondaryToolNextServiceDate",
        "SecondaryToolCalibratedBy",
        "SecondaryToolToolName",
        "SecondaryToolToolDescription",
        "SecondaryToolToolTypeName",
        "SecondaryToolManufacturer",
        "SecondaryToolManufacturerPartNumber",
        "SecondaryToolSerialNumber",
        "MeasurementSetName",
        "DecimalPlaces",
        "SignificantFigures",
        "SdHeader",
        "CvHeader",
        "MeasurementLocalTime",
        "Mean",
        "MeanRaw",
        "MeanDecimalPlaces",
        "MeanExtended",
        "Sd",
        "SdRaw",
        "SDDecimalPlaces",
        "Delta",
        "Range",
        "SdExtended",
        "RangeExtended",
        "DeltaExtended",
        "MinimumMeasuredValue",
        "MaximumMeasuredValue",
        "MinMaxValueExtended",
        "Cv",
        "CvRaw",
        "CVDecimalPlaces",
        "CvExtended",
        "Result",
        "RangeResult",
        "DeltaResult",
        "MinResult",
        "MaxResult",
        "TarResult",
        "TurResult",
        "ErrorResult",
        "SdResult",
        "CvResult",
        "CustomFieldResult",
        "Mu",
        "MuRaw",
        "MUEffectiveDOF",
        "MUCoverageFactor",
        "MuExtended",
        "Cmc",
        "CmcComments",
        "Tur",
        "TurRaw",
        "TURDecimalPlaces",
        "Tar",
        "TarRaw",
        "TARDecimalPlaces",
        "GuardBand",
        "GuardBandLogic",
        "UncertaintyBudget",
        "CalculatedUncertainty",
        "LockUncertaintyBudget",
        "LabMu",
        "Channel",
        "MeasurementType",
        "UpdatedBy",
        "UpdatedOn",
        "Error",
        "ErrorExtended",
        "RequireAdjustment",
        "AdjustmentThreshold",
        "PercentOfTolerance",
        "PercentOfToleranceExtended",
        "TOLDecimalPlaces",
        "SpecificationTitle",
        "SpecificationSubtitle",
        "SpecificationGroup",
        "BatchType",
        "BatchResult",
        "IsByChannel",
        "ChannelCount",
        "IsRangeAccredited",
        "CommencedOn",
        "CommencedBy",
        "ZFactor",
        "AirBuoyancy",
        "EvaporationRate",
        "AirHumidity",
        "Altitude",
        "AmbientTemperature",
        "BarometricPressure",
        "LightIntensity",
        "NoiseLevel",
        "PhLevel",
        "WaterConductivity",
        "WaterTemperature",
        "SolarRadiation",
        "WindSpeed",
        "ZFactorUom",
        "AirBuoyancyUom",
        "EvaporationRateUom",
        "AirHumidityUom",
        "AltitudeUom",
        "AmbientTemperatureUom",
        "BarometricPressureUom",
        "LightIntensityUom",
        "NoiseLevelUom",
        "PhLevelUom",
        "WaterConductivityUom",
        "WaterTemperatureUom",
        "SolarRadiationUom",
        "WindSpeedUom",
        "SpecificationName",
        "ParameterName",
        "MeasurementSetDisplayOrder",
        "DisplayOrder",
        "UnitOfMeasure",
        "DisplayFormat",
        "Precision",
        "Minimum",
        "Nominal",
        "ExpectedValue",
        "ExpectedValueRaw",
        "TestValue",
        "BaseValue",
        "UseExpectedValue",
        "ReadingEntryLogic",
        "ReadingEntryMath",
        "DoubleSubstitutionSequence",
        "ReadingEntryMathString",
        "NominalExtended",
        "ExpectedValueExtended",
        "Maximum",
        "ToleranceMin",
        "ToleranceMax",
        "Resolution",
        "ResolutionCount",
        "MinMaxHeader",
        "AccuracyClass",
        "AccuracyClassMin",
        "AccuracyClassMax",
        "EnvironmentMask",
        "DisplayName",
        "DisplayPartNumber",
        "PartNumber",
        "VendorCompanyId",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "CompletedByName",
        "CompletedOn",
        "IsLimited",
        "VendorTag",
        "VendorServiceNotes",
        "Room",
        "SegmentName",
        "ScheduleName",
        "NextSegmentName",
        "CertificateNumber",
        "WorkStatus",
        "ServiceType",
        "ServiceLevel",
        "Barcode",
        "ServiceComments",
        "OrderItemNumber",
        "AssetTag",
        "AssetUser",
        "SerialNumber",
        "EquipmentId",
        "LegacyIdentifier",
        "SiteName",
        "AssetName",
        "AssetDescription",
        "ProductName",
        "ProductDescription",
        "AssetMaker",
        "Station",
        "AssetTagChange",
        "AssetUserChange",
        "SerialNumberChange",
        "ServiceDate",
        "NextServiceDate",
        "ServiceOrderItemId",
        "ServiceOrderId",
        "MeasurementBatchId",
        "MeasurementId",
        "StandardId",
        "ToolId",
        "MeasurementToolId",
        "MeasurementConditionId",
        "MeasurementPointId",
        "MeasurementSetId",
        "IsHidden",
        "Readings",
        "ToleranceType",
        "ToleranceTypeString",
        "PrecisionType",
        "SpecificationMode",
        "ToleranceMode",
        "ToleranceUnit",
        "ToleranceString",
        "PoNumber",
        "SecondaryPo",
        "ShippedDate",
        "ShipmentStatus",
        "ShippedOn",
        "DeliveredOn",
        "TrackingNumber",
        "PaymentTerms",
        "ShippingMethod",
        "Location",
        "SiteAccessNotes",
        "AbbreviatedUOM",
        "UnitScaleFactor",
        "MeasurementNotTakenResult",
        "HideFromCertificate",
        "MeasurementNotTakenReason",
        "EnvironmentText1",
        "EnvironmentText2",
        "EnvironmentText3",
        "EnvironmentText4",
        "EnvironmentText5",
        "EnvironmentText6",
        "Values",
        "Value1",
        "Value2",
        "Value3",
        "Value4",
        "Value5",
        "Value6",
        "Value7",
        "Value8",
        "Value9",
        "Value10",
        "Value11",
        "Value12",
        "Value13",
        "Value14",
        "Value15",
        "Value16",
        "Value17",
        "Value18",
        "Value19",
        "Value20",
        "Value21",
        "Value22",
        "Value23",
        "Value24",
        "Value25",
        "Value26",
        "Value27",
        "Value28",
        "Value29",
        "Value30",
        "Value31",
        "Value32",
        "Value33",
        "Value34",
        "Value35",
        "Value36",
        "Value37",
        "Value38",
        "Value39",
        "Value40",
        "RawValue1",
        "RawValue2",
        "RawValue3",
        "RawValue4",
        "RawValue5",
        "RawValue6",
        "RawValue7",
        "RawValue8",
        "RawValue9",
        "RawValue10",
        "RawValue11",
        "RawValue12",
        "RawValue13",
        "RawValue14",
        "RawValue15",
        "RawValue16",
        "RawValue17",
        "RawValue18",
        "RawValue19",
        "RawValue20",
        "RawValue21",
        "RawValue22",
        "RawValue23",
        "RawValue24",
        "RawValue25",
        "RawValue26",
        "RawValue27",
        "RawValue28",
        "RawValue29",
        "RawValue30",
        "RawValue31",
        "RawValue32",
        "RawValue33",
        "RawValue34",
        "RawValue35",
        "RawValue36",
        "RawValue37",
        "RawValue38",
        "RawValue39",
        "RawValue40",
        "SubtitlesToReadings",
        "ValueSubtitle1",
        "ValueSubtitle2",
        "ValueSubtitle3",
        "ValueSubtitle4",
        "ValueSubtitle5",
        "ValueSubtitle6",
        "ValueSubtitle7",
        "ValueSubtitle8",
        "ValueSubtitle9",
        "ValueSubtitle10",
        "ValueSubtitle11",
        "ValueSubtitle12",
        "ValueSubtitle13",
        "ValueSubtitle14",
        "ValueSubtitle15",
        "ValueSubtitle16",
        "ValueSubtitle17",
        "ValueSubtitle18",
        "ValueSubtitle19",
        "ValueSubtitle20",
        "ValueSubtitle21",
        "ValueSubtitle22",
        "ValueSubtitle23",
        "ValueSubtitle24",
        "ValueSubtitle25",
        "ValueSubtitle26",
        "ValueSubtitle27",
        "ValueSubtitle28",
        "ValueSubtitle29",
        "ValueSubtitle30",
        "ValueSubtitle31",
        "ValueSubtitle32",
        "ValueSubtitle33",
        "ValueSubtitle34",
        "ValueSubtitle35",
        "ValueSubtitle36",
        "ValueSubtitle37",
        "ValueSubtitle38",
        "ValueSubtitle39",
        "ValueSubtitle40",
        "ValuesDecimalPlaces",
        "RepeatMeasurementAndCalculateHysteresis",
        "MeasurementPointOrder",
        "HysteresisPoint",
        "MaxHysteresis",
        "Run",
        "Direction",
        "Hysteresis",
        "ColumnMean",
        "ColumnMeanResult",
        "ColumnSD",
        "ColumnSDResult",
        "ColumnCV",
        "ColumnCVResult",
        "ColumnRange",
        "ColumnRangeResult",
        "ColumnDelta",
        "ColumnDeltaResult",
        "ColumnResult",
    ]

    @field_validator("guard_band_logic")
    def guard_band_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Ncslz5403", "Uncertainty", "Tur41", "Rds"]):
            raise ValueError(
                "must be one of enum values ('Ncslz5403', 'Uncertainty', 'Tur41', 'Rds')"
            )
        return value

    @field_validator("measurement_type")
    def measurement_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Data", "Cumulative"]):
            raise ValueError("must be one of enum values ('Data', 'Cumulative')")
        return value

    @field_validator("reading_entry_logic")
    def reading_entry_logic_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "SingleValue",
                "TwoValues",
                "TwoValuesAndResult",
                "MeasuredValueConversion",
                "MeasuredValueConversionDisplay",
                "DoubleSubstitution",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('SingleValue', 'TwoValues', 'TwoValuesAndResult', 'MeasuredValueConversion', 'MeasuredValueConversionDisplay', 'DoubleSubstitution')"
            )
        return value

    @field_validator("reading_entry_math")
    def reading_entry_math_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Multiplication",
                "Division",
                "Addition",
                "Subtraction",
                "ReverseSubtraction",
                "Difference",
                "Minimum",
                "Maximum",
                "Average",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Multiplication', 'Division', 'Addition', 'Subtraction', 'ReverseSubtraction', 'Difference', 'Minimum', 'Maximum', 'Average')"
            )
        return value

    @field_validator("double_substitution_sequence")
    def double_substitution_sequence_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["ZeroStandard", "StandardTested", "TestedStandard"]):
            raise ValueError(
                "must be one of enum values ('ZeroStandard', 'StandardTested', 'TestedStandard')"
            )
        return value

    @field_validator("environment_mask")
    def environment_mask_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "AmbientTemperature",
                "AirHumidity",
                "BarometricPressure",
                "EvaporationRate",
                "AirBuoyancy",
                "ZFactor",
                "Altitude",
                "WindSpeed",
                "SolarRadiation",
                "LightIntensity",
                "NoiseLevel",
                "PhLevel",
                "WaterConductivity",
                "WaterTemperature",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('AmbientTemperature', 'AirHumidity', 'BarometricPressure', 'EvaporationRate', 'AirBuoyancy', 'ZFactor', 'Altitude', 'WindSpeed', 'SolarRadiation', 'LightIntensity', 'NoiseLevel', 'PhLevel', 'WaterConductivity', 'WaterTemperature')"
            )
        return value

    @field_validator("tolerance_type")
    def tolerance_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Percentage",
                "Range",
                "Offset",
                "PercentagePlus",
                "Ppm",
                "PpmPlus",
                "Function",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Percentage', 'Range', 'Offset', 'PercentagePlus', 'Ppm', 'PpmPlus', 'Function')"
            )
        return value

    @field_validator("precision_type")
    def precision_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Percentage", "UnitOfMeasure", "Readability"]):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Readability')"
            )
        return value

    @field_validator("specification_mode")
    def specification_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Point", "Range"]):
            raise ValueError("must be one of enum values ('Point', 'Range')")
        return value

    @field_validator("tolerance_mode")
    def tolerance_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Symmetric", "Asymmetric", "Range"]):
            raise ValueError(
                "must be one of enum values ('Symmetric', 'Asymmetric', 'Range')"
            )
        return value

    @field_validator("tolerance_unit")
    def tolerance_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Percentage", "UnitOfMeasure", "Ppm"]):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Ppm')"
            )
        return value

    @field_validator("shipment_status")
    def shipment_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["NotShipped", "PartialShipment", "Shipped", "Delivered", "OnSite"]
        ):
            raise ValueError(
                "must be one of enum values ('NotShipped', 'PartialShipment', 'Shipped', 'Delivered', 'OnSite')"
            )
        return value

    @field_validator("measurement_not_taken_result")
    def measurement_not_taken_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Pass", "Fail", "Limited"]):
            raise ValueError("must be one of enum values ('Pass', 'Fail', 'Limited')")
        return value

    @field_validator("measurement_point_order")
    def measurement_point_order_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "AsEntered",
                "DescendingAscending",
                "AscendingDescending",
                "ZeroDescendingAscending",
                "ZeroAscendingDescending",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('AsEntered', 'DescendingAscending', 'AscendingDescending', 'ZeroDescendingAscending', 'ZeroAscendingDescending')"
            )
        return value

    @field_validator("hysteresis_point")
    def hysteresis_point_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["None", "Zero", "First", "Second"]):
            raise ValueError(
                "must be one of enum values ('None', 'Zero', 'First', 'Second')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "IsAccredited": obj.get("IsAccredited"),
                "ServiceTotal": obj.get("ServiceTotal"),
                "RepairsTotal": obj.get("RepairsTotal"),
                "PartsTotal": obj.get("PartsTotal"),
                "ParameterId": obj.get("ParameterId"),
                "ToolRangeName": obj.get("ToolRangeName"),
                "ToolRangeUncertainty": obj.get("ToolRangeUncertainty"),
                "PrimaryToolLastServiceDate": obj.get("PrimaryToolLastServiceDate"),
                "PrimaryToolNextServiceDate": obj.get("PrimaryToolNextServiceDate"),
                "PrimaryToolCalibratedBy": obj.get("PrimaryToolCalibratedBy"),
                "PrimaryToolToolName": obj.get("PrimaryToolToolName"),
                "PrimaryToolToolDescription": obj.get("PrimaryToolToolDescription"),
                "PrimaryToolToolTypeName": obj.get("PrimaryToolToolTypeName"),
                "PrimaryToolManufacturer": obj.get("PrimaryToolManufacturer"),
                "PrimaryToolManufacturerPartNumber": obj.get(
                    "PrimaryToolManufacturerPartNumber"
                ),
                "PrimaryToolSerialNumber": obj.get("PrimaryToolSerialNumber"),
                "SecondaryToolLastServiceDate": obj.get("SecondaryToolLastServiceDate"),
                "SecondaryToolNextServiceDate": obj.get("SecondaryToolNextServiceDate"),
                "SecondaryToolCalibratedBy": obj.get("SecondaryToolCalibratedBy"),
                "SecondaryToolToolName": obj.get("SecondaryToolToolName"),
                "SecondaryToolToolDescription": obj.get("SecondaryToolToolDescription"),
                "SecondaryToolToolTypeName": obj.get("SecondaryToolToolTypeName"),
                "SecondaryToolManufacturer": obj.get("SecondaryToolManufacturer"),
                "SecondaryToolManufacturerPartNumber": obj.get(
                    "SecondaryToolManufacturerPartNumber"
                ),
                "SecondaryToolSerialNumber": obj.get("SecondaryToolSerialNumber"),
                "MeasurementSetName": obj.get("MeasurementSetName"),
                "DecimalPlaces": obj.get("DecimalPlaces"),
                "SignificantFigures": obj.get("SignificantFigures"),
                "SdHeader": obj.get("SdHeader"),
                "CvHeader": obj.get("CvHeader"),
                "MeasurementLocalTime": obj.get("MeasurementLocalTime"),
                "Mean": obj.get("Mean"),
                "MeanRaw": obj.get("MeanRaw"),
                "MeanDecimalPlaces": obj.get("MeanDecimalPlaces"),
                "MeanExtended": obj.get("MeanExtended"),
                "Sd": obj.get("Sd"),
                "SdRaw": obj.get("SdRaw"),
                "SDDecimalPlaces": obj.get("SDDecimalPlaces"),
                "Delta": obj.get("Delta"),
                "Range": obj.get("Range"),
                "SdExtended": obj.get("SdExtended"),
                "RangeExtended": obj.get("RangeExtended"),
                "DeltaExtended": obj.get("DeltaExtended"),
                "MinimumMeasuredValue": obj.get("MinimumMeasuredValue"),
                "MaximumMeasuredValue": obj.get("MaximumMeasuredValue"),
                "MinMaxValueExtended": obj.get("MinMaxValueExtended"),
                "Cv": obj.get("Cv"),
                "CvRaw": obj.get("CvRaw"),
                "CVDecimalPlaces": obj.get("CVDecimalPlaces"),
                "CvExtended": obj.get("CvExtended"),
                "Result": obj.get("Result"),
                "RangeResult": obj.get("RangeResult"),
                "DeltaResult": obj.get("DeltaResult"),
                "MinResult": obj.get("MinResult"),
                "MaxResult": obj.get("MaxResult"),
                "TarResult": obj.get("TarResult"),
                "TurResult": obj.get("TurResult"),
                "ErrorResult": obj.get("ErrorResult"),
                "SdResult": obj.get("SdResult"),
                "CvResult": obj.get("CvResult"),
                "CustomFieldResult": obj.get("CustomFieldResult"),
                "Mu": obj.get("Mu"),
                "MuRaw": obj.get("MuRaw"),
                "MUEffectiveDOF": obj.get("MUEffectiveDOF"),
                "MUCoverageFactor": obj.get("MUCoverageFactor"),
                "MuExtended": obj.get("MuExtended"),
                "Cmc": obj.get("Cmc"),
                "CmcComments": obj.get("CmcComments"),
                "Tur": obj.get("Tur"),
                "TurRaw": obj.get("TurRaw"),
                "TURDecimalPlaces": obj.get("TURDecimalPlaces"),
                "Tar": obj.get("Tar"),
                "TarRaw": obj.get("TarRaw"),
                "TARDecimalPlaces": obj.get("TARDecimalPlaces"),
                "GuardBand": obj.get("GuardBand"),
                "GuardBandLogic": obj.get("GuardBandLogic"),
                "UncertaintyBudget": obj.get("UncertaintyBudget"),
                "CalculatedUncertainty": obj.get("CalculatedUncertainty"),
                "LockUncertaintyBudget": obj.get("LockUncertaintyBudget"),
                "LabMu": obj.get("LabMu"),
                "Channel": obj.get("Channel"),
                "MeasurementType": obj.get("MeasurementType"),
                "UpdatedBy": obj.get("UpdatedBy"),
                "UpdatedOn": obj.get("UpdatedOn"),
                "Error": obj.get("Error"),
                "ErrorExtended": obj.get("ErrorExtended"),
                "RequireAdjustment": obj.get("RequireAdjustment"),
                "AdjustmentThreshold": obj.get("AdjustmentThreshold"),
                "PercentOfTolerance": obj.get("PercentOfTolerance"),
                "PercentOfToleranceExtended": obj.get("PercentOfToleranceExtended"),
                "TOLDecimalPlaces": obj.get("TOLDecimalPlaces"),
                "SpecificationTitle": obj.get("SpecificationTitle"),
                "SpecificationSubtitle": obj.get("SpecificationSubtitle"),
                "SpecificationGroup": obj.get("SpecificationGroup"),
                "BatchType": obj.get("BatchType"),
                "BatchResult": obj.get("BatchResult"),
                "IsByChannel": obj.get("IsByChannel"),
                "ChannelCount": obj.get("ChannelCount"),
                "IsRangeAccredited": obj.get("IsRangeAccredited"),
                "CommencedOn": obj.get("CommencedOn"),
                "CommencedBy": obj.get("CommencedBy"),
                "ZFactor": obj.get("ZFactor"),
                "AirBuoyancy": obj.get("AirBuoyancy"),
                "EvaporationRate": obj.get("EvaporationRate"),
                "AirHumidity": obj.get("AirHumidity"),
                "Altitude": obj.get("Altitude"),
                "AmbientTemperature": obj.get("AmbientTemperature"),
                "BarometricPressure": obj.get("BarometricPressure"),
                "LightIntensity": obj.get("LightIntensity"),
                "NoiseLevel": obj.get("NoiseLevel"),
                "PhLevel": obj.get("PhLevel"),
                "WaterConductivity": obj.get("WaterConductivity"),
                "WaterTemperature": obj.get("WaterTemperature"),
                "SolarRadiation": obj.get("SolarRadiation"),
                "WindSpeed": obj.get("WindSpeed"),
                "ZFactorUom": obj.get("ZFactorUom"),
                "AirBuoyancyUom": obj.get("AirBuoyancyUom"),
                "EvaporationRateUom": obj.get("EvaporationRateUom"),
                "AirHumidityUom": obj.get("AirHumidityUom"),
                "AltitudeUom": obj.get("AltitudeUom"),
                "AmbientTemperatureUom": obj.get("AmbientTemperatureUom"),
                "BarometricPressureUom": obj.get("BarometricPressureUom"),
                "LightIntensityUom": obj.get("LightIntensityUom"),
                "NoiseLevelUom": obj.get("NoiseLevelUom"),
                "PhLevelUom": obj.get("PhLevelUom"),
                "WaterConductivityUom": obj.get("WaterConductivityUom"),
                "WaterTemperatureUom": obj.get("WaterTemperatureUom"),
                "SolarRadiationUom": obj.get("SolarRadiationUom"),
                "WindSpeedUom": obj.get("WindSpeedUom"),
                "SpecificationName": obj.get("SpecificationName"),
                "ParameterName": obj.get("ParameterName"),
                "MeasurementSetDisplayOrder": obj.get("MeasurementSetDisplayOrder"),
                "DisplayOrder": obj.get("DisplayOrder"),
                "UnitOfMeasure": obj.get("UnitOfMeasure"),
                "DisplayFormat": obj.get("DisplayFormat"),
                "Precision": obj.get("Precision"),
                "Minimum": obj.get("Minimum"),
                "Nominal": obj.get("Nominal"),
                "ExpectedValue": obj.get("ExpectedValue"),
                "ExpectedValueRaw": obj.get("ExpectedValueRaw"),
                "TestValue": obj.get("TestValue"),
                "BaseValue": obj.get("BaseValue"),
                "UseExpectedValue": obj.get("UseExpectedValue"),
                "ReadingEntryLogic": obj.get("ReadingEntryLogic"),
                "ReadingEntryMath": obj.get("ReadingEntryMath"),
                "DoubleSubstitutionSequence": obj.get("DoubleSubstitutionSequence"),
                "ReadingEntryMathString": obj.get("ReadingEntryMathString"),
                "NominalExtended": obj.get("NominalExtended"),
                "ExpectedValueExtended": obj.get("ExpectedValueExtended"),
                "Maximum": obj.get("Maximum"),
                "ToleranceMin": obj.get("ToleranceMin"),
                "ToleranceMax": obj.get("ToleranceMax"),
                "Resolution": obj.get("Resolution"),
                "ResolutionCount": obj.get("ResolutionCount"),
                "MinMaxHeader": obj.get("MinMaxHeader"),
                "AccuracyClass": obj.get("AccuracyClass"),
                "AccuracyClassMin": obj.get("AccuracyClassMin"),
                "AccuracyClassMax": obj.get("AccuracyClassMax"),
                "EnvironmentMask": obj.get("EnvironmentMask"),
                "DisplayName": obj.get("DisplayName"),
                "DisplayPartNumber": obj.get("DisplayPartNumber"),
                "PartNumber": obj.get("PartNumber"),
                "VendorCompanyId": obj.get("VendorCompanyId"),
                "ServiceOrderNumber": obj.get("ServiceOrderNumber"),
                "CustomOrderNumber": obj.get("CustomOrderNumber"),
                "CompletedByName": obj.get("CompletedByName"),
                "CompletedOn": obj.get("CompletedOn"),
                "IsLimited": obj.get("IsLimited"),
                "VendorTag": obj.get("VendorTag"),
                "VendorServiceNotes": obj.get("VendorServiceNotes"),
                "Room": obj.get("Room"),
                "SegmentName": obj.get("SegmentName"),
                "ScheduleName": obj.get("ScheduleName"),
                "NextSegmentName": obj.get("NextSegmentName"),
                "CertificateNumber": obj.get("CertificateNumber"),
                "WorkStatus": obj.get("WorkStatus"),
                "ServiceType": obj.get("ServiceType"),
                "ServiceLevel": obj.get("ServiceLevel"),
                "Barcode": obj.get("Barcode"),
                "ServiceComments": obj.get("ServiceComments"),
                "OrderItemNumber": obj.get("OrderItemNumber"),
                "AssetTag": obj.get("AssetTag"),
                "AssetUser": obj.get("AssetUser"),
                "SerialNumber": obj.get("SerialNumber"),
                "EquipmentId": obj.get("EquipmentId"),
                "LegacyIdentifier": obj.get("LegacyIdentifier"),
                "SiteName": obj.get("SiteName"),
                "AssetName": obj.get("AssetName"),
                "AssetDescription": obj.get("AssetDescription"),
                "ProductName": obj.get("ProductName"),
                "ProductDescription": obj.get("ProductDescription"),
                "AssetMaker": obj.get("AssetMaker"),
                "Station": obj.get("Station"),
                "AssetTagChange": obj.get("AssetTagChange"),
                "AssetUserChange": obj.get("AssetUserChange"),
                "SerialNumberChange": obj.get("SerialNumberChange"),
                "ServiceDate": obj.get("ServiceDate"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "MeasurementBatchId": obj.get("MeasurementBatchId"),
                "MeasurementId": obj.get("MeasurementId"),
                "StandardId": obj.get("StandardId"),
                "ToolId": obj.get("ToolId"),
                "MeasurementToolId": obj.get("MeasurementToolId"),
                "MeasurementConditionId": obj.get("MeasurementConditionId"),
                "MeasurementPointId": obj.get("MeasurementPointId"),
                "MeasurementSetId": obj.get("MeasurementSetId"),
                "IsHidden": obj.get("IsHidden"),
                "Readings": obj.get("Readings"),
                "ToleranceType": obj.get("ToleranceType"),
                "ToleranceTypeString": obj.get("ToleranceTypeString"),
                "PrecisionType": obj.get("PrecisionType"),
                "SpecificationMode": obj.get("SpecificationMode"),
                "ToleranceMode": obj.get("ToleranceMode"),
                "ToleranceUnit": obj.get("ToleranceUnit"),
                "ToleranceString": obj.get("ToleranceString"),
                "PoNumber": obj.get("PoNumber"),
                "SecondaryPo": obj.get("SecondaryPo"),
                "ShippedDate": obj.get("ShippedDate"),
                "ShipmentStatus": obj.get("ShipmentStatus"),
                "ShippedOn": obj.get("ShippedOn"),
                "DeliveredOn": obj.get("DeliveredOn"),
                "TrackingNumber": obj.get("TrackingNumber"),
                "PaymentTerms": obj.get("PaymentTerms"),
                "ShippingMethod": obj.get("ShippingMethod"),
                "Location": obj.get("Location"),
                "SiteAccessNotes": obj.get("SiteAccessNotes"),
                "AbbreviatedUOM": obj.get("AbbreviatedUOM"),
                "UnitScaleFactor": obj.get("UnitScaleFactor"),
                "MeasurementNotTakenResult": obj.get("MeasurementNotTakenResult"),
                "HideFromCertificate": obj.get("HideFromCertificate"),
                "MeasurementNotTakenReason": obj.get("MeasurementNotTakenReason"),
                "EnvironmentText1": obj.get("EnvironmentText1"),
                "EnvironmentText2": obj.get("EnvironmentText2"),
                "EnvironmentText3": obj.get("EnvironmentText3"),
                "EnvironmentText4": obj.get("EnvironmentText4"),
                "EnvironmentText5": obj.get("EnvironmentText5"),
                "EnvironmentText6": obj.get("EnvironmentText6"),
                "Values": obj.get("Values"),
                "Value1": obj.get("Value1"),
                "Value2": obj.get("Value2"),
                "Value3": obj.get("Value3"),
                "Value4": obj.get("Value4"),
                "Value5": obj.get("Value5"),
                "Value6": obj.get("Value6"),
                "Value7": obj.get("Value7"),
                "Value8": obj.get("Value8"),
                "Value9": obj.get("Value9"),
                "Value10": obj.get("Value10"),
                "Value11": obj.get("Value11"),
                "Value12": obj.get("Value12"),
                "Value13": obj.get("Value13"),
                "Value14": obj.get("Value14"),
                "Value15": obj.get("Value15"),
                "Value16": obj.get("Value16"),
                "Value17": obj.get("Value17"),
                "Value18": obj.get("Value18"),
                "Value19": obj.get("Value19"),
                "Value20": obj.get("Value20"),
                "Value21": obj.get("Value21"),
                "Value22": obj.get("Value22"),
                "Value23": obj.get("Value23"),
                "Value24": obj.get("Value24"),
                "Value25": obj.get("Value25"),
                "Value26": obj.get("Value26"),
                "Value27": obj.get("Value27"),
                "Value28": obj.get("Value28"),
                "Value29": obj.get("Value29"),
                "Value30": obj.get("Value30"),
                "Value31": obj.get("Value31"),
                "Value32": obj.get("Value32"),
                "Value33": obj.get("Value33"),
                "Value34": obj.get("Value34"),
                "Value35": obj.get("Value35"),
                "Value36": obj.get("Value36"),
                "Value37": obj.get("Value37"),
                "Value38": obj.get("Value38"),
                "Value39": obj.get("Value39"),
                "Value40": obj.get("Value40"),
                "RawValue1": obj.get("RawValue1"),
                "RawValue2": obj.get("RawValue2"),
                "RawValue3": obj.get("RawValue3"),
                "RawValue4": obj.get("RawValue4"),
                "RawValue5": obj.get("RawValue5"),
                "RawValue6": obj.get("RawValue6"),
                "RawValue7": obj.get("RawValue7"),
                "RawValue8": obj.get("RawValue8"),
                "RawValue9": obj.get("RawValue9"),
                "RawValue10": obj.get("RawValue10"),
                "RawValue11": obj.get("RawValue11"),
                "RawValue12": obj.get("RawValue12"),
                "RawValue13": obj.get("RawValue13"),
                "RawValue14": obj.get("RawValue14"),
                "RawValue15": obj.get("RawValue15"),
                "RawValue16": obj.get("RawValue16"),
                "RawValue17": obj.get("RawValue17"),
                "RawValue18": obj.get("RawValue18"),
                "RawValue19": obj.get("RawValue19"),
                "RawValue20": obj.get("RawValue20"),
                "RawValue21": obj.get("RawValue21"),
                "RawValue22": obj.get("RawValue22"),
                "RawValue23": obj.get("RawValue23"),
                "RawValue24": obj.get("RawValue24"),
                "RawValue25": obj.get("RawValue25"),
                "RawValue26": obj.get("RawValue26"),
                "RawValue27": obj.get("RawValue27"),
                "RawValue28": obj.get("RawValue28"),
                "RawValue29": obj.get("RawValue29"),
                "RawValue30": obj.get("RawValue30"),
                "RawValue31": obj.get("RawValue31"),
                "RawValue32": obj.get("RawValue32"),
                "RawValue33": obj.get("RawValue33"),
                "RawValue34": obj.get("RawValue34"),
                "RawValue35": obj.get("RawValue35"),
                "RawValue36": obj.get("RawValue36"),
                "RawValue37": obj.get("RawValue37"),
                "RawValue38": obj.get("RawValue38"),
                "RawValue39": obj.get("RawValue39"),
                "RawValue40": obj.get("RawValue40"),
                "SubtitlesToReadings": obj.get("SubtitlesToReadings"),
                "ValueSubtitle1": obj.get("ValueSubtitle1"),
                "ValueSubtitle2": obj.get("ValueSubtitle2"),
                "ValueSubtitle3": obj.get("ValueSubtitle3"),
                "ValueSubtitle4": obj.get("ValueSubtitle4"),
                "ValueSubtitle5": obj.get("ValueSubtitle5"),
                "ValueSubtitle6": obj.get("ValueSubtitle6"),
                "ValueSubtitle7": obj.get("ValueSubtitle7"),
                "ValueSubtitle8": obj.get("ValueSubtitle8"),
                "ValueSubtitle9": obj.get("ValueSubtitle9"),
                "ValueSubtitle10": obj.get("ValueSubtitle10"),
                "ValueSubtitle11": obj.get("ValueSubtitle11"),
                "ValueSubtitle12": obj.get("ValueSubtitle12"),
                "ValueSubtitle13": obj.get("ValueSubtitle13"),
                "ValueSubtitle14": obj.get("ValueSubtitle14"),
                "ValueSubtitle15": obj.get("ValueSubtitle15"),
                "ValueSubtitle16": obj.get("ValueSubtitle16"),
                "ValueSubtitle17": obj.get("ValueSubtitle17"),
                "ValueSubtitle18": obj.get("ValueSubtitle18"),
                "ValueSubtitle19": obj.get("ValueSubtitle19"),
                "ValueSubtitle20": obj.get("ValueSubtitle20"),
                "ValueSubtitle21": obj.get("ValueSubtitle21"),
                "ValueSubtitle22": obj.get("ValueSubtitle22"),
                "ValueSubtitle23": obj.get("ValueSubtitle23"),
                "ValueSubtitle24": obj.get("ValueSubtitle24"),
                "ValueSubtitle25": obj.get("ValueSubtitle25"),
                "ValueSubtitle26": obj.get("ValueSubtitle26"),
                "ValueSubtitle27": obj.get("ValueSubtitle27"),
                "ValueSubtitle28": obj.get("ValueSubtitle28"),
                "ValueSubtitle29": obj.get("ValueSubtitle29"),
                "ValueSubtitle30": obj.get("ValueSubtitle30"),
                "ValueSubtitle31": obj.get("ValueSubtitle31"),
                "ValueSubtitle32": obj.get("ValueSubtitle32"),
                "ValueSubtitle33": obj.get("ValueSubtitle33"),
                "ValueSubtitle34": obj.get("ValueSubtitle34"),
                "ValueSubtitle35": obj.get("ValueSubtitle35"),
                "ValueSubtitle36": obj.get("ValueSubtitle36"),
                "ValueSubtitle37": obj.get("ValueSubtitle37"),
                "ValueSubtitle38": obj.get("ValueSubtitle38"),
                "ValueSubtitle39": obj.get("ValueSubtitle39"),
                "ValueSubtitle40": obj.get("ValueSubtitle40"),
                "ValuesDecimalPlaces": obj.get("ValuesDecimalPlaces"),
                "RepeatMeasurementAndCalculateHysteresis": obj.get(
                    "RepeatMeasurementAndCalculateHysteresis"
                ),
                "MeasurementPointOrder": obj.get("MeasurementPointOrder"),
                "HysteresisPoint": obj.get("HysteresisPoint"),
                "MaxHysteresis": obj.get("MaxHysteresis"),
                "Run": obj.get("Run"),
                "Direction": obj.get("Direction"),
                "Hysteresis": obj.get("Hysteresis"),
                "ColumnMean": obj.get("ColumnMean"),
                "ColumnMeanResult": obj.get("ColumnMeanResult"),
                "ColumnSD": obj.get("ColumnSD"),
                "ColumnSDResult": obj.get("ColumnSDResult"),
                "ColumnCV": obj.get("ColumnCV"),
                "ColumnCVResult": obj.get("ColumnCVResult"),
                "ColumnRange": obj.get("ColumnRange"),
                "ColumnRangeResult": obj.get("ColumnRangeResult"),
                "ColumnDelta": obj.get("ColumnDelta"),
                "ColumnDeltaResult": obj.get("ColumnDeltaResult"),
                "ColumnResult": obj.get("ColumnResult"),
            }
        )
        return _obj
