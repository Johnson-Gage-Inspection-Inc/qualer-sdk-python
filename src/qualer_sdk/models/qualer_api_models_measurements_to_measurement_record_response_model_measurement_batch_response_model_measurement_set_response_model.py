# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_custom_fields import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelCustomFields,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_display_options import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel,
)


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel(
    BaseModel
):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel
    """

    measurement_name: Optional[StrictStr] = Field(None, alias="MeasurementName")
    is_accredited: Optional[StrictBool] = Field(None, alias="IsAccredited")
    measurement_quantity_id: Optional[StrictInt] = Field(
        None, alias="MeasurementQuantityId"
    )
    default_unit_of_measure_id: Optional[StrictInt] = Field(
        None, alias="DefaultUnitOfMeasureId"
    )
    decimal_places: Optional[StrictInt] = Field(None, alias="DecimalPlaces")
    significant_figures: Optional[StrictInt] = Field(None, alias="SignificantFigures")
    display_options: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions
    ] = Field(None, alias="DisplayOptions")
    custom_fields: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelCustomFields
    ] = Field(None, alias="CustomFields")
    measurement_points: Optional[
        conlist(
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel
        )
    ] = Field(None, alias="MeasurementPoints")
    __properties = [
        "MeasurementName",
        "IsAccredited",
        "MeasurementQuantityId",
        "DefaultUnitOfMeasureId",
        "DecimalPlaces",
        "SignificantFigures",
        "DisplayOptions",
        "CustomFields",
        "MeasurementPoints",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict["DisplayOptions"] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict["CustomFields"] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_points (list)
        _items = []
        if self.measurement_points:
            for _item in self.measurement_points:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MeasurementPoints"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModel.parse_obj(
            {
                "measurement_name": obj.get("MeasurementName"),
                "is_accredited": obj.get("IsAccredited"),
                "measurement_quantity_id": obj.get("MeasurementQuantityId"),
                "default_unit_of_measure_id": obj.get("DefaultUnitOfMeasureId"),
                "decimal_places": obj.get("DecimalPlaces"),
                "significant_figures": obj.get("SignificantFigures"),
                "display_options": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions.from_dict(
                        obj.get("DisplayOptions")
                    )
                    if obj.get("DisplayOptions") is not None
                    else None
                ),
                "custom_fields": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelCustomFields.from_dict(
                        obj.get("CustomFields")
                    )
                    if obj.get("CustomFields") is not None
                    else None
                ),
                "measurement_points": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.from_dict(
                            _item
                        )
                        for _item in obj.get("MeasurementPoints")
                    ]
                    if obj.get("MeasurementPoints") is not None
                    else None
                ),
            }
        )
        return _obj
