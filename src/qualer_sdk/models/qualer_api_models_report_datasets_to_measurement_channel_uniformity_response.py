# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse
    """  # noqa: E501

    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    measurement_point_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementPointId"
    )
    batch_type: Optional[StrictStr] = Field(default=None, alias="BatchType")
    column_index: Optional[StrictInt] = Field(default=None, alias="ColumnIndex")
    mean: Optional[StrictStr] = Field(default=None, alias="Mean")
    mean_result: Optional[StrictBool] = Field(default=None, alias="MeanResult")
    sd: Optional[StrictStr] = Field(default=None, alias="SD")
    sd_result: Optional[StrictBool] = Field(default=None, alias="SDResult")
    cv: Optional[StrictStr] = Field(default=None, alias="CV")
    cv_result: Optional[StrictBool] = Field(default=None, alias="CVResult")
    range: Optional[StrictStr] = Field(default=None, alias="Range")
    range_result: Optional[StrictBool] = Field(default=None, alias="RangeResult")
    delta: Optional[StrictStr] = Field(default=None, alias="Delta")
    delta_result: Optional[StrictBool] = Field(default=None, alias="DeltaResult")
    result: Optional[StrictStr] = Field(default=None, alias="Result")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderItemId",
        "MeasurementPointId",
        "BatchType",
        "ColumnIndex",
        "Mean",
        "MeanResult",
        "SD",
        "SDResult",
        "CV",
        "CVResult",
        "Range",
        "RangeResult",
        "Delta",
        "DeltaResult",
        "Result",
    ]

    @field_validator("batch_type")
    def batch_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Unset", "AsFound", "AsLeft"]):
            raise ValueError(
                "must be one of enum values ('Unset', 'AsFound', 'AsLeft')"
            )
        return value

    @field_validator("result")
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotServiced",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
                "Pending",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementChannelUniformityResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "MeasurementPointId": obj.get("MeasurementPointId"),
                "BatchType": obj.get("BatchType"),
                "ColumnIndex": obj.get("ColumnIndex"),
                "Mean": obj.get("Mean"),
                "MeanResult": obj.get("MeanResult"),
                "SD": obj.get("SD"),
                "SDResult": obj.get("SDResult"),
                "CV": obj.get("CV"),
                "CVResult": obj.get("CVResult"),
                "Range": obj.get("Range"),
                "RangeResult": obj.get("RangeResult"),
                "Delta": obj.get("Delta"),
                "DeltaResult": obj.get("DeltaResult"),
                "Result": obj.get("Result"),
            }
        )
        return _obj
