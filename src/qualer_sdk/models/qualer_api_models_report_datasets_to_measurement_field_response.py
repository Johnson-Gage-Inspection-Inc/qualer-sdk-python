# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class QualerApiModelsReportDatasetsToMeasurementFieldResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementFieldResponse
    """

    field_id: Optional[StrictStr] = Field(None, alias="FieldId")
    name: Optional[StrictStr] = Field(None, alias="Name")
    value: Optional[StrictStr] = Field(None, alias="Value")
    measurement_name: Optional[StrictStr] = Field(None, alias="MeasurementName")
    measurement_set_id: Optional[StrictInt] = Field(None, alias="MeasurementSetId")
    specification_name: Optional[StrictStr] = Field(None, alias="SpecificationName")
    measurement_point_id: Optional[StrictInt] = Field(None, alias="MeasurementPointId")
    batch_type: Optional[StrictStr] = Field(None, alias="BatchType")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    batch_field_id: Optional[StrictStr] = Field(None, alias="BatchFieldId")
    point_field_id: Optional[StrictStr] = Field(None, alias="PointFieldId")
    __properties = [
        "FieldId",
        "Name",
        "Value",
        "MeasurementName",
        "MeasurementSetId",
        "SpecificationName",
        "MeasurementPointId",
        "BatchType",
        "ServiceOrderItemId",
        "ServiceOrderId",
        "BatchFieldId",
        "PointFieldId",
    ]

    @validator("batch_type")
    def batch_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Unset", "AsFound", "AsLeft"):
            raise ValueError(
                "must be one of enum values ('Unset', 'AsFound', 'AsLeft')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToMeasurementFieldResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementFieldResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToMeasurementFieldResponse:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementFieldResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToMeasurementFieldResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsReportDatasetsToMeasurementFieldResponse.parse_obj(
            {
                "field_id": obj.get("FieldId"),
                "name": obj.get("Name"),
                "value": obj.get("Value"),
                "measurement_name": obj.get("MeasurementName"),
                "measurement_set_id": obj.get("MeasurementSetId"),
                "specification_name": obj.get("SpecificationName"),
                "measurement_point_id": obj.get("MeasurementPointId"),
                "batch_type": obj.get("BatchType"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "service_order_id": obj.get("ServiceOrderId"),
                "batch_field_id": obj.get("BatchFieldId"),
                "point_field_id": obj.get("PointFieldId"),
            }
        )
        return _obj
