# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class QualerApiModelsReportDatasetsToMeasurementFieldResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToMeasurementFieldResponse
    """  # noqa: E501

    field_id: Optional[StrictStr] = Field(default=None, alias="FieldId")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    value: Optional[StrictStr] = Field(default=None, alias="Value")
    measurement_name: Optional[StrictStr] = Field(default=None, alias="MeasurementName")
    measurement_set_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetId"
    )
    specification_name: Optional[StrictStr] = Field(
        default=None, alias="SpecificationName"
    )
    measurement_point_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementPointId"
    )
    batch_type: Optional[StrictStr] = Field(default=None, alias="BatchType")
    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    batch_field_id: Optional[StrictStr] = Field(default=None, alias="BatchFieldId")
    point_field_id: Optional[StrictStr] = Field(default=None, alias="PointFieldId")
    __properties: ClassVar[List[str]] = [
        "FieldId",
        "Name",
        "Value",
        "MeasurementName",
        "MeasurementSetId",
        "SpecificationName",
        "MeasurementPointId",
        "BatchType",
        "ServiceOrderItemId",
        "ServiceOrderId",
        "BatchFieldId",
        "PointFieldId",
    ]

    @field_validator("batch_type")
    def batch_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Unset", "AsFound", "AsLeft"]):
            raise ValueError(
                "must be one of enum values ('Unset', 'AsFound', 'AsLeft')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementFieldResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToMeasurementFieldResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "FieldId": obj.get("FieldId"),
                "Name": obj.get("Name"),
                "Value": obj.get("Value"),
                "MeasurementName": obj.get("MeasurementName"),
                "MeasurementSetId": obj.get("MeasurementSetId"),
                "SpecificationName": obj.get("SpecificationName"),
                "MeasurementPointId": obj.get("MeasurementPointId"),
                "BatchType": obj.get("BatchType"),
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "BatchFieldId": obj.get("BatchFieldId"),
                "PointFieldId": obj.get("PointFieldId"),
            }
        )
        return _obj
