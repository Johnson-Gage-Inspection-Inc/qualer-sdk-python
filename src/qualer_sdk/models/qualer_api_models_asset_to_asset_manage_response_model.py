# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    validator,
)


class QualerApiModelsAssetToAssetManageResponseModel(BaseModel):
    """
    QualerApiModelsAssetToAssetManageResponseModel
    """

    asset_id: Optional[StrictInt] = Field(None, alias="AssetId")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    asset_maker: Optional[StrictStr] = Field(None, alias="AssetMaker")
    record_type: Optional[StrictInt] = Field(None, alias="RecordType")
    parent_asset_id: Optional[StrictInt] = Field(None, alias="ParentAssetId")
    children_count: Optional[StrictInt] = Field(None, alias="ChildrenCount")
    site_id: Optional[StrictInt] = Field(None, alias="SiteId")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    legacy_identifier: Optional[StrictStr] = Field(None, alias="LegacyIdentifier")
    criticality: Optional[StrictStr] = Field(None, alias="Criticality")
    condition: Optional[StrictStr] = Field(None, alias="Condition")
    asset_class: Optional[StrictStr] = Field(None, alias="AssetClass")
    activation_date: Optional[datetime] = Field(None, alias="ActivationDate")
    retirment_date: Optional[datetime] = Field(None, alias="RetirmentDate")
    client_vendor_id: Optional[StrictInt] = Field(None, alias="ClientVendorId")
    company_name: Optional[StrictStr] = Field(None, alias="CompanyName")
    site_name: Optional[StrictStr] = Field(None, alias="SiteName")
    asset_has_image: Optional[StrictBool] = Field(None, alias="AssetHasImage")
    has_image: Optional[StrictBool] = Field(None, alias="HasImage")
    parent_has_image: Optional[StrictBool] = Field(None, alias="ParentHasImage")
    pool_id: Optional[StrictInt] = Field(None, alias="PoolId")
    pool: Optional[StrictStr] = Field(None, alias="Pool")
    product_id: Optional[StrictInt] = Field(None, alias="ProductId")
    parent_product_id: Optional[StrictInt] = Field(None, alias="ParentProductId")
    product_name: Optional[StrictStr] = Field(None, alias="ProductName")
    parent_product_name: Optional[StrictStr] = Field(None, alias="ParentProductName")
    category_id: Optional[StrictInt] = Field(None, alias="CategoryId")
    root_category_id: Optional[StrictInt] = Field(None, alias="RootCategoryId")
    category_name: Optional[StrictStr] = Field(None, alias="CategoryName")
    root_category_name: Optional[StrictStr] = Field(None, alias="RootCategoryName")
    manufacturer_id: Optional[StrictInt] = Field(None, alias="ManufacturerId")
    manufacturer: Optional[StrictStr] = Field(None, alias="Manufacturer")
    display_part_number: Optional[StrictStr] = Field(None, alias="DisplayPartNumber")
    display_name: Optional[StrictStr] = Field(None, alias="DisplayName")
    manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="ManufacturerPartNumber"
    )
    asset_room: Optional[StrictStr] = Field(None, alias="AssetRoom")
    location: Optional[StrictStr] = Field(None, alias="Location")
    station: Optional[StrictStr] = Field(None, alias="Station")
    tool_role: Optional[StrictStr] = Field(None, alias="ToolRole")
    tool_id: Optional[StrictInt] = Field(None, alias="ToolId")
    department_id: Optional[StrictInt] = Field(None, alias="DepartmentId")
    department_name: Optional[StrictStr] = Field(None, alias="DepartmentName")
    custodian_name: Optional[StrictStr] = Field(None, alias="CustodianName")
    warranty: Optional[StrictStr] = Field(None, alias="Warranty")
    warranty_end: Optional[datetime] = Field(None, alias="WarrantyEnd")
    is_warranty_expired: Optional[StrictBool] = Field(None, alias="IsWarrantyExpired")
    depreciation_method: Optional[StrictInt] = Field(None, alias="DepreciationMethod")
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="DepreciationBasis"
    )
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="SalvageValue"
    )
    total_service_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="TotalServiceCost"
    )
    life_span_months: Optional[StrictInt] = Field(None, alias="LifeSpanMonths")
    due_for_replacement_date: Optional[datetime] = Field(
        None, alias="DueForReplacementDate"
    )
    depreciation_proc: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="DepreciationProc"
    )
    purchase_date: Optional[datetime] = Field(None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PurchaseCost"
    )
    time_in_service: Optional[StrictInt] = Field(None, alias="TimeInService")
    retirement_reason: Optional[StrictStr] = Field(None, alias="RetirementReason")
    residual_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ResidualCost"
    )
    employee_id: Optional[StrictInt] = Field(None, alias="EmployeeId")
    asset_service_record_id: Optional[StrictInt] = Field(
        None, alias="AssetServiceRecordId"
    )
    result_status: Optional[StrictStr] = Field(None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(None, alias="AsLeftResult")
    last_service_date: Optional[datetime] = Field(None, alias="LastServiceDate")
    last_service: Optional[StrictStr] = Field(None, alias="LastService")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    next_service: Optional[StrictStr] = Field(None, alias="NextService")
    service_schedule_segment_id: Optional[StrictInt] = Field(
        None, alias="ServiceScheduleSegmentId"
    )
    service_schedule_id: Optional[StrictInt] = Field(None, alias="ServiceScheduleId")
    service_schedule: Optional[StrictStr] = Field(None, alias="ServiceSchedule")
    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    service_order_status: Optional[StrictStr] = Field(None, alias="ServiceOrderStatus")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    vendor: Optional[StrictStr] = Field(None, alias="Vendor")
    technician: Optional[StrictStr] = Field(None, alias="Technician")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    due_trigger_date: Optional[datetime] = Field(None, alias="DueTriggerDate")
    past_due_trigger_date: Optional[datetime] = Field(None, alias="PastDueTriggerDate")
    due_status: Optional[StrictStr] = Field(None, alias="DueStatus")
    work_status: Optional[StrictStr] = Field(None, alias="WorkStatus")
    __properties = [
        "AssetId",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "RecordType",
        "ParentAssetId",
        "ChildrenCount",
        "SiteId",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "EquipmentId",
        "LegacyIdentifier",
        "Criticality",
        "Condition",
        "AssetClass",
        "ActivationDate",
        "RetirmentDate",
        "ClientVendorId",
        "CompanyName",
        "SiteName",
        "AssetHasImage",
        "HasImage",
        "ParentHasImage",
        "PoolId",
        "Pool",
        "ProductId",
        "ParentProductId",
        "ProductName",
        "ParentProductName",
        "CategoryId",
        "RootCategoryId",
        "CategoryName",
        "RootCategoryName",
        "ManufacturerId",
        "Manufacturer",
        "DisplayPartNumber",
        "DisplayName",
        "ManufacturerPartNumber",
        "AssetRoom",
        "Location",
        "Station",
        "ToolRole",
        "ToolId",
        "DepartmentId",
        "DepartmentName",
        "CustodianName",
        "Warranty",
        "WarrantyEnd",
        "IsWarrantyExpired",
        "DepreciationMethod",
        "DepreciationBasis",
        "SalvageValue",
        "TotalServiceCost",
        "LifeSpanMonths",
        "DueForReplacementDate",
        "DepreciationProc",
        "PurchaseDate",
        "PurchaseCost",
        "TimeInService",
        "RetirementReason",
        "ResidualCost",
        "EmployeeId",
        "AssetServiceRecordId",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "LastServiceDate",
        "LastService",
        "NextServiceDate",
        "NextService",
        "ServiceScheduleSegmentId",
        "ServiceScheduleId",
        "ServiceSchedule",
        "ServiceOrderId",
        "ServiceOrderStatus",
        "CustomOrderNumber",
        "ServiceOrderItemId",
        "Vendor",
        "Technician",
        "CertificateNumber",
        "DueTriggerDate",
        "PastDueTriggerDate",
        "DueStatus",
        "WorkStatus",
    ]

    @validator("record_type")
    def record_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (0, 1, 2, 3):
            raise ValueError("must be one of enum values (0, 1, 2, 3)")
        return value

    @validator("tool_role")
    def tool_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("0", "1", "2", "3"):
            raise ValueError("must be one of enum values ('0', '1', '2', '3')")
        return value

    @validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
            "Pending",
            "Missed",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @validator("as_found_result")
    def as_found_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
            "Pending",
            "Missed",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @validator("as_left_result")
    def as_left_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
            "Pending",
            "Missed",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @validator("service_order_status")
    def service_order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "New",
            "Draft",
            "WaitingForApproval",
            "Submitted",
            "Processing",
            "QualityControl",
            "Cancelled",
            "WaitingForClientSignOff",
            "Completed",
            "Denied",
            "Delayed",
            "Scheduling",
            "Closed",
            "WaitingForVendorSignOff",
            "DelayedApproval",
            "Ready",
        ):
            raise ValueError(
                "must be one of enum values ('New', 'Draft', 'WaitingForApproval', 'Submitted', 'Processing', 'QualityControl', 'Cancelled', 'WaitingForClientSignOff', 'Completed', 'Denied', 'Delayed', 'Scheduling', 'Closed', 'WaitingForVendorSignOff', 'DelayedApproval', 'Ready')"
            )
        return value

    @validator("due_status")
    def due_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("0", "1", "2"):
            raise ValueError("must be one of enum values ('0', '1', '2')")
        return value

    @validator("work_status")
    def work_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Pending",
            "InProgress",
            "Completed",
            "Delayed",
            "Withdrawn",
            "Locked",
            "New",
            "Closed",
            "Wait",
        ):
            raise ValueError(
                "must be one of enum values ('Pending', 'InProgress', 'Completed', 'Delayed', 'Withdrawn', 'Locked', 'New', 'Closed', 'Wait')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QualerApiModelsAssetToAssetManageResponseModel:
        """Create an instance of QualerApiModelsAssetToAssetManageResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsAssetToAssetManageResponseModel:
        """Create an instance of QualerApiModelsAssetToAssetManageResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsAssetToAssetManageResponseModel.parse_obj(obj)

        _obj = QualerApiModelsAssetToAssetManageResponseModel.parse_obj(
            {
                "asset_id": obj.get("AssetId"),
                "asset_name": obj.get("AssetName"),
                "asset_description": obj.get("AssetDescription"),
                "asset_maker": obj.get("AssetMaker"),
                "record_type": obj.get("RecordType"),
                "parent_asset_id": obj.get("ParentAssetId"),
                "children_count": obj.get("ChildrenCount"),
                "site_id": obj.get("SiteId"),
                "serial_number": obj.get("SerialNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "equipment_id": obj.get("EquipmentId"),
                "legacy_identifier": obj.get("LegacyIdentifier"),
                "criticality": obj.get("Criticality"),
                "condition": obj.get("Condition"),
                "asset_class": obj.get("AssetClass"),
                "activation_date": obj.get("ActivationDate"),
                "retirment_date": obj.get("RetirmentDate"),
                "client_vendor_id": obj.get("ClientVendorId"),
                "company_name": obj.get("CompanyName"),
                "site_name": obj.get("SiteName"),
                "asset_has_image": obj.get("AssetHasImage"),
                "has_image": obj.get("HasImage"),
                "parent_has_image": obj.get("ParentHasImage"),
                "pool_id": obj.get("PoolId"),
                "pool": obj.get("Pool"),
                "product_id": obj.get("ProductId"),
                "parent_product_id": obj.get("ParentProductId"),
                "product_name": obj.get("ProductName"),
                "parent_product_name": obj.get("ParentProductName"),
                "category_id": obj.get("CategoryId"),
                "root_category_id": obj.get("RootCategoryId"),
                "category_name": obj.get("CategoryName"),
                "root_category_name": obj.get("RootCategoryName"),
                "manufacturer_id": obj.get("ManufacturerId"),
                "manufacturer": obj.get("Manufacturer"),
                "display_part_number": obj.get("DisplayPartNumber"),
                "display_name": obj.get("DisplayName"),
                "manufacturer_part_number": obj.get("ManufacturerPartNumber"),
                "asset_room": obj.get("AssetRoom"),
                "location": obj.get("Location"),
                "station": obj.get("Station"),
                "tool_role": obj.get("ToolRole"),
                "tool_id": obj.get("ToolId"),
                "department_id": obj.get("DepartmentId"),
                "department_name": obj.get("DepartmentName"),
                "custodian_name": obj.get("CustodianName"),
                "warranty": obj.get("Warranty"),
                "warranty_end": obj.get("WarrantyEnd"),
                "is_warranty_expired": obj.get("IsWarrantyExpired"),
                "depreciation_method": obj.get("DepreciationMethod"),
                "depreciation_basis": obj.get("DepreciationBasis"),
                "salvage_value": obj.get("SalvageValue"),
                "total_service_cost": obj.get("TotalServiceCost"),
                "life_span_months": obj.get("LifeSpanMonths"),
                "due_for_replacement_date": obj.get("DueForReplacementDate"),
                "depreciation_proc": obj.get("DepreciationProc"),
                "purchase_date": obj.get("PurchaseDate"),
                "purchase_cost": obj.get("PurchaseCost"),
                "time_in_service": obj.get("TimeInService"),
                "retirement_reason": obj.get("RetirementReason"),
                "residual_cost": obj.get("ResidualCost"),
                "employee_id": obj.get("EmployeeId"),
                "asset_service_record_id": obj.get("AssetServiceRecordId"),
                "result_status": obj.get("ResultStatus"),
                "as_found_result": obj.get("AsFoundResult"),
                "as_left_result": obj.get("AsLeftResult"),
                "last_service_date": obj.get("LastServiceDate"),
                "last_service": obj.get("LastService"),
                "next_service_date": obj.get("NextServiceDate"),
                "next_service": obj.get("NextService"),
                "service_schedule_segment_id": obj.get("ServiceScheduleSegmentId"),
                "service_schedule_id": obj.get("ServiceScheduleId"),
                "service_schedule": obj.get("ServiceSchedule"),
                "service_order_id": obj.get("ServiceOrderId"),
                "service_order_status": obj.get("ServiceOrderStatus"),
                "custom_order_number": obj.get("CustomOrderNumber"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "vendor": obj.get("Vendor"),
                "technician": obj.get("Technician"),
                "certificate_number": obj.get("CertificateNumber"),
                "due_trigger_date": obj.get("DueTriggerDate"),
                "past_due_trigger_date": obj.get("PastDueTriggerDate"),
                "due_status": obj.get("DueStatus"),
                "work_status": obj.get("WorkStatus"),
            }
        )
        return _obj
