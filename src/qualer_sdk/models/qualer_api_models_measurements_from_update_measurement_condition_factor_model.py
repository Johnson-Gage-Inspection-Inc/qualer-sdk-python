# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "measurement_condition_factor_id": "int",
        "factor_id": "str",
        "factor_name": "str",
        "factor_value": "float",
        "factor_uom": "str",
    }

    attribute_map = {
        "measurement_condition_factor_id": "MeasurementConditionFactorId",
        "factor_id": "FactorId",
        "factor_name": "FactorName",
        "factor_value": "FactorValue",
        "factor_uom": "FactorUom",
    }

    def __init__(
        self,
        measurement_condition_factor_id=None,
        factor_id=None,
        factor_name=None,
        factor_value=None,
        factor_uom=None,
        _configuration=None,
    ):  # noqa: E501
        """QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._measurement_condition_factor_id = None
        self._factor_id = None
        self._factor_name = None
        self._factor_value = None
        self._factor_uom = None
        self.discriminator = None

        if measurement_condition_factor_id is not None:
            self.measurement_condition_factor_id = measurement_condition_factor_id
        if factor_id is not None:
            self.factor_id = factor_id
        if factor_name is not None:
            self.factor_name = factor_name
        if factor_value is not None:
            self.factor_value = factor_value
        if factor_uom is not None:
            self.factor_uom = factor_uom

    @property
    def measurement_condition_factor_id(self):
        """Gets the measurement_condition_factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501


        :return: The measurement_condition_factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :rtype: int
        """
        return self._measurement_condition_factor_id

    @measurement_condition_factor_id.setter
    def measurement_condition_factor_id(self, measurement_condition_factor_id):
        """Sets the measurement_condition_factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.


        :param measurement_condition_factor_id: The measurement_condition_factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :type: int
        """

        self._measurement_condition_factor_id = measurement_condition_factor_id

    @property
    def factor_id(self):
        """Gets the factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501


        :return: The factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :rtype: str
        """
        return self._factor_id

    @factor_id.setter
    def factor_id(self, factor_id):
        """Sets the factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.


        :param factor_id: The factor_id of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :type: str
        """

        self._factor_id = factor_id

    @property
    def factor_name(self):
        """Gets the factor_name of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501


        :return: The factor_name of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :rtype: str
        """
        return self._factor_name

    @factor_name.setter
    def factor_name(self, factor_name):
        """Sets the factor_name of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.


        :param factor_name: The factor_name of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :type: str
        """

        self._factor_name = factor_name

    @property
    def factor_value(self):
        """Gets the factor_value of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501


        :return: The factor_value of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :rtype: float
        """
        return self._factor_value

    @factor_value.setter
    def factor_value(self, factor_value):
        """Sets the factor_value of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.


        :param factor_value: The factor_value of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :type: float
        """

        self._factor_value = factor_value

    @property
    def factor_uom(self):
        """Gets the factor_uom of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501


        :return: The factor_uom of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :rtype: str
        """
        return self._factor_uom

    @factor_uom.setter
    def factor_uom(self, factor_uom):
        """Sets the factor_uom of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.


        :param factor_uom: The factor_uom of this QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel.  # noqa: E501
        :type: str
        """

        self._factor_uom = factor_uom

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(
            QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel, dict
        ):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(
            other, QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel
        ):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(
            other, QualerApiModelsMeasurementsFromUpdateMeasurementConditionFactorModel
        ):
            return True

        return self.to_dict() != other.to_dict()
