# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse(
    BaseModel
):
    """
    QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse
    """

    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    guid: Optional[StrictStr] = Field(None, alias="Guid")
    document_name: Optional[StrictStr] = Field(None, alias="DocumentName")
    file_name: Optional[StrictStr] = Field(None, alias="FileName")
    document_type: Optional[StrictStr] = Field(None, alias="DocumentType")
    revision_number: Optional[StrictInt] = Field(None, alias="RevisionNumber")
    report_type: Optional[StrictStr] = Field(None, alias="ReportType")
    download_url: Optional[StrictStr] = Field(None, alias="DownloadUrl")
    __properties = [
        "ServiceOrderId",
        "ServiceOrderItemId",
        "Guid",
        "DocumentName",
        "FileName",
        "DocumentType",
        "RevisionNumber",
        "ReportType",
        "DownloadUrl",
    ]

    @validator("document_type")
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("0", "1", "2", "3"):
            raise ValueError("must be one of enum values ('0', '1', '2', '3')")
        return value

    @validator("report_type")
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "0",
            "1",
            "11",
            "2",
            "21",
            "3",
            "31",
            "32",
            "5",
            "51",
            "6",
            "7",
            "71",
        ):
            raise ValueError(
                "must be one of enum values ('0', '1', '11', '2', '21', '3', '31', '32', '5', '51', '6', '7', '71')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> (
        QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse
    ):
        """Create an instance of QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> (
        QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse
    ):
        """Create an instance of QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse.parse_obj(
            {
                "service_order_id": obj.get("ServiceOrderId"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "guid": obj.get("Guid"),
                "document_name": obj.get("DocumentName"),
                "file_name": obj.get("FileName"),
                "document_type": obj.get("DocumentType"),
                "revision_number": obj.get("RevisionNumber"),
                "report_type": obj.get("ReportType"),
                "download_url": obj.get("DownloadUrl"),
            }
        )
        return _obj
