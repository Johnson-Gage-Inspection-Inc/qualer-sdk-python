# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator


class QualerApiModelsEnvironmentToEnvironmentModel(BaseModel):
    """
    QualerApiModelsEnvironmentToEnvironmentModel
    """

    room_name: Optional[StrictStr] = Field(None, alias="RoomName")
    factor_id: Optional[StrictStr] = Field(None, alias="FactorId")
    station_id: Optional[StrictInt] = Field(None, alias="StationId")
    factor_name: Optional[StrictStr] = Field(None, alias="FactorName")
    factor_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="FactorValue"
    )
    valid_range_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ValidRangeMin"
    )
    valid_range_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ValidRangeMax"
    )
    unit_of_measure: Optional[StrictStr] = Field(None, alias="UnitOfMeasure")
    __properties = [
        "RoomName",
        "FactorId",
        "StationId",
        "FactorName",
        "FactorValue",
        "ValidRangeMin",
        "ValidRangeMax",
        "UnitOfMeasure",
    ]

    @validator("factor_id")
    def factor_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "AmbientTemperature",
            "AirHumidity",
            "BarometricPressure",
            "EvaporationRate",
            "AirBuoyancy",
            "ZFactor",
            "Altitude",
            "WindSpeed",
            "SolarRadiation",
            "LightIntensity",
            "NoiseLevel",
            "PhLevel",
            "WaterConductivity",
            "WaterTemperature",
        ):
            raise ValueError(
                "must be one of enum values ('AmbientTemperature', 'AirHumidity', 'BarometricPressure', 'EvaporationRate', 'AirBuoyancy', 'ZFactor', 'Altitude', 'WindSpeed', 'SolarRadiation', 'LightIntensity', 'NoiseLevel', 'PhLevel', 'WaterConductivity', 'WaterTemperature')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QualerApiModelsEnvironmentToEnvironmentModel:
        """Create an instance of QualerApiModelsEnvironmentToEnvironmentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsEnvironmentToEnvironmentModel:
        """Create an instance of QualerApiModelsEnvironmentToEnvironmentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsEnvironmentToEnvironmentModel.parse_obj(obj)

        _obj = QualerApiModelsEnvironmentToEnvironmentModel.parse_obj(
            {
                "room_name": obj.get("RoomName"),
                "factor_id": obj.get("FactorId"),
                "station_id": obj.get("StationId"),
                "factor_name": obj.get("FactorName"),
                "factor_value": obj.get("FactorValue"),
                "valid_range_min": obj.get("ValidRangeMin"),
                "valid_range_max": obj.get("ValidRangeMax"),
                "unit_of_measure": obj.get("UnitOfMeasure"),
            }
        )
        return _obj
