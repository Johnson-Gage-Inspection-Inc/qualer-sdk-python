# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsEnvironmentToEnvironmentModel(BaseModel):
    """
    QualerApiModelsEnvironmentToEnvironmentModel
    """  # noqa: E501

    room_name: Optional[StrictStr] = Field(default=None, alias="RoomName")
    factor_id: Optional[StrictStr] = Field(default=None, alias="FactorId")
    station_id: Optional[StrictInt] = Field(default=None, alias="StationId")
    factor_name: Optional[StrictStr] = Field(default=None, alias="FactorName")
    factor_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="FactorValue"
    )
    valid_range_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ValidRangeMin"
    )
    valid_range_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ValidRangeMax"
    )
    unit_of_measure: Optional[StrictStr] = Field(default=None, alias="UnitOfMeasure")
    __properties: ClassVar[List[str]] = [
        "RoomName",
        "FactorId",
        "StationId",
        "FactorName",
        "FactorValue",
        "ValidRangeMin",
        "ValidRangeMax",
        "UnitOfMeasure",
    ]

    @field_validator("factor_id")
    def factor_id_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "AmbientTemperature",
                "AirHumidity",
                "BarometricPressure",
                "EvaporationRate",
                "AirBuoyancy",
                "ZFactor",
                "Altitude",
                "WindSpeed",
                "SolarRadiation",
                "LightIntensity",
                "NoiseLevel",
                "PhLevel",
                "WaterConductivity",
                "WaterTemperature",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('AmbientTemperature', 'AirHumidity', 'BarometricPressure', 'EvaporationRate', 'AirBuoyancy', 'ZFactor', 'Altitude', 'WindSpeed', 'SolarRadiation', 'LightIntensity', 'NoiseLevel', 'PhLevel', 'WaterConductivity', 'WaterTemperature')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsEnvironmentToEnvironmentModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsEnvironmentToEnvironmentModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "RoomName": obj.get("RoomName"),
                "FactorId": obj.get("FactorId"),
                "StationId": obj.get("StationId"),
                "FactorName": obj.get("FactorName"),
                "FactorValue": obj.get("FactorValue"),
                "ValidRangeMin": obj.get("ValidRangeMin"),
                "ValidRangeMax": obj.get("ValidRangeMax"),
                "UnitOfMeasure": obj.get("UnitOfMeasure"),
            }
        )
        return _obj
