# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, conlist

from qualer_sdk.models.qualer_api_models_maintenance_plans_to_maintenance_task_response import (
    QualerApiModelsMaintenancePlansToMaintenanceTaskResponse,
)


class QualerApiModelsMaintenancePlansToMaintenancePlanResponse(BaseModel):
    """
    QualerApiModelsMaintenancePlansToMaintenancePlanResponse
    """

    maintenance_plan_id: Optional[StrictInt] = Field(None, alias="MaintenancePlanId")
    maintenance_plan_name: Optional[StrictStr] = Field(
        None, alias="MaintenancePlanName"
    )
    is_template: Optional[StrictBool] = Field(None, alias="IsTemplate")
    company_name: Optional[StrictStr] = Field(None, alias="CompanyName")
    maintenance_tasks: Optional[
        conlist(QualerApiModelsMaintenancePlansToMaintenanceTaskResponse)
    ] = Field(None, alias="MaintenanceTasks")
    __properties = [
        "MaintenancePlanId",
        "MaintenancePlanName",
        "IsTemplate",
        "CompanyName",
        "MaintenanceTasks",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMaintenancePlansToMaintenancePlanResponse:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenancePlanResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in maintenance_tasks (list)
        _items = []
        if self.maintenance_tasks:
            for _item in self.maintenance_tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MaintenanceTasks"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMaintenancePlansToMaintenancePlanResponse:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenancePlanResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMaintenancePlansToMaintenancePlanResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsMaintenancePlansToMaintenancePlanResponse.parse_obj(
            {
                "maintenance_plan_id": obj.get("MaintenancePlanId"),
                "maintenance_plan_name": obj.get("MaintenancePlanName"),
                "is_template": obj.get("IsTemplate"),
                "company_name": obj.get("CompanyName"),
                "maintenance_tasks": (
                    [
                        QualerApiModelsMaintenancePlansToMaintenanceTaskResponse.from_dict(
                            _item
                        )
                        for _item in obj.get("MaintenanceTasks")
                    ]
                    if obj.get("MaintenanceTasks") is not None
                    else None
                ),
            }
        )
        return _obj
