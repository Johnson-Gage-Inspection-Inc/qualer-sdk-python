# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_maintenance_plans_to_maintenance_task_response import (
    QualerApiModelsMaintenancePlansToMaintenanceTaskResponse,
)


class QualerApiModelsMaintenancePlansToMaintenancePlanResponse(BaseModel):
    """
    QualerApiModelsMaintenancePlansToMaintenancePlanResponse
    """  # noqa: E501

    maintenance_plan_id: Optional[StrictInt] = Field(
        default=None, alias="MaintenancePlanId"
    )
    maintenance_plan_name: Optional[StrictStr] = Field(
        default=None, alias="MaintenancePlanName"
    )
    is_template: Optional[StrictBool] = Field(default=None, alias="IsTemplate")
    company_name: Optional[StrictStr] = Field(default=None, alias="CompanyName")
    maintenance_tasks: Optional[
        List[QualerApiModelsMaintenancePlansToMaintenanceTaskResponse]
    ] = Field(default=None, alias="MaintenanceTasks")
    __properties: ClassVar[List[str]] = [
        "MaintenancePlanId",
        "MaintenancePlanName",
        "IsTemplate",
        "CompanyName",
        "MaintenanceTasks",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenancePlanResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in maintenance_tasks (list)
        _items = []
        if self.maintenance_tasks:
            for _item_maintenance_tasks in self.maintenance_tasks:
                if _item_maintenance_tasks:
                    _items.append(_item_maintenance_tasks.to_dict())
            _dict["MaintenanceTasks"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenancePlanResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "MaintenancePlanId": obj.get("MaintenancePlanId"),
                "MaintenancePlanName": obj.get("MaintenancePlanName"),
                "IsTemplate": obj.get("IsTemplate"),
                "CompanyName": obj.get("CompanyName"),
                "MaintenanceTasks": (
                    [
                        QualerApiModelsMaintenancePlansToMaintenanceTaskResponse.from_dict(
                            _item
                        )
                        for _item in obj["MaintenanceTasks"]
                    ]
                    if obj.get("MaintenanceTasks") is not None
                    else None
                ),
            }
        )
        return _obj
