# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist

from qualer_sdk.models.qualer_api_models_measurements_from_create_measurement_set_model import (
    QualerApiModelsMeasurementsFromCreateMeasurementSetModel,
)
from qualer_sdk.models.qualer_api_models_measurements_from_specification import (
    QualerApiModelsMeasurementsFromSpecification,
)


class QualerApiModelsMeasurementsFromCreateMeasurementFormModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromCreateMeasurementFormModel
    """

    batch_type: Optional[StrictStr] = Field(None, alias="BatchType")
    batch_result: Optional[StrictStr] = Field(None, alias="BatchResult")
    specification: Optional[QualerApiModelsMeasurementsFromSpecification] = Field(
        None, alias="Specification"
    )
    measurement_sets: Optional[
        conlist(QualerApiModelsMeasurementsFromCreateMeasurementSetModel)
    ] = Field(None, alias="MeasurementSets")
    __properties = ["BatchType", "BatchResult", "Specification", "MeasurementSets"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsFromCreateMeasurementFormModel:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementFormModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of specification
        if self.specification:
            _dict["Specification"] = self.specification.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_sets (list)
        _items = []
        if self.measurement_sets:
            for _item in self.measurement_sets:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MeasurementSets"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsFromCreateMeasurementFormModel:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementFormModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsFromCreateMeasurementFormModel.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsFromCreateMeasurementFormModel.parse_obj(
            {
                "batch_type": obj.get("BatchType"),
                "batch_result": obj.get("BatchResult"),
                "specification": (
                    QualerApiModelsMeasurementsFromSpecification.from_dict(
                        obj.get("Specification")
                    )
                    if obj.get("Specification") is not None
                    else None
                ),
                "measurement_sets": (
                    [
                        QualerApiModelsMeasurementsFromCreateMeasurementSetModel.from_dict(
                            _item
                        )
                        for _item in obj.get("MeasurementSets")
                    ]
                    if obj.get("MeasurementSets") is not None
                    else None
                ),
            }
        )
        return _obj
