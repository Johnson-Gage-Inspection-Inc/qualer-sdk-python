# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions(
    BaseModel
):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions
    """

    err: Optional[StrictBool] = Field(None, alias="Err")
    mean: Optional[StrictBool] = Field(None, alias="Mean")
    max: Optional[StrictBool] = Field(None, alias="Max")
    min: Optional[StrictBool] = Field(None, alias="Min")
    sd: Optional[StrictBool] = Field(None, alias="Sd")
    cv: Optional[StrictBool] = Field(None, alias="Cv")
    tar: Optional[StrictBool] = Field(None, alias="Tar")
    tur: Optional[StrictBool] = Field(None, alias="Tur")
    mu: Optional[StrictBool] = Field(None, alias="Mu")
    cmc: Optional[StrictBool] = Field(None, alias="Cmc")
    tol: Optional[StrictBool] = Field(None, alias="Tol")
    delta: Optional[StrictBool] = Field(None, alias="Delta")
    range: Optional[StrictBool] = Field(None, alias="Range")
    __properties = [
        "Err",
        "Mean",
        "Max",
        "Min",
        "Sd",
        "Cv",
        "Tar",
        "Tur",
        "Mu",
        "Cmc",
        "Tol",
        "Delta",
        "Range",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelDisplayOptions.parse_obj(
            {
                "err": obj.get("Err"),
                "mean": obj.get("Mean"),
                "max": obj.get("Max"),
                "min": obj.get("Min"),
                "sd": obj.get("Sd"),
                "cv": obj.get("Cv"),
                "tar": obj.get("Tar"),
                "tur": obj.get("Tur"),
                "mu": obj.get("Mu"),
                "cmc": obj.get("Cmc"),
                "tol": obj.get("Tol"),
                "delta": obj.get("Delta"),
                "range": obj.get("Range"),
            }
        )
        return _obj
