# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsClientsFromClientCompanySearchModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "legacy_id": "str",
        "account_number_text": "str",
        "company_name": "str",
        "take": "int",
        "modified_after": "datetime",
    }

    attribute_map = {
        "legacy_id": "LegacyId",
        "account_number_text": "AccountNumberText",
        "company_name": "CompanyName",
        "take": "Take",
        "modified_after": "ModifiedAfter",
    }

    def __init__(
        self,
        legacy_id=None,
        account_number_text=None,
        company_name=None,
        take=None,
        modified_after=None,
        _configuration=None,
    ):  # noqa: E501
        """QualerApiModelsClientsFromClientCompanySearchModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._legacy_id = None
        self._account_number_text = None
        self._company_name = None
        self._take = None
        self._modified_after = None
        self.discriminator = None

        if legacy_id is not None:
            self.legacy_id = legacy_id
        if account_number_text is not None:
            self.account_number_text = account_number_text
        if company_name is not None:
            self.company_name = company_name
        if take is not None:
            self.take = take
        if modified_after is not None:
            self.modified_after = modified_after

    @property
    def legacy_id(self):
        """Gets the legacy_id of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501


        :return: The legacy_id of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :rtype: str
        """
        return self._legacy_id

    @legacy_id.setter
    def legacy_id(self, legacy_id):
        """Sets the legacy_id of this QualerApiModelsClientsFromClientCompanySearchModel.


        :param legacy_id: The legacy_id of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :type: str
        """

        self._legacy_id = legacy_id

    @property
    def account_number_text(self):
        """Gets the account_number_text of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501


        :return: The account_number_text of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :rtype: str
        """
        return self._account_number_text

    @account_number_text.setter
    def account_number_text(self, account_number_text):
        """Sets the account_number_text of this QualerApiModelsClientsFromClientCompanySearchModel.


        :param account_number_text: The account_number_text of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :type: str
        """

        self._account_number_text = account_number_text

    @property
    def company_name(self):
        """Gets the company_name of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501


        :return: The company_name of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :rtype: str
        """
        return self._company_name

    @company_name.setter
    def company_name(self, company_name):
        """Sets the company_name of this QualerApiModelsClientsFromClientCompanySearchModel.


        :param company_name: The company_name of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :type: str
        """

        self._company_name = company_name

    @property
    def take(self):
        """Gets the take of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501


        :return: The take of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :rtype: int
        """
        return self._take

    @take.setter
    def take(self, take):
        """Sets the take of this QualerApiModelsClientsFromClientCompanySearchModel.


        :param take: The take of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :type: int
        """

        self._take = take

    @property
    def modified_after(self):
        """Gets the modified_after of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501


        :return: The modified_after of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_after

    @modified_after.setter
    def modified_after(self, modified_after):
        """Sets the modified_after of this QualerApiModelsClientsFromClientCompanySearchModel.


        :param modified_after: The modified_after of this QualerApiModelsClientsFromClientCompanySearchModel.  # noqa: E501
        :type: datetime
        """

        self._modified_after = modified_after

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(QualerApiModelsClientsFromClientCompanySearchModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsClientsFromClientCompanySearchModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsClientsFromClientCompanySearchModel):
            return True

        return self.to_dict() != other.to_dict()
