# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel(BaseModel):
    """
    QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
    """  # noqa: E501

    asset_id: Optional[StrictInt] = Field(default=None, alias="AssetId")
    asset_service_record_id: Optional[StrictInt] = Field(
        default=None, alias="AssetServiceRecordId"
    )
    service_schedule_segment_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceScheduleSegmentId"
    )
    forward_segment_id: Optional[StrictInt] = Field(
        default=None, alias="ForwardSegmentId"
    )
    forward_next_service: Optional[StrictBool] = Field(
        default=None, alias="ForwardNextService"
    )
    service_order_number: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderNumber"
    )
    custom_order_number: Optional[StrictStr] = Field(
        default=None, alias="CustomOrderNumber"
    )
    order_item_number: Optional[StrictInt] = Field(
        default=None, alias="OrderItemNumber"
    )
    certificate_number: Optional[StrictStr] = Field(
        default=None, alias="CertificateNumber"
    )
    result_status: Optional[StrictStr] = Field(default=None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(default=None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(default=None, alias="AsLeftResult")
    service_date: Optional[datetime] = Field(default=None, alias="ServiceDate")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    asset_tag_change: Optional[StrictStr] = Field(default=None, alias="AssetTagChange")
    asset_user_change: Optional[StrictStr] = Field(
        default=None, alias="AssetUserChange"
    )
    service_notes: Optional[StrictStr] = Field(default=None, alias="ServiceNotes")
    serial_number_change: Optional[StrictStr] = Field(
        default=None, alias="SerialNumberChange"
    )
    due_date: Optional[datetime] = Field(default=None, alias="DueDate")
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    provider_technician: Optional[StrictStr] = Field(
        default=None, alias="ProviderTechnician"
    )
    provider_phone: Optional[StrictStr] = Field(default=None, alias="ProviderPhone")
    provider_company: Optional[StrictStr] = Field(default=None, alias="ProviderCompany")
    service_level: Optional[StrictStr] = Field(default=None, alias="ServiceLevel")
    service_level_code: Optional[StrictStr] = Field(
        default=None, alias="ServiceLevelCode"
    )
    next_service_level: Optional[StrictStr] = Field(
        default=None, alias="NextServiceLevel"
    )
    next_service_level_code: Optional[StrictStr] = Field(
        default=None, alias="NextServiceLevelCode"
    )
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(
        default=None, alias="AssetDescription"
    )
    parts_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PartsCharge"
    )
    parts_charge_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PartsChargeBeforeDiscount"
    )
    service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ServiceCharge"
    )
    repairs_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="RepairsCharge"
    )
    guid: Optional[StrictStr] = Field(default=None, alias="Guid")
    segment_name: Optional[StrictStr] = Field(default=None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(default=None, alias="ScheduleName")
    __properties: ClassVar[List[str]] = [
        "AssetId",
        "AssetServiceRecordId",
        "ServiceScheduleSegmentId",
        "ForwardSegmentId",
        "ForwardNextService",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "OrderItemNumber",
        "CertificateNumber",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "ServiceDate",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "AssetTagChange",
        "AssetUserChange",
        "ServiceNotes",
        "SerialNumberChange",
        "DueDate",
        "NextServiceDate",
        "ProviderTechnician",
        "ProviderPhone",
        "ProviderCompany",
        "ServiceLevel",
        "ServiceLevelCode",
        "NextServiceLevel",
        "NextServiceLevelCode",
        "AssetName",
        "AssetDescription",
        "PartsCharge",
        "PartsChargeBeforeDiscount",
        "ServiceCharge",
        "RepairsCharge",
        "Guid",
        "SegmentName",
        "ScheduleName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "AssetId": obj.get("AssetId"),
                "AssetServiceRecordId": obj.get("AssetServiceRecordId"),
                "ServiceScheduleSegmentId": obj.get("ServiceScheduleSegmentId"),
                "ForwardSegmentId": obj.get("ForwardSegmentId"),
                "ForwardNextService": obj.get("ForwardNextService"),
                "ServiceOrderNumber": obj.get("ServiceOrderNumber"),
                "CustomOrderNumber": obj.get("CustomOrderNumber"),
                "OrderItemNumber": obj.get("OrderItemNumber"),
                "CertificateNumber": obj.get("CertificateNumber"),
                "ResultStatus": obj.get("ResultStatus"),
                "AsFoundResult": obj.get("AsFoundResult"),
                "AsLeftResult": obj.get("AsLeftResult"),
                "ServiceDate": obj.get("ServiceDate"),
                "SerialNumber": obj.get("SerialNumber"),
                "AssetTag": obj.get("AssetTag"),
                "AssetUser": obj.get("AssetUser"),
                "AssetTagChange": obj.get("AssetTagChange"),
                "AssetUserChange": obj.get("AssetUserChange"),
                "ServiceNotes": obj.get("ServiceNotes"),
                "SerialNumberChange": obj.get("SerialNumberChange"),
                "DueDate": obj.get("DueDate"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "ProviderTechnician": obj.get("ProviderTechnician"),
                "ProviderPhone": obj.get("ProviderPhone"),
                "ProviderCompany": obj.get("ProviderCompany"),
                "ServiceLevel": obj.get("ServiceLevel"),
                "ServiceLevelCode": obj.get("ServiceLevelCode"),
                "NextServiceLevel": obj.get("NextServiceLevel"),
                "NextServiceLevelCode": obj.get("NextServiceLevelCode"),
                "AssetName": obj.get("AssetName"),
                "AssetDescription": obj.get("AssetDescription"),
                "PartsCharge": obj.get("PartsCharge"),
                "PartsChargeBeforeDiscount": obj.get("PartsChargeBeforeDiscount"),
                "ServiceCharge": obj.get("ServiceCharge"),
                "RepairsCharge": obj.get("RepairsCharge"),
                "Guid": obj.get("Guid"),
                "SegmentName": obj.get("SegmentName"),
                "ScheduleName": obj.get("ScheduleName"),
            }
        )
        return _obj
