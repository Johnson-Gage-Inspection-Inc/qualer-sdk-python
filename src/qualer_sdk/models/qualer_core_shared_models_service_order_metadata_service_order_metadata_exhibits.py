# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictStr, conlist

from qualer_sdk.models.qualer_core_shared_models_service_order_metadata_service_order_metadata_exhibits_key_value import (
    QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibitsKeyValue,
)


class QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits(BaseModel):
    """
    QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits
    """

    title: Optional[StrictStr] = Field(None, alias="Title")
    subtitle: Optional[StrictStr] = Field(None, alias="Subtitle")
    exhibits: Optional[
        conlist(
            QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibitsKeyValue
        )
    ] = Field(None, alias="Exhibits")
    __properties = ["Title", "Subtitle", "Exhibits"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits:
        """Create an instance of QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in exhibits (list)
        _items = []
        if self.exhibits:
            for _item in self.exhibits:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Exhibits"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits:
        """Create an instance of QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits.parse_obj(
                obj
            )

        _obj = QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibits.parse_obj(
            {
                "title": obj.get("Title"),
                "subtitle": obj.get("Subtitle"),
                "exhibits": (
                    [
                        QualerCoreSharedModelsServiceOrderMetadataServiceOrderMetadataExhibitsKeyValue.from_dict(
                            _item
                        )
                        for _item in obj.get("Exhibits")
                    ]
                    if obj.get("Exhibits") is not None
                    else None
                ),
            }
        )
        return _obj
