# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr


class QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel(BaseModel):
    """
    QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel
    """

    service_order_number: Optional[StrictInt] = Field(None, alias="ServiceOrderNumber")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    order_item_number: Optional[StrictInt] = Field(None, alias="OrderItemNumber")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    result_status: Optional[StrictStr] = Field(None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(None, alias="AsLeftResult")
    applied_interval: Optional[StrictInt] = Field(None, alias="AppliedInterval")
    as_found_tolerance: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AsFoundTolerance"
    )
    as_left_tolerance: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="AsLeftTolerance"
    )
    service_date: Optional[datetime] = Field(None, alias="ServiceDate")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    service_notes: Optional[StrictStr] = Field(None, alias="ServiceNotes")
    due_date: Optional[datetime] = Field(None, alias="DueDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    provider_technician: Optional[StrictStr] = Field(None, alias="ProviderTechnician")
    provider_phone: Optional[StrictStr] = Field(None, alias="ProviderPhone")
    provider_company: Optional[StrictStr] = Field(None, alias="ProviderCompany")
    service_level: Optional[StrictStr] = Field(None, alias="ServiceLevel")
    service_level_code: Optional[StrictStr] = Field(None, alias="ServiceLevelCode")
    next_service_level: Optional[StrictStr] = Field(None, alias="NextServiceLevel")
    next_service_level_code: Optional[StrictStr] = Field(
        None, alias="NextServiceLevelCode"
    )
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    parts_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsCharge"
    )
    parts_charge_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsChargeBeforeDiscount"
    )
    service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ServiceCharge"
    )
    repairs_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="RepairsCharge"
    )
    segment_name: Optional[StrictStr] = Field(None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(None, alias="ScheduleName")
    __properties = [
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "OrderItemNumber",
        "CertificateNumber",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "AppliedInterval",
        "AsFoundTolerance",
        "AsLeftTolerance",
        "ServiceDate",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "ServiceNotes",
        "DueDate",
        "NextServiceDate",
        "ProviderTechnician",
        "ProviderPhone",
        "ProviderCompany",
        "ServiceLevel",
        "ServiceLevelCode",
        "NextServiceLevel",
        "NextServiceLevelCode",
        "AssetName",
        "AssetDescription",
        "PartsCharge",
        "PartsChargeBeforeDiscount",
        "ServiceCharge",
        "RepairsCharge",
        "SegmentName",
        "ScheduleName",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel:
        """Create an instance of QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel:
        """Create an instance of QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel.parse_obj(
                obj
            )

        _obj = (
            QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel.parse_obj(
                {
                    "service_order_number": obj.get("ServiceOrderNumber"),
                    "custom_order_number": obj.get("CustomOrderNumber"),
                    "order_item_number": obj.get("OrderItemNumber"),
                    "certificate_number": obj.get("CertificateNumber"),
                    "result_status": obj.get("ResultStatus"),
                    "as_found_result": obj.get("AsFoundResult"),
                    "as_left_result": obj.get("AsLeftResult"),
                    "applied_interval": obj.get("AppliedInterval"),
                    "as_found_tolerance": obj.get("AsFoundTolerance"),
                    "as_left_tolerance": obj.get("AsLeftTolerance"),
                    "service_date": obj.get("ServiceDate"),
                    "serial_number": obj.get("SerialNumber"),
                    "asset_tag": obj.get("AssetTag"),
                    "asset_user": obj.get("AssetUser"),
                    "service_notes": obj.get("ServiceNotes"),
                    "due_date": obj.get("DueDate"),
                    "next_service_date": obj.get("NextServiceDate"),
                    "provider_technician": obj.get("ProviderTechnician"),
                    "provider_phone": obj.get("ProviderPhone"),
                    "provider_company": obj.get("ProviderCompany"),
                    "service_level": obj.get("ServiceLevel"),
                    "service_level_code": obj.get("ServiceLevelCode"),
                    "next_service_level": obj.get("NextServiceLevel"),
                    "next_service_level_code": obj.get("NextServiceLevelCode"),
                    "asset_name": obj.get("AssetName"),
                    "asset_description": obj.get("AssetDescription"),
                    "parts_charge": obj.get("PartsCharge"),
                    "parts_charge_before_discount": obj.get(
                        "PartsChargeBeforeDiscount"
                    ),
                    "service_charge": obj.get("ServiceCharge"),
                    "repairs_charge": obj.get("RepairsCharge"),
                    "segment_name": obj.get("SegmentName"),
                    "schedule_name": obj.get("ScheduleName"),
                }
            )
        )
        return _obj
