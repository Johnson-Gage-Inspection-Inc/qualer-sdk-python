# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
    validator,
)

from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_condition_factor_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_tool_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel,
)


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel(
    BaseModel
):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel
    """

    specification_name: Optional[StrictStr] = Field(None, alias="SpecificationName")
    measurement_quantity: Optional[StrictStr] = Field(None, alias="MeasurementQuantity")
    unit_of_measure_id: Optional[StrictInt] = Field(None, alias="UnitOfMeasureId")
    unit_of_measure: Optional[StrictStr] = Field(None, alias="UnitOfMeasure")
    range_min: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="RangeMin")
    range_max: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="RangeMax")
    tolerance_type: Optional[StrictStr] = Field(None, alias="ToleranceType")
    specification_mode: Optional[StrictStr] = Field(None, alias="SpecificationMode")
    tolerance_mode: Optional[StrictStr] = Field(None, alias="ToleranceMode")
    tolerance_unit: Optional[StrictStr] = Field(None, alias="ToleranceUnit")
    precision_type: Optional[StrictStr] = Field(None, alias="PrecisionType")
    readings: Optional[StrictInt] = Field(None, alias="Readings")
    channels_type: Optional[StrictStr] = Field(None, alias="ChannelsType")
    channel_count: Optional[StrictInt] = Field(None, alias="ChannelCount")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Precision")
    tolerance_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ToleranceMinimum"
    )
    tolerance_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ToleranceMaximum"
    )
    resolution: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="Resolution"
    )
    resolution_count: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ResolutionCount"
    )
    nominal: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="Nominal")
    expected_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ExpectedValue"
    )
    base_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="BaseValue")
    test_value: Optional[Union[StrictFloat, StrictInt]] = Field(None, alias="TestValue")
    is_accredited: Optional[StrictBool] = Field(None, alias="IsAccredited")
    measurements: Optional[
        conlist(
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel
        )
    ] = Field(None, alias="Measurements")
    condition_factors: Optional[
        conlist(
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel
        )
    ] = Field(None, alias="ConditionFactors")
    primary_measurement_tool: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
    ] = Field(None, alias="PrimaryMeasurementTool")
    secondary_measurement_tool: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
    ] = Field(None, alias="SecondaryMeasurementTool")
    __properties = [
        "SpecificationName",
        "MeasurementQuantity",
        "UnitOfMeasureId",
        "UnitOfMeasure",
        "RangeMin",
        "RangeMax",
        "ToleranceType",
        "SpecificationMode",
        "ToleranceMode",
        "ToleranceUnit",
        "PrecisionType",
        "Readings",
        "ChannelsType",
        "ChannelCount",
        "Precision",
        "ToleranceMinimum",
        "ToleranceMaximum",
        "Resolution",
        "ResolutionCount",
        "Nominal",
        "ExpectedValue",
        "BaseValue",
        "TestValue",
        "IsAccredited",
        "Measurements",
        "ConditionFactors",
        "PrimaryMeasurementTool",
        "SecondaryMeasurementTool",
    ]

    @validator("specification_mode")
    def specification_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Point", "Range"):
            raise ValueError("must be one of enum values ('Point', 'Range')")
        return value

    @validator("tolerance_mode")
    def tolerance_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Symmetric", "Asymmetric", "Range"):
            raise ValueError(
                "must be one of enum values ('Symmetric', 'Asymmetric', 'Range')"
            )
        return value

    @validator("tolerance_unit")
    def tolerance_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("Percentage", "UnitOfMeasure", "Ppm"):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Ppm')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item in self.measurements:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Measurements"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in condition_factors (list)
        _items = []
        if self.condition_factors:
            for _item in self.condition_factors:
                if _item:
                    _items.append(_item.to_dict())
            _dict["ConditionFactors"] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_measurement_tool
        if self.primary_measurement_tool:
            _dict["PrimaryMeasurementTool"] = self.primary_measurement_tool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_measurement_tool
        if self.secondary_measurement_tool:
            _dict["SecondaryMeasurementTool"] = (
                self.secondary_measurement_tool.to_dict()
            )
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel.parse_obj(
            {
                "specification_name": obj.get("SpecificationName"),
                "measurement_quantity": obj.get("MeasurementQuantity"),
                "unit_of_measure_id": obj.get("UnitOfMeasureId"),
                "unit_of_measure": obj.get("UnitOfMeasure"),
                "range_min": obj.get("RangeMin"),
                "range_max": obj.get("RangeMax"),
                "tolerance_type": obj.get("ToleranceType"),
                "specification_mode": obj.get("SpecificationMode"),
                "tolerance_mode": obj.get("ToleranceMode"),
                "tolerance_unit": obj.get("ToleranceUnit"),
                "precision_type": obj.get("PrecisionType"),
                "readings": obj.get("Readings"),
                "channels_type": obj.get("ChannelsType"),
                "channel_count": obj.get("ChannelCount"),
                "precision": obj.get("Precision"),
                "tolerance_minimum": obj.get("ToleranceMinimum"),
                "tolerance_maximum": obj.get("ToleranceMaximum"),
                "resolution": obj.get("Resolution"),
                "resolution_count": obj.get("ResolutionCount"),
                "nominal": obj.get("Nominal"),
                "expected_value": obj.get("ExpectedValue"),
                "base_value": obj.get("BaseValue"),
                "test_value": obj.get("TestValue"),
                "is_accredited": obj.get("IsAccredited"),
                "measurements": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Measurements")
                    ]
                    if obj.get("Measurements") is not None
                    else None
                ),
                "condition_factors": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel.from_dict(
                            _item
                        )
                        for _item in obj.get("ConditionFactors")
                    ]
                    if obj.get("ConditionFactors") is not None
                    else None
                ),
                "primary_measurement_tool": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel.from_dict(
                        obj.get("PrimaryMeasurementTool")
                    )
                    if obj.get("PrimaryMeasurementTool") is not None
                    else None
                ),
                "secondary_measurement_tool": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel.from_dict(
                        obj.get("SecondaryMeasurementTool")
                    )
                    if obj.get("SecondaryMeasurementTool") is not None
                    else None
                ),
            }
        )
        return _obj
