# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_condition_factor_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel,
)
from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model_measurement_set_response_model_measurement_point_response_model_measurement_tool_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel,
)


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel(
    BaseModel
):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel
    """  # noqa: E501

    specification_name: Optional[StrictStr] = Field(
        default=None, alias="SpecificationName"
    )
    measurement_quantity: Optional[StrictStr] = Field(
        default=None, alias="MeasurementQuantity"
    )
    unit_of_measure_id: Optional[StrictInt] = Field(
        default=None, alias="UnitOfMeasureId"
    )
    unit_of_measure: Optional[StrictStr] = Field(default=None, alias="UnitOfMeasure")
    range_min: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="RangeMin"
    )
    range_max: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="RangeMax"
    )
    tolerance_type: Optional[StrictStr] = Field(default=None, alias="ToleranceType")
    specification_mode: Optional[StrictStr] = Field(
        default=None, alias="SpecificationMode"
    )
    tolerance_mode: Optional[StrictStr] = Field(default=None, alias="ToleranceMode")
    tolerance_unit: Optional[StrictStr] = Field(default=None, alias="ToleranceUnit")
    precision_type: Optional[StrictStr] = Field(default=None, alias="PrecisionType")
    readings: Optional[StrictInt] = Field(default=None, alias="Readings")
    channels_type: Optional[StrictStr] = Field(default=None, alias="ChannelsType")
    channel_count: Optional[StrictInt] = Field(default=None, alias="ChannelCount")
    precision: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Precision"
    )
    tolerance_minimum: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ToleranceMinimum"
    )
    tolerance_maximum: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ToleranceMaximum"
    )
    resolution: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Resolution"
    )
    resolution_count: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ResolutionCount"
    )
    nominal: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Nominal"
    )
    expected_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ExpectedValue"
    )
    base_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="BaseValue"
    )
    test_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TestValue"
    )
    is_accredited: Optional[StrictBool] = Field(default=None, alias="IsAccredited")
    measurements: Optional[
        List[
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel
        ]
    ] = Field(default=None, alias="Measurements")
    condition_factors: Optional[
        List[
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel
        ]
    ] = Field(default=None, alias="ConditionFactors")
    primary_measurement_tool: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
    ] = Field(default=None, alias="PrimaryMeasurementTool")
    secondary_measurement_tool: Optional[
        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel
    ] = Field(default=None, alias="SecondaryMeasurementTool")
    __properties: ClassVar[List[str]] = [
        "SpecificationName",
        "MeasurementQuantity",
        "UnitOfMeasureId",
        "UnitOfMeasure",
        "RangeMin",
        "RangeMax",
        "ToleranceType",
        "SpecificationMode",
        "ToleranceMode",
        "ToleranceUnit",
        "PrecisionType",
        "Readings",
        "ChannelsType",
        "ChannelCount",
        "Precision",
        "ToleranceMinimum",
        "ToleranceMaximum",
        "Resolution",
        "ResolutionCount",
        "Nominal",
        "ExpectedValue",
        "BaseValue",
        "TestValue",
        "IsAccredited",
        "Measurements",
        "ConditionFactors",
        "PrimaryMeasurementTool",
        "SecondaryMeasurementTool",
    ]

    @field_validator("specification_mode")
    def specification_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Point", "Range"]):
            raise ValueError("must be one of enum values ('Point', 'Range')")
        return value

    @field_validator("tolerance_mode")
    def tolerance_mode_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Symmetric", "Asymmetric", "Range"]):
            raise ValueError(
                "must be one of enum values ('Symmetric', 'Asymmetric', 'Range')"
            )
        return value

    @field_validator("tolerance_unit")
    def tolerance_unit_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["Percentage", "UnitOfMeasure", "Ppm"]):
            raise ValueError(
                "must be one of enum values ('Percentage', 'UnitOfMeasure', 'Ppm')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in measurements (list)
        _items = []
        if self.measurements:
            for _item_measurements in self.measurements:
                if _item_measurements:
                    _items.append(_item_measurements.to_dict())
            _dict["Measurements"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in condition_factors (list)
        _items = []
        if self.condition_factors:
            for _item_condition_factors in self.condition_factors:
                if _item_condition_factors:
                    _items.append(_item_condition_factors.to_dict())
            _dict["ConditionFactors"] = _items
        # override the default output from pydantic by calling `to_dict()` of primary_measurement_tool
        if self.primary_measurement_tool:
            _dict["PrimaryMeasurementTool"] = self.primary_measurement_tool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of secondary_measurement_tool
        if self.secondary_measurement_tool:
            _dict["SecondaryMeasurementTool"] = (
                self.secondary_measurement_tool.to_dict()
            )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "SpecificationName": obj.get("SpecificationName"),
                "MeasurementQuantity": obj.get("MeasurementQuantity"),
                "UnitOfMeasureId": obj.get("UnitOfMeasureId"),
                "UnitOfMeasure": obj.get("UnitOfMeasure"),
                "RangeMin": obj.get("RangeMin"),
                "RangeMax": obj.get("RangeMax"),
                "ToleranceType": obj.get("ToleranceType"),
                "SpecificationMode": obj.get("SpecificationMode"),
                "ToleranceMode": obj.get("ToleranceMode"),
                "ToleranceUnit": obj.get("ToleranceUnit"),
                "PrecisionType": obj.get("PrecisionType"),
                "Readings": obj.get("Readings"),
                "ChannelsType": obj.get("ChannelsType"),
                "ChannelCount": obj.get("ChannelCount"),
                "Precision": obj.get("Precision"),
                "ToleranceMinimum": obj.get("ToleranceMinimum"),
                "ToleranceMaximum": obj.get("ToleranceMaximum"),
                "Resolution": obj.get("Resolution"),
                "ResolutionCount": obj.get("ResolutionCount"),
                "Nominal": obj.get("Nominal"),
                "ExpectedValue": obj.get("ExpectedValue"),
                "BaseValue": obj.get("BaseValue"),
                "TestValue": obj.get("TestValue"),
                "IsAccredited": obj.get("IsAccredited"),
                "Measurements": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel.from_dict(
                            _item
                        )
                        for _item in obj["Measurements"]
                    ]
                    if obj.get("Measurements") is not None
                    else None
                ),
                "ConditionFactors": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementConditionFactorResponseModel.from_dict(
                            _item
                        )
                        for _item in obj["ConditionFactors"]
                    ]
                    if obj.get("ConditionFactors") is not None
                    else None
                ),
                "PrimaryMeasurementTool": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel.from_dict(
                        obj["PrimaryMeasurementTool"]
                    )
                    if obj.get("PrimaryMeasurementTool") is not None
                    else None
                ),
                "SecondaryMeasurementTool": (
                    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementToolResponseModel.from_dict(
                        obj["SecondaryMeasurementTool"]
                    )
                    if obj.get("SecondaryMeasurementTool") is not None
                    else None
                ),
            }
        )
        return _obj
