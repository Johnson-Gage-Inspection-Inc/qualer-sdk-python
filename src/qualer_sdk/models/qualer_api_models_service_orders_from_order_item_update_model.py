# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    validator,
)


class QualerApiModelsServiceOrdersFromOrderItemUpdateModel(BaseModel):
    """
    QualerApiModelsServiceOrdersFromOrderItemUpdateModel
    """

    service_comments: Optional[StrictStr] = Field(None, alias="ServiceComments")
    private_comments: Optional[StrictStr] = Field(None, alias="PrivateComments")
    service_notes: Optional[StrictStr] = Field(None, alias="ServiceNotes")
    service_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ServiceTotal"
    )
    repairs_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="RepairsTotal"
    )
    parts_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsTotal"
    )
    work_status: Optional[StrictStr] = Field(None, alias="WorkStatus")
    custom_work_status: Optional[StrictStr] = Field(None, alias="CustomWorkStatus")
    is_limited: Optional[StrictBool] = Field(None, alias="IsLimited")
    checked_on: Optional[datetime] = Field(None, alias="CheckedOn")
    checked_by_name: Optional[StrictStr] = Field(None, alias="CheckedByName")
    completed_on: Optional[datetime] = Field(None, alias="CompletedOn")
    completed_by_name: Optional[StrictStr] = Field(None, alias="CompletedByName")
    as_found_check: Optional[StrictStr] = Field(None, alias="AsFoundCheck")
    as_left_check: Optional[StrictStr] = Field(None, alias="AsLeftCheck")
    result_status: Optional[StrictStr] = Field(None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(None, alias="AsLeftResult")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    legacy_id: Optional[StrictStr] = Field(None, alias="LegacyId")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    serial_number_change: Optional[StrictStr] = Field(None, alias="SerialNumberChange")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_tag_change: Optional[StrictStr] = Field(None, alias="AssetTagChange")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_user_change: Optional[StrictStr] = Field(None, alias="AssetUserChange")
    provider_technician: Optional[StrictStr] = Field(None, alias="ProviderTechnician")
    provider_phone: Optional[StrictStr] = Field(None, alias="ProviderPhone")
    provider_company: Optional[StrictStr] = Field(None, alias="ProviderCompany")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    service_date: Optional[datetime] = Field(None, alias="ServiceDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    vendor_tag: Optional[StrictStr] = Field(None, alias="VendorTag")
    __properties = [
        "ServiceComments",
        "PrivateComments",
        "ServiceNotes",
        "ServiceTotal",
        "RepairsTotal",
        "PartsTotal",
        "WorkStatus",
        "CustomWorkStatus",
        "IsLimited",
        "CheckedOn",
        "CheckedByName",
        "CompletedOn",
        "CompletedByName",
        "AsFoundCheck",
        "AsLeftCheck",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "EquipmentId",
        "LegacyId",
        "SerialNumber",
        "SerialNumberChange",
        "AssetTag",
        "AssetTagChange",
        "AssetUser",
        "AssetUserChange",
        "ProviderTechnician",
        "ProviderPhone",
        "ProviderCompany",
        "CertificateNumber",
        "ServiceDate",
        "NextServiceDate",
        "VendorTag",
    ]

    @validator("work_status")
    def work_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Pending",
            "InProgress",
            "Completed",
            "Delayed",
            "Withdrawn",
            "Locked",
            "New",
            "Closed",
            "Wait",
        ):
            raise ValueError(
                "must be one of enum values ('Pending', 'InProgress', 'Completed', 'Delayed', 'Withdrawn', 'Locked', 'New', 'Closed', 'Wait')"
            )
        return value

    @validator("as_found_check")
    def as_found_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("NotServiced", "Fail", "Pass"):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'Pass')"
            )
        return value

    @validator("as_left_check")
    def as_left_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("NotServiced", "Fail", "Pass"):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'Pass')"
            )
        return value

    @validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    @validator("as_found_result")
    def as_found_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    @validator("as_left_result")
    def as_left_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "NotAvailable",
            "Fail",
            "FailAmbiguous",
            "FailSignificant",
            "Pass",
            "PassAmbiguous",
            "PassAdjustment",
            "Done",
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsServiceOrdersFromOrderItemUpdateModel:
        """Create an instance of QualerApiModelsServiceOrdersFromOrderItemUpdateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsServiceOrdersFromOrderItemUpdateModel:
        """Create an instance of QualerApiModelsServiceOrdersFromOrderItemUpdateModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsServiceOrdersFromOrderItemUpdateModel.parse_obj(obj)

        _obj = QualerApiModelsServiceOrdersFromOrderItemUpdateModel.parse_obj(
            {
                "service_comments": obj.get("ServiceComments"),
                "private_comments": obj.get("PrivateComments"),
                "service_notes": obj.get("ServiceNotes"),
                "service_total": obj.get("ServiceTotal"),
                "repairs_total": obj.get("RepairsTotal"),
                "parts_total": obj.get("PartsTotal"),
                "work_status": obj.get("WorkStatus"),
                "custom_work_status": obj.get("CustomWorkStatus"),
                "is_limited": obj.get("IsLimited"),
                "checked_on": obj.get("CheckedOn"),
                "checked_by_name": obj.get("CheckedByName"),
                "completed_on": obj.get("CompletedOn"),
                "completed_by_name": obj.get("CompletedByName"),
                "as_found_check": obj.get("AsFoundCheck"),
                "as_left_check": obj.get("AsLeftCheck"),
                "result_status": obj.get("ResultStatus"),
                "as_found_result": obj.get("AsFoundResult"),
                "as_left_result": obj.get("AsLeftResult"),
                "equipment_id": obj.get("EquipmentId"),
                "legacy_id": obj.get("LegacyId"),
                "serial_number": obj.get("SerialNumber"),
                "serial_number_change": obj.get("SerialNumberChange"),
                "asset_tag": obj.get("AssetTag"),
                "asset_tag_change": obj.get("AssetTagChange"),
                "asset_user": obj.get("AssetUser"),
                "asset_user_change": obj.get("AssetUserChange"),
                "provider_technician": obj.get("ProviderTechnician"),
                "provider_phone": obj.get("ProviderPhone"),
                "provider_company": obj.get("ProviderCompany"),
                "certificate_number": obj.get("CertificateNumber"),
                "service_date": obj.get("ServiceDate"),
                "next_service_date": obj.get("NextServiceDate"),
                "vendor_tag": obj.get("VendorTag"),
            }
        )
        return _obj
