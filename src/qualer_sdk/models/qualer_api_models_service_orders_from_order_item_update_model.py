# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsServiceOrdersFromOrderItemUpdateModel(BaseModel):
    """
    QualerApiModelsServiceOrdersFromOrderItemUpdateModel
    """  # noqa: E501

    service_comments: Optional[StrictStr] = Field(default=None, alias="ServiceComments")
    private_comments: Optional[StrictStr] = Field(default=None, alias="PrivateComments")
    service_notes: Optional[StrictStr] = Field(default=None, alias="ServiceNotes")
    service_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ServiceTotal"
    )
    repairs_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="RepairsTotal"
    )
    parts_total: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PartsTotal"
    )
    work_status: Optional[StrictStr] = Field(default=None, alias="WorkStatus")
    custom_work_status: Optional[StrictStr] = Field(
        default=None, alias="CustomWorkStatus"
    )
    is_limited: Optional[StrictBool] = Field(default=None, alias="IsLimited")
    checked_on: Optional[datetime] = Field(default=None, alias="CheckedOn")
    checked_by_name: Optional[StrictStr] = Field(default=None, alias="CheckedByName")
    completed_on: Optional[datetime] = Field(default=None, alias="CompletedOn")
    completed_by_name: Optional[StrictStr] = Field(
        default=None, alias="CompletedByName"
    )
    as_found_check: Optional[StrictStr] = Field(default=None, alias="AsFoundCheck")
    as_left_check: Optional[StrictStr] = Field(default=None, alias="AsLeftCheck")
    result_status: Optional[StrictStr] = Field(default=None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(default=None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(default=None, alias="AsLeftResult")
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    legacy_id: Optional[StrictStr] = Field(default=None, alias="LegacyId")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    serial_number_change: Optional[StrictStr] = Field(
        default=None, alias="SerialNumberChange"
    )
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    asset_tag_change: Optional[StrictStr] = Field(default=None, alias="AssetTagChange")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    asset_user_change: Optional[StrictStr] = Field(
        default=None, alias="AssetUserChange"
    )
    provider_technician: Optional[StrictStr] = Field(
        default=None, alias="ProviderTechnician"
    )
    provider_phone: Optional[StrictStr] = Field(default=None, alias="ProviderPhone")
    provider_company: Optional[StrictStr] = Field(default=None, alias="ProviderCompany")
    certificate_number: Optional[StrictStr] = Field(
        default=None, alias="CertificateNumber"
    )
    service_date: Optional[datetime] = Field(default=None, alias="ServiceDate")
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    vendor_tag: Optional[StrictStr] = Field(default=None, alias="VendorTag")
    __properties: ClassVar[List[str]] = [
        "ServiceComments",
        "PrivateComments",
        "ServiceNotes",
        "ServiceTotal",
        "RepairsTotal",
        "PartsTotal",
        "WorkStatus",
        "CustomWorkStatus",
        "IsLimited",
        "CheckedOn",
        "CheckedByName",
        "CompletedOn",
        "CompletedByName",
        "AsFoundCheck",
        "AsLeftCheck",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "EquipmentId",
        "LegacyId",
        "SerialNumber",
        "SerialNumberChange",
        "AssetTag",
        "AssetTagChange",
        "AssetUser",
        "AssetUserChange",
        "ProviderTechnician",
        "ProviderPhone",
        "ProviderCompany",
        "CertificateNumber",
        "ServiceDate",
        "NextServiceDate",
        "VendorTag",
    ]

    @field_validator("work_status")
    def work_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Pending",
                "InProgress",
                "Completed",
                "Delayed",
                "Withdrawn",
                "Locked",
                "New",
                "Closed",
                "Wait",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Pending', 'InProgress', 'Completed', 'Delayed', 'Withdrawn', 'Locked', 'New', 'Closed', 'Wait')"
            )
        return value

    @field_validator("as_found_check")
    def as_found_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NotServiced", "Fail", "Pass"]):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'Pass')"
            )
        return value

    @field_validator("as_left_check")
    def as_left_check_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["NotServiced", "Fail", "Pass"]):
            raise ValueError(
                "must be one of enum values ('NotServiced', 'Fail', 'Pass')"
            )
        return value

    @field_validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    @field_validator("as_found_result")
    def as_found_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    @field_validator("as_left_result")
    def as_left_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersFromOrderItemUpdateModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersFromOrderItemUpdateModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceComments": obj.get("ServiceComments"),
                "PrivateComments": obj.get("PrivateComments"),
                "ServiceNotes": obj.get("ServiceNotes"),
                "ServiceTotal": obj.get("ServiceTotal"),
                "RepairsTotal": obj.get("RepairsTotal"),
                "PartsTotal": obj.get("PartsTotal"),
                "WorkStatus": obj.get("WorkStatus"),
                "CustomWorkStatus": obj.get("CustomWorkStatus"),
                "IsLimited": obj.get("IsLimited"),
                "CheckedOn": obj.get("CheckedOn"),
                "CheckedByName": obj.get("CheckedByName"),
                "CompletedOn": obj.get("CompletedOn"),
                "CompletedByName": obj.get("CompletedByName"),
                "AsFoundCheck": obj.get("AsFoundCheck"),
                "AsLeftCheck": obj.get("AsLeftCheck"),
                "ResultStatus": obj.get("ResultStatus"),
                "AsFoundResult": obj.get("AsFoundResult"),
                "AsLeftResult": obj.get("AsLeftResult"),
                "EquipmentId": obj.get("EquipmentId"),
                "LegacyId": obj.get("LegacyId"),
                "SerialNumber": obj.get("SerialNumber"),
                "SerialNumberChange": obj.get("SerialNumberChange"),
                "AssetTag": obj.get("AssetTag"),
                "AssetTagChange": obj.get("AssetTagChange"),
                "AssetUser": obj.get("AssetUser"),
                "AssetUserChange": obj.get("AssetUserChange"),
                "ProviderTechnician": obj.get("ProviderTechnician"),
                "ProviderPhone": obj.get("ProviderPhone"),
                "ProviderCompany": obj.get("ProviderCompany"),
                "CertificateNumber": obj.get("CertificateNumber"),
                "ServiceDate": obj.get("ServiceDate"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "VendorTag": obj.get("VendorTag"),
            }
        )
        return _obj
