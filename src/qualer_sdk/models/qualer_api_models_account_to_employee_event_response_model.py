# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsAccountToEmployeeEventResponseModel(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "id": "int",
        "subject": "str",
        "created_on_utc": "datetime",
        "event_type_id": "int",
        "event_type_group": "str",
    }

    attribute_map = {
        "id": "Id",
        "subject": "Subject",
        "created_on_utc": "CreatedOnUtc",
        "event_type_id": "EventTypeId",
        "event_type_group": "EventTypeGroup",
    }

    def __init__(
        self,
        id=None,
        subject=None,
        created_on_utc=None,
        event_type_id=None,
        event_type_group=None,
        _configuration=None,
    ):  # noqa: E501
        """QualerApiModelsAccountToEmployeeEventResponseModel - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._id = None
        self._subject = None
        self._created_on_utc = None
        self._event_type_id = None
        self._event_type_group = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if subject is not None:
            self.subject = subject
        if created_on_utc is not None:
            self.created_on_utc = created_on_utc
        if event_type_id is not None:
            self.event_type_id = event_type_id
        if event_type_group is not None:
            self.event_type_group = event_type_group

    @property
    def id(self):
        """Gets the id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501


        :return: The id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this QualerApiModelsAccountToEmployeeEventResponseModel.


        :param id: The id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def subject(self):
        """Gets the subject of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501


        :return: The subject of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._subject

    @subject.setter
    def subject(self, subject):
        """Sets the subject of this QualerApiModelsAccountToEmployeeEventResponseModel.


        :param subject: The subject of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :type: str
        """

        self._subject = subject

    @property
    def created_on_utc(self):
        """Gets the created_on_utc of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501


        :return: The created_on_utc of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :rtype: datetime
        """
        return self._created_on_utc

    @created_on_utc.setter
    def created_on_utc(self, created_on_utc):
        """Sets the created_on_utc of this QualerApiModelsAccountToEmployeeEventResponseModel.


        :param created_on_utc: The created_on_utc of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :type: datetime
        """

        self._created_on_utc = created_on_utc

    @property
    def event_type_id(self):
        """Gets the event_type_id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501


        :return: The event_type_id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :rtype: int
        """
        return self._event_type_id

    @event_type_id.setter
    def event_type_id(self, event_type_id):
        """Sets the event_type_id of this QualerApiModelsAccountToEmployeeEventResponseModel.


        :param event_type_id: The event_type_id of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :type: int
        """

        self._event_type_id = event_type_id

    @property
    def event_type_group(self):
        """Gets the event_type_group of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501


        :return: The event_type_group of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :rtype: str
        """
        return self._event_type_group

    @event_type_group.setter
    def event_type_group(self, event_type_group):
        """Sets the event_type_group of this QualerApiModelsAccountToEmployeeEventResponseModel.


        :param event_type_group: The event_type_group of this QualerApiModelsAccountToEmployeeEventResponseModel.  # noqa: E501
        :type: str
        """

        self._event_type_group = event_type_group

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(QualerApiModelsAccountToEmployeeEventResponseModel, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, QualerApiModelsAccountToEmployeeEventResponseModel):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, QualerApiModelsAccountToEmployeeEventResponseModel):
            return True

        return self.to_dict() != other.to_dict()
