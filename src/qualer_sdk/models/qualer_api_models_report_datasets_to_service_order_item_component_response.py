# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse
    """

    order_item_id: Optional[StrictInt] = Field(None, alias="OrderItemId")
    component_asset_id: Optional[StrictInt] = Field(None, alias="ComponentAssetId")
    component_serial_number: Optional[StrictStr] = Field(
        None, alias="ComponentSerialNumber"
    )
    component_asset_tag: Optional[StrictStr] = Field(None, alias="ComponentAssetTag")
    component_asset_user: Optional[StrictStr] = Field(None, alias="ComponentAssetUser")
    component_equipment_id: Optional[StrictStr] = Field(
        None, alias="ComponentEquipmentId"
    )
    component_manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="ComponentManufacturerPartNumber"
    )
    component_manufacturer: Optional[StrictStr] = Field(
        None, alias="ComponentManufacturer"
    )
    component_root_category: Optional[StrictStr] = Field(
        None, alias="ComponentRootCategory"
    )
    component_sub_category: Optional[StrictStr] = Field(
        None, alias="ComponentSubCategory"
    )
    component_location: Optional[StrictStr] = Field(None, alias="ComponentLocation")
    component_display_name: Optional[StrictStr] = Field(
        None, alias="ComponentDisplayName"
    )
    component_display_part_number: Optional[StrictStr] = Field(
        None, alias="ComponentDisplayPartNumber"
    )
    __properties = [
        "OrderItemId",
        "ComponentAssetId",
        "ComponentSerialNumber",
        "ComponentAssetTag",
        "ComponentAssetUser",
        "ComponentEquipmentId",
        "ComponentManufacturerPartNumber",
        "ComponentManufacturer",
        "ComponentRootCategory",
        "ComponentSubCategory",
        "ComponentLocation",
        "ComponentDisplayName",
        "ComponentDisplayPartNumber",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse.parse_obj(
                obj
            )

        _obj = (
            QualerApiModelsReportDatasetsToServiceOrderItemComponentResponse.parse_obj(
                {
                    "order_item_id": obj.get("OrderItemId"),
                    "component_asset_id": obj.get("ComponentAssetId"),
                    "component_serial_number": obj.get("ComponentSerialNumber"),
                    "component_asset_tag": obj.get("ComponentAssetTag"),
                    "component_asset_user": obj.get("ComponentAssetUser"),
                    "component_equipment_id": obj.get("ComponentEquipmentId"),
                    "component_manufacturer_part_number": obj.get(
                        "ComponentManufacturerPartNumber"
                    ),
                    "component_manufacturer": obj.get("ComponentManufacturer"),
                    "component_root_category": obj.get("ComponentRootCategory"),
                    "component_sub_category": obj.get("ComponentSubCategory"),
                    "component_location": obj.get("ComponentLocation"),
                    "component_display_name": obj.get("ComponentDisplayName"),
                    "component_display_part_number": obj.get(
                        "ComponentDisplayPartNumber"
                    ),
                }
            )
        )
        return _obj
