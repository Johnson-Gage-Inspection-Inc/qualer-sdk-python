# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator


class QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel(BaseModel):
    """
    QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel
    """

    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    guid: Optional[StrictStr] = Field(None, alias="Guid")
    service_order_number: Optional[StrictInt] = Field(None, alias="ServiceOrderNumber")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    due_date: Optional[datetime] = Field(None, alias="DueDate")
    assets: Optional[StrictInt] = Field(None, alias="Assets")
    completed_assets: Optional[StrictInt] = Field(None, alias="CompletedAssets")
    order_status: Optional[StrictStr] = Field(None, alias="OrderStatus")
    is_quality_control_fail: Optional[StrictBool] = Field(
        None, alias="IsQualityControlFail"
    )
    service_private_comments: Optional[StrictStr] = Field(
        None, alias="ServicePrivateComments"
    )
    client_company_id: Optional[StrictInt] = Field(None, alias="ClientCompanyId")
    client_company_name: Optional[StrictStr] = Field(None, alias="ClientCompanyName")
    client_site_name: Optional[StrictStr] = Field(None, alias="ClientSiteName")
    client_legacy_id: Optional[StrictStr] = Field(None, alias="ClientLegacyId")
    business_from_time: Optional[datetime] = Field(None, alias="BusinessFromTime")
    business_to_time: Optional[datetime] = Field(None, alias="BusinessToTime")
    timeframe: Optional[StrictStr] = Field(None, alias="Timeframe")
    site_access_notes: Optional[StrictStr] = Field(None, alias="SiteAccessNotes")
    desired_date: Optional[datetime] = Field(None, alias="DesiredDate")
    deadline_date: Optional[datetime] = Field(None, alias="DeadlineDate")
    request_from_date: Optional[datetime] = Field(None, alias="RequestFromDate")
    request_from_time: Optional[datetime] = Field(None, alias="RequestFromTime")
    request_to_date: Optional[datetime] = Field(None, alias="RequestToDate")
    request_to_time: Optional[datetime] = Field(None, alias="RequestToTime")
    __properties = [
        "ServiceOrderId",
        "Guid",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "DueDate",
        "Assets",
        "CompletedAssets",
        "OrderStatus",
        "IsQualityControlFail",
        "ServicePrivateComments",
        "ClientCompanyId",
        "ClientCompanyName",
        "ClientSiteName",
        "ClientLegacyId",
        "BusinessFromTime",
        "BusinessToTime",
        "Timeframe",
        "SiteAccessNotes",
        "DesiredDate",
        "DeadlineDate",
        "RequestFromDate",
        "RequestFromTime",
        "RequestToDate",
        "RequestToTime",
    ]

    @validator("order_status")
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "New",
            "Draft",
            "WaitingForApproval",
            "Submitted",
            "Processing",
            "QualityControl",
            "Cancelled",
            "WaitingForClientSignOff",
            "Completed",
            "Denied",
            "Delayed",
            "Scheduling",
            "Closed",
            "WaitingForVendorSignOff",
            "DelayedApproval",
            "Ready",
        ):
            raise ValueError(
                "must be one of enum values ('New', 'Draft', 'WaitingForApproval', 'Submitted', 'Processing', 'QualityControl', 'Cancelled', 'WaitingForClientSignOff', 'Completed', 'Denied', 'Delayed', 'Scheduling', 'Closed', 'WaitingForVendorSignOff', 'DelayedApproval', 'Ready')"
            )
        return value

    @validator("timeframe")
    def timeframe_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "AsSoonAsPossible",
            "Urgent",
            "OnDateTime",
            "WithinRange",
            "BeforeDate",
        ):
            raise ValueError(
                "must be one of enum values ('AsSoonAsPossible', 'Urgent', 'OnDateTime', 'WithinRange', 'BeforeDate')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel:
        """Create an instance of QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel:
        """Create an instance of QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel.parse_obj(
                obj
            )

        _obj = (
            QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel.parse_obj(
                {
                    "service_order_id": obj.get("ServiceOrderId"),
                    "guid": obj.get("Guid"),
                    "service_order_number": obj.get("ServiceOrderNumber"),
                    "custom_order_number": obj.get("CustomOrderNumber"),
                    "due_date": obj.get("DueDate"),
                    "assets": obj.get("Assets"),
                    "completed_assets": obj.get("CompletedAssets"),
                    "order_status": obj.get("OrderStatus"),
                    "is_quality_control_fail": obj.get("IsQualityControlFail"),
                    "service_private_comments": obj.get("ServicePrivateComments"),
                    "client_company_id": obj.get("ClientCompanyId"),
                    "client_company_name": obj.get("ClientCompanyName"),
                    "client_site_name": obj.get("ClientSiteName"),
                    "client_legacy_id": obj.get("ClientLegacyId"),
                    "business_from_time": obj.get("BusinessFromTime"),
                    "business_to_time": obj.get("BusinessToTime"),
                    "timeframe": obj.get("Timeframe"),
                    "site_access_notes": obj.get("SiteAccessNotes"),
                    "desired_date": obj.get("DesiredDate"),
                    "deadline_date": obj.get("DeadlineDate"),
                    "request_from_date": obj.get("RequestFromDate"),
                    "request_from_time": obj.get("RequestFromTime"),
                    "request_to_date": obj.get("RequestToDate"),
                    "request_to_time": obj.get("RequestToTime"),
                }
            )
        )
        return _obj
