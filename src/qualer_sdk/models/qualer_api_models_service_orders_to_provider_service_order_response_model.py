# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel(BaseModel):
    """
    QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel
    """  # noqa: E501

    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    guid: Optional[StrictStr] = Field(default=None, alias="Guid")
    service_order_number: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderNumber"
    )
    custom_order_number: Optional[StrictStr] = Field(
        default=None, alias="CustomOrderNumber"
    )
    due_date: Optional[datetime] = Field(default=None, alias="DueDate")
    assets: Optional[StrictInt] = Field(default=None, alias="Assets")
    completed_assets: Optional[StrictInt] = Field(default=None, alias="CompletedAssets")
    order_status: Optional[StrictStr] = Field(default=None, alias="OrderStatus")
    is_quality_control_fail: Optional[StrictBool] = Field(
        default=None, alias="IsQualityControlFail"
    )
    service_private_comments: Optional[StrictStr] = Field(
        default=None, alias="ServicePrivateComments"
    )
    client_company_id: Optional[StrictInt] = Field(
        default=None, alias="ClientCompanyId"
    )
    client_company_name: Optional[StrictStr] = Field(
        default=None, alias="ClientCompanyName"
    )
    client_site_name: Optional[StrictStr] = Field(default=None, alias="ClientSiteName")
    client_legacy_id: Optional[StrictStr] = Field(default=None, alias="ClientLegacyId")
    business_from_time: Optional[datetime] = Field(
        default=None, alias="BusinessFromTime"
    )
    business_to_time: Optional[datetime] = Field(default=None, alias="BusinessToTime")
    timeframe: Optional[StrictStr] = Field(default=None, alias="Timeframe")
    site_access_notes: Optional[StrictStr] = Field(
        default=None, alias="SiteAccessNotes"
    )
    desired_date: Optional[datetime] = Field(default=None, alias="DesiredDate")
    deadline_date: Optional[datetime] = Field(default=None, alias="DeadlineDate")
    request_from_date: Optional[datetime] = Field(default=None, alias="RequestFromDate")
    request_from_time: Optional[datetime] = Field(default=None, alias="RequestFromTime")
    request_to_date: Optional[datetime] = Field(default=None, alias="RequestToDate")
    request_to_time: Optional[datetime] = Field(default=None, alias="RequestToTime")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderId",
        "Guid",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "DueDate",
        "Assets",
        "CompletedAssets",
        "OrderStatus",
        "IsQualityControlFail",
        "ServicePrivateComments",
        "ClientCompanyId",
        "ClientCompanyName",
        "ClientSiteName",
        "ClientLegacyId",
        "BusinessFromTime",
        "BusinessToTime",
        "Timeframe",
        "SiteAccessNotes",
        "DesiredDate",
        "DeadlineDate",
        "RequestFromDate",
        "RequestFromTime",
        "RequestToDate",
        "RequestToTime",
    ]

    @field_validator("order_status")
    def order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "New",
                "Draft",
                "WaitingForApproval",
                "Submitted",
                "Processing",
                "QualityControl",
                "Cancelled",
                "WaitingForClientSignOff",
                "Completed",
                "Denied",
                "Delayed",
                "Scheduling",
                "Closed",
                "WaitingForVendorSignOff",
                "DelayedApproval",
                "Ready",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('New', 'Draft', 'WaitingForApproval', 'Submitted', 'Processing', 'QualityControl', 'Cancelled', 'WaitingForClientSignOff', 'Completed', 'Denied', 'Delayed', 'Scheduling', 'Closed', 'WaitingForVendorSignOff', 'DelayedApproval', 'Ready')"
            )
        return value

    @field_validator("timeframe")
    def timeframe_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["AsSoonAsPossible", "Urgent", "OnDateTime", "WithinRange", "BeforeDate"]
        ):
            raise ValueError(
                "must be one of enum values ('AsSoonAsPossible', 'Urgent', 'OnDateTime', 'WithinRange', 'BeforeDate')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "Guid": obj.get("Guid"),
                "ServiceOrderNumber": obj.get("ServiceOrderNumber"),
                "CustomOrderNumber": obj.get("CustomOrderNumber"),
                "DueDate": obj.get("DueDate"),
                "Assets": obj.get("Assets"),
                "CompletedAssets": obj.get("CompletedAssets"),
                "OrderStatus": obj.get("OrderStatus"),
                "IsQualityControlFail": obj.get("IsQualityControlFail"),
                "ServicePrivateComments": obj.get("ServicePrivateComments"),
                "ClientCompanyId": obj.get("ClientCompanyId"),
                "ClientCompanyName": obj.get("ClientCompanyName"),
                "ClientSiteName": obj.get("ClientSiteName"),
                "ClientLegacyId": obj.get("ClientLegacyId"),
                "BusinessFromTime": obj.get("BusinessFromTime"),
                "BusinessToTime": obj.get("BusinessToTime"),
                "Timeframe": obj.get("Timeframe"),
                "SiteAccessNotes": obj.get("SiteAccessNotes"),
                "DesiredDate": obj.get("DesiredDate"),
                "DeadlineDate": obj.get("DeadlineDate"),
                "RequestFromDate": obj.get("RequestFromDate"),
                "RequestFromTime": obj.get("RequestFromTime"),
                "RequestToDate": obj.get("RequestToDate"),
                "RequestToTime": obj.get("RequestToTime"),
            }
        )
        return _obj
