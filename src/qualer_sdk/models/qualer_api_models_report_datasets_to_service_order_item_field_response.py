# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse
    """

    field_id: Optional[StrictStr] = Field(None, alias="FieldId")
    type: Optional[StrictStr] = Field(None, alias="Type")
    value: Optional[StrictStr] = Field(None, alias="Value")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    service_order_item_task_id: Optional[StrictInt] = Field(
        None, alias="ServiceOrderItemTaskId"
    )
    __properties = [
        "FieldId",
        "Type",
        "Value",
        "ServiceOrderItemId",
        "ServiceOrderItemTaskId",
    ]

    @validator("type")
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Int",
            "Double",
            "String",
            "Boolean",
            "Date",
            "List",
            "DateTime",
            "ValueLookup",
            "Text",
        ):
            raise ValueError(
                "must be one of enum values ('Int', 'Double', 'String', 'Boolean', 'Date', 'List', 'DateTime', 'ValueLookup', 'Text')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse:
        """Create an instance of QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return (
                QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse.parse_obj(
                    obj
                )
            )

        _obj = QualerApiModelsReportDatasetsToServiceOrderItemFieldResponse.parse_obj(
            {
                "field_id": obj.get("FieldId"),
                "type": obj.get("Type"),
                "value": obj.get("Value"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "service_order_item_task_id": obj.get("ServiceOrderItemTaskId"),
            }
        )
        return _obj
