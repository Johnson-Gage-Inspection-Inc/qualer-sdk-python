# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, conlist

from qualer_sdk.models.qualer_api_models_service_orders_to_base_work_item_model import (
    QualerApiModelsServiceOrdersToBaseWorkItemModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_charge_response_model_base_order_part_repair_price_model import (
    QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderPartRepairPriceModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_charge_response_model_base_order_task_price_model import (
    QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderTaskPriceModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_charge_response_model_base_price_model import (
    QualerApiModelsServiceOrdersToChargeResponseModelBasePriceModel,
)


class QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel(BaseModel):
    """
    QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel
    """

    charges: Optional[
        conlist(QualerApiModelsServiceOrdersToChargeResponseModelBasePriceModel)
    ] = Field(None, alias="Charges")
    tasks: Optional[
        conlist(
            QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderTaskPriceModel
        )
    ] = Field(None, alias="Tasks")
    parts: Optional[
        conlist(
            QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderPartRepairPriceModel
        )
    ] = Field(None, alias="Parts")
    repairs: Optional[
        conlist(
            QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderPartRepairPriceModel
        )
    ] = Field(None, alias="Repairs")
    work_items: Optional[conlist(QualerApiModelsServiceOrdersToBaseWorkItemModel)] = (
        Field(None, alias="WorkItems")
    )
    __properties = ["Charges", "Tasks", "Parts", "Repairs", "WorkItems"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel:
        """Create an instance of QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(
            by_alias=True,
            exclude={
                "charges",
                "tasks",
                "parts",
                "repairs",
                "work_items",
            },
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in charges (list)
        _items = []
        if self.charges:
            for _item in self.charges:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Charges"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in tasks (list)
        _items = []
        if self.tasks:
            for _item in self.tasks:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Tasks"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in parts (list)
        _items = []
        if self.parts:
            for _item in self.parts:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Parts"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in repairs (list)
        _items = []
        if self.repairs:
            for _item in self.repairs:
                if _item:
                    _items.append(_item.to_dict())
            _dict["Repairs"] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in work_items (list)
        _items = []
        if self.work_items:
            for _item in self.work_items:
                if _item:
                    _items.append(_item.to_dict())
            _dict["WorkItems"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel:
        """Create an instance of QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return (
                QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel.parse_obj(
                    obj
                )
            )

        _obj = QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel.parse_obj(
            {
                "charges": (
                    [
                        QualerApiModelsServiceOrdersToChargeResponseModelBasePriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Charges")
                    ]
                    if obj.get("Charges") is not None
                    else None
                ),
                "tasks": (
                    [
                        QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderTaskPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Tasks")
                    ]
                    if obj.get("Tasks") is not None
                    else None
                ),
                "parts": (
                    [
                        QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderPartRepairPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Parts")
                    ]
                    if obj.get("Parts") is not None
                    else None
                ),
                "repairs": (
                    [
                        QualerApiModelsServiceOrdersToChargeResponseModelBaseOrderPartRepairPriceModel.from_dict(
                            _item
                        )
                        for _item in obj.get("Repairs")
                    ]
                    if obj.get("Repairs") is not None
                    else None
                ),
                "work_items": (
                    [
                        QualerApiModelsServiceOrdersToBaseWorkItemModel.from_dict(_item)
                        for _item in obj.get("WorkItems")
                    ]
                    if obj.get("WorkItems") is not None
                    else None
                ),
            }
        )
        return _obj
