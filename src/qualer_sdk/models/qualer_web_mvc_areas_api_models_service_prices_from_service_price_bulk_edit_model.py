# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class QualerWebMvcAreasApiModelsServicePricesFromServicePriceBulkEditModel(BaseModel):
    """
    QualerWebMvcAreasApiModelsServicePricesFromServicePriceBulkEditModel
    """  # noqa: E501

    service_option_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOptionId"
    )
    service_option: Optional[StrictStr] = Field(default=None, alias="ServiceOption")
    service_option_code: Optional[StrictStr] = Field(
        default=None, alias="ServiceOptionCode"
    )
    option_type: Optional[StrictStr] = Field(default=None, alias="OptionType")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    service_task_id: Optional[StrictInt] = Field(default=None, alias="ServiceTaskId")
    service_code: Optional[StrictStr] = Field(default=None, alias="ServiceCode")
    document_number: Optional[StrictStr] = Field(default=None, alias="DocumentNumber")
    document_section: Optional[StrictStr] = Field(default=None, alias="DocumentSection")
    capability_id: Optional[StrictInt] = Field(default=None, alias="CapabilityId")
    service_type_id: Optional[StrictInt] = Field(default=None, alias="ServiceTypeId")
    service_task_price_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceTaskPriceId"
    )
    service_pricing_id: Optional[StrictInt] = Field(
        default=None, alias="ServicePricingId"
    )
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Price")
    is_hourly: Optional[StrictBool] = Field(default=None, alias="IsHourly")
    issue: Optional[StrictStr] = Field(default=None, alias="Issue")
    log_error: Optional[StrictStr] = Field(default=None, alias="LogError")
    __properties: ClassVar[List[str]] = [
        "ServiceOptionId",
        "ServiceOption",
        "ServiceOptionCode",
        "OptionType",
        "Description",
        "ServiceTaskId",
        "ServiceCode",
        "DocumentNumber",
        "DocumentSection",
        "CapabilityId",
        "ServiceTypeId",
        "ServiceTaskPriceId",
        "ServicePricingId",
        "Price",
        "IsHourly",
        "Issue",
        "LogError",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerWebMvcAreasApiModelsServicePricesFromServicePriceBulkEditModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerWebMvcAreasApiModelsServicePricesFromServicePriceBulkEditModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOptionId": obj.get("ServiceOptionId"),
                "ServiceOption": obj.get("ServiceOption"),
                "ServiceOptionCode": obj.get("ServiceOptionCode"),
                "OptionType": obj.get("OptionType"),
                "Description": obj.get("Description"),
                "ServiceTaskId": obj.get("ServiceTaskId"),
                "ServiceCode": obj.get("ServiceCode"),
                "DocumentNumber": obj.get("DocumentNumber"),
                "DocumentSection": obj.get("DocumentSection"),
                "CapabilityId": obj.get("CapabilityId"),
                "ServiceTypeId": obj.get("ServiceTypeId"),
                "ServiceTaskPriceId": obj.get("ServiceTaskPriceId"),
                "ServicePricingId": obj.get("ServicePricingId"),
                "Price": obj.get("Price"),
                "IsHourly": obj.get("IsHourly"),
                "Issue": obj.get("Issue"),
                "LogError": obj.get("LogError"),
            }
        )
        return _obj
