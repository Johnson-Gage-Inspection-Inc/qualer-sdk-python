# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr


class QualerApiModelsReportDatasetsToExternalDataReportResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToExternalDataReportResponse
    """

    measurement_set_id: Optional[StrictInt] = Field(None, alias="MeasurementSetId")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    row: Optional[StrictInt] = Field(None, alias="Row")
    a: Optional[StrictStr] = Field(None, alias="A")
    b: Optional[StrictStr] = Field(None, alias="B")
    c: Optional[StrictStr] = Field(None, alias="C")
    d: Optional[StrictStr] = Field(None, alias="D")
    e: Optional[StrictStr] = Field(None, alias="E")
    f: Optional[StrictStr] = Field(None, alias="F")
    g: Optional[StrictStr] = Field(None, alias="G")
    h: Optional[StrictStr] = Field(None, alias="H")
    i: Optional[StrictStr] = Field(None, alias="I")
    j: Optional[StrictStr] = Field(None, alias="J")
    k: Optional[StrictStr] = Field(None, alias="K")
    l: Optional[StrictStr] = Field(None, alias="L")
    m: Optional[StrictStr] = Field(None, alias="M")
    n: Optional[StrictStr] = Field(None, alias="N")
    o: Optional[StrictStr] = Field(None, alias="O")
    p: Optional[StrictStr] = Field(None, alias="P")
    q: Optional[StrictStr] = Field(None, alias="Q")
    r: Optional[StrictStr] = Field(None, alias="R")
    s: Optional[StrictStr] = Field(None, alias="S")
    t: Optional[StrictStr] = Field(None, alias="T")
    u: Optional[StrictStr] = Field(None, alias="U")
    v: Optional[StrictStr] = Field(None, alias="V")
    w: Optional[StrictStr] = Field(None, alias="W")
    x: Optional[StrictStr] = Field(None, alias="X")
    y: Optional[StrictStr] = Field(None, alias="Y")
    z: Optional[StrictStr] = Field(None, alias="Z")
    __properties = [
        "MeasurementSetId",
        "ServiceOrderItemId",
        "Row",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToExternalDataReportResponse:
        """Create an instance of QualerApiModelsReportDatasetsToExternalDataReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToExternalDataReportResponse:
        """Create an instance of QualerApiModelsReportDatasetsToExternalDataReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToExternalDataReportResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsReportDatasetsToExternalDataReportResponse.parse_obj(
            {
                "measurement_set_id": obj.get("MeasurementSetId"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "row": obj.get("Row"),
                "a": obj.get("A"),
                "b": obj.get("B"),
                "c": obj.get("C"),
                "d": obj.get("D"),
                "e": obj.get("E"),
                "f": obj.get("F"),
                "g": obj.get("G"),
                "h": obj.get("H"),
                "i": obj.get("I"),
                "j": obj.get("J"),
                "k": obj.get("K"),
                "l": obj.get("L"),
                "m": obj.get("M"),
                "n": obj.get("N"),
                "o": obj.get("O"),
                "p": obj.get("P"),
                "q": obj.get("Q"),
                "r": obj.get("R"),
                "s": obj.get("S"),
                "t": obj.get("T"),
                "u": obj.get("U"),
                "v": obj.get("V"),
                "w": obj.get("W"),
                "x": obj.get("X"),
                "y": obj.get("Y"),
                "z": obj.get("Z"),
            }
        )
        return _obj
