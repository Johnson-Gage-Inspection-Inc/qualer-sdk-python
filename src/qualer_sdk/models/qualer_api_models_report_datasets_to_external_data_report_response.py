# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsReportDatasetsToExternalDataReportResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToExternalDataReportResponse
    """  # noqa: E501

    measurement_set_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementSetId"
    )
    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    row: Optional[StrictInt] = Field(default=None, alias="Row")
    a: Optional[StrictStr] = Field(default=None, alias="A")
    b: Optional[StrictStr] = Field(default=None, alias="B")
    c: Optional[StrictStr] = Field(default=None, alias="C")
    d: Optional[StrictStr] = Field(default=None, alias="D")
    e: Optional[StrictStr] = Field(default=None, alias="E")
    f: Optional[StrictStr] = Field(default=None, alias="F")
    g: Optional[StrictStr] = Field(default=None, alias="G")
    h: Optional[StrictStr] = Field(default=None, alias="H")
    i: Optional[StrictStr] = Field(default=None, alias="I")
    j: Optional[StrictStr] = Field(default=None, alias="J")
    k: Optional[StrictStr] = Field(default=None, alias="K")
    l: Optional[StrictStr] = Field(default=None, alias="L")
    m: Optional[StrictStr] = Field(default=None, alias="M")
    n: Optional[StrictStr] = Field(default=None, alias="N")
    o: Optional[StrictStr] = Field(default=None, alias="O")
    p: Optional[StrictStr] = Field(default=None, alias="P")
    q: Optional[StrictStr] = Field(default=None, alias="Q")
    r: Optional[StrictStr] = Field(default=None, alias="R")
    s: Optional[StrictStr] = Field(default=None, alias="S")
    t: Optional[StrictStr] = Field(default=None, alias="T")
    u: Optional[StrictStr] = Field(default=None, alias="U")
    v: Optional[StrictStr] = Field(default=None, alias="V")
    w: Optional[StrictStr] = Field(default=None, alias="W")
    x: Optional[StrictStr] = Field(default=None, alias="X")
    y: Optional[StrictStr] = Field(default=None, alias="Y")
    z: Optional[StrictStr] = Field(default=None, alias="Z")
    __properties: ClassVar[List[str]] = [
        "MeasurementSetId",
        "ServiceOrderItemId",
        "Row",
        "A",
        "B",
        "C",
        "D",
        "E",
        "F",
        "G",
        "H",
        "I",
        "J",
        "K",
        "L",
        "M",
        "N",
        "O",
        "P",
        "Q",
        "R",
        "S",
        "T",
        "U",
        "V",
        "W",
        "X",
        "Y",
        "Z",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToExternalDataReportResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsReportDatasetsToExternalDataReportResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "MeasurementSetId": obj.get("MeasurementSetId"),
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "Row": obj.get("Row"),
                "A": obj.get("A"),
                "B": obj.get("B"),
                "C": obj.get("C"),
                "D": obj.get("D"),
                "E": obj.get("E"),
                "F": obj.get("F"),
                "G": obj.get("G"),
                "H": obj.get("H"),
                "I": obj.get("I"),
                "J": obj.get("J"),
                "K": obj.get("K"),
                "L": obj.get("L"),
                "M": obj.get("M"),
                "N": obj.get("N"),
                "O": obj.get("O"),
                "P": obj.get("P"),
                "Q": obj.get("Q"),
                "R": obj.get("R"),
                "S": obj.get("S"),
                "T": obj.get("T"),
                "U": obj.get("U"),
                "V": obj.get("V"),
                "W": obj.get("W"),
                "X": obj.get("X"),
                "Y": obj.get("Y"),
                "Z": obj.get("Z"),
            }
        )
        return _obj
