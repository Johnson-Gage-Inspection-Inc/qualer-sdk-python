# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class QualerApiModelsAssetToAssetServiceForecastModel(BaseModel):
    """
    QualerApiModelsAssetToAssetServiceForecastModel
    """  # noqa: E501

    company_id: Optional[StrictInt] = Field(default=None, alias="CompanyId")
    asset_id: Optional[StrictInt] = Field(default=None, alias="AssetId")
    site_id: Optional[StrictInt] = Field(default=None, alias="SiteId")
    asset_service_record_id: Optional[StrictInt] = Field(
        default=None, alias="AssetServiceRecordId"
    )
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    category_name: Optional[StrictStr] = Field(default=None, alias="CategoryName")
    manufacturer_name: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerName"
    )
    site_name: Optional[StrictStr] = Field(default=None, alias="SiteName")
    maintenance_plan_id: Optional[StrictInt] = Field(
        default=None, alias="MaintenancePlanId"
    )
    maintenance_plan_name: Optional[StrictStr] = Field(
        default=None, alias="MaintenancePlanName"
    )
    maintenance_task_id: Optional[StrictInt] = Field(
        default=None, alias="MaintenanceTaskId"
    )
    maintenance_task_name: Optional[StrictStr] = Field(
        default=None, alias="MaintenanceTaskName"
    )
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    advance_recall_date: Optional[datetime] = Field(
        default=None, alias="AdvanceRecallDate"
    )
    grace_period_date: Optional[datetime] = Field(default=None, alias="GracePeriodDate")
    certificate_next_service_date: Optional[datetime] = Field(
        default=None, alias="CertificateNextServiceDate"
    )
    service_interval: Optional[StrictStr] = Field(default=None, alias="ServiceInterval")
    interval_cycle: Optional[StrictStr] = Field(default=None, alias="IntervalCycle")
    interval_length: Optional[StrictInt] = Field(default=None, alias="IntervalLength")
    on_day: Optional[StrictStr] = Field(default=None, alias="OnDay")
    on_month: Optional[StrictStr] = Field(default=None, alias="OnMonth")
    on_week_days: Optional[StrictStr] = Field(default=None, alias="OnWeekDays")
    weekday_of_month: Optional[StrictStr] = Field(default=None, alias="WeekdayOfMonth")
    advance_recall_period: Optional[StrictStr] = Field(
        default=None, alias="AdvanceRecallPeriod"
    )
    days_before_due: Optional[StrictInt] = Field(default=None, alias="DaysBeforeDue")
    past_due_grace_period: Optional[StrictStr] = Field(
        default=None, alias="PastDueGracePeriod"
    )
    days_after_due: Optional[StrictInt] = Field(default=None, alias="DaysAfterDue")
    __properties: ClassVar[List[str]] = [
        "CompanyId",
        "AssetId",
        "SiteId",
        "AssetServiceRecordId",
        "SerialNumber",
        "AssetUser",
        "AssetTag",
        "EquipmentId",
        "AssetName",
        "CategoryName",
        "ManufacturerName",
        "SiteName",
        "MaintenancePlanId",
        "MaintenancePlanName",
        "MaintenanceTaskId",
        "MaintenanceTaskName",
        "NextServiceDate",
        "AdvanceRecallDate",
        "GracePeriodDate",
        "CertificateNextServiceDate",
        "ServiceInterval",
        "IntervalCycle",
        "IntervalLength",
        "OnDay",
        "OnMonth",
        "OnWeekDays",
        "WeekdayOfMonth",
        "AdvanceRecallPeriod",
        "DaysBeforeDue",
        "PastDueGracePeriod",
        "DaysAfterDue",
    ]

    @field_validator("on_day")
    def on_day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Day1",
                "Day2",
                "Day3",
                "Day4",
                "Day5",
                "Day6",
                "Day7",
                "Day8",
                "Day9",
                "Day10",
                "Day11",
                "Day12",
                "Day13",
                "Day14",
                "Day15",
                "Day16",
                "Day17",
                "Day18",
                "Day19",
                "Day20",
                "Day21",
                "Day22",
                "Day23",
                "Day24",
                "Day25",
                "Day26",
                "Day27",
                "Day28",
                "Day29",
                "Day30",
                "Day31",
                "First",
                "Second",
                "Third",
                "Fourth",
                "Last",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10', 'Day11', 'Day12', 'Day13', 'Day14', 'Day15', 'Day16', 'Day17', 'Day18', 'Day19', 'Day20', 'Day21', 'Day22', 'Day23', 'Day24', 'Day25', 'Day26', 'Day27', 'Day28', 'Day29', 'Day30', 'Day31', 'First', 'Second', 'Third', 'Fourth', 'Last')"
            )
        return value

    @field_validator("on_month")
    def on_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "None",
                "January",
                "February",
                "March",
                "April",
                "May",
                "June",
                "July",
                "August",
                "September",
                "October",
                "November",
                "December",
                "All",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('None', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'All')"
            )
        return value

    @field_validator("on_week_days")
    def on_week_days_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "None",
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
                "WeekendDays",
                "WorkDays",
                "EveryDay",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('None', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'WeekendDays', 'WorkDays', 'EveryDay')"
            )
        return value

    @field_validator("weekday_of_month")
    def weekday_of_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Sunday",
                "Monday",
                "Tuesday",
                "Wednesday",
                "Thursday",
                "Friday",
                "Saturday",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToAssetServiceForecastModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToAssetServiceForecastModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "CompanyId": obj.get("CompanyId"),
                "AssetId": obj.get("AssetId"),
                "SiteId": obj.get("SiteId"),
                "AssetServiceRecordId": obj.get("AssetServiceRecordId"),
                "SerialNumber": obj.get("SerialNumber"),
                "AssetUser": obj.get("AssetUser"),
                "AssetTag": obj.get("AssetTag"),
                "EquipmentId": obj.get("EquipmentId"),
                "AssetName": obj.get("AssetName"),
                "CategoryName": obj.get("CategoryName"),
                "ManufacturerName": obj.get("ManufacturerName"),
                "SiteName": obj.get("SiteName"),
                "MaintenancePlanId": obj.get("MaintenancePlanId"),
                "MaintenancePlanName": obj.get("MaintenancePlanName"),
                "MaintenanceTaskId": obj.get("MaintenanceTaskId"),
                "MaintenanceTaskName": obj.get("MaintenanceTaskName"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "AdvanceRecallDate": obj.get("AdvanceRecallDate"),
                "GracePeriodDate": obj.get("GracePeriodDate"),
                "CertificateNextServiceDate": obj.get("CertificateNextServiceDate"),
                "ServiceInterval": obj.get("ServiceInterval"),
                "IntervalCycle": obj.get("IntervalCycle"),
                "IntervalLength": obj.get("IntervalLength"),
                "OnDay": obj.get("OnDay"),
                "OnMonth": obj.get("OnMonth"),
                "OnWeekDays": obj.get("OnWeekDays"),
                "WeekdayOfMonth": obj.get("WeekdayOfMonth"),
                "AdvanceRecallPeriod": obj.get("AdvanceRecallPeriod"),
                "DaysBeforeDue": obj.get("DaysBeforeDue"),
                "PastDueGracePeriod": obj.get("PastDueGracePeriod"),
                "DaysAfterDue": obj.get("DaysAfterDue"),
            }
        )
        return _obj
