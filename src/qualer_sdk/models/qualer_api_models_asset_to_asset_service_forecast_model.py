# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional

from pydantic import BaseModel, Field, StrictInt, StrictStr, validator


class QualerApiModelsAssetToAssetServiceForecastModel(BaseModel):
    """
    QualerApiModelsAssetToAssetServiceForecastModel
    """

    company_id: Optional[StrictInt] = Field(None, alias="CompanyId")
    asset_id: Optional[StrictInt] = Field(None, alias="AssetId")
    site_id: Optional[StrictInt] = Field(None, alias="SiteId")
    asset_service_record_id: Optional[StrictInt] = Field(
        None, alias="AssetServiceRecordId"
    )
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    category_name: Optional[StrictStr] = Field(None, alias="CategoryName")
    manufacturer_name: Optional[StrictStr] = Field(None, alias="ManufacturerName")
    site_name: Optional[StrictStr] = Field(None, alias="SiteName")
    maintenance_plan_id: Optional[StrictInt] = Field(None, alias="MaintenancePlanId")
    maintenance_plan_name: Optional[StrictStr] = Field(
        None, alias="MaintenancePlanName"
    )
    maintenance_task_id: Optional[StrictInt] = Field(None, alias="MaintenanceTaskId")
    maintenance_task_name: Optional[StrictStr] = Field(
        None, alias="MaintenanceTaskName"
    )
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    advance_recall_date: Optional[datetime] = Field(None, alias="AdvanceRecallDate")
    grace_period_date: Optional[datetime] = Field(None, alias="GracePeriodDate")
    certificate_next_service_date: Optional[datetime] = Field(
        None, alias="CertificateNextServiceDate"
    )
    service_interval: Optional[StrictStr] = Field(None, alias="ServiceInterval")
    interval_cycle: Optional[StrictStr] = Field(None, alias="IntervalCycle")
    interval_length: Optional[StrictInt] = Field(None, alias="IntervalLength")
    on_day: Optional[StrictStr] = Field(None, alias="OnDay")
    on_month: Optional[StrictStr] = Field(None, alias="OnMonth")
    on_week_days: Optional[StrictStr] = Field(None, alias="OnWeekDays")
    weekday_of_month: Optional[StrictStr] = Field(None, alias="WeekdayOfMonth")
    advance_recall_period: Optional[StrictStr] = Field(
        None, alias="AdvanceRecallPeriod"
    )
    days_before_due: Optional[StrictInt] = Field(None, alias="DaysBeforeDue")
    past_due_grace_period: Optional[StrictStr] = Field(None, alias="PastDueGracePeriod")
    days_after_due: Optional[StrictInt] = Field(None, alias="DaysAfterDue")
    __properties = [
        "CompanyId",
        "AssetId",
        "SiteId",
        "AssetServiceRecordId",
        "SerialNumber",
        "AssetUser",
        "AssetTag",
        "EquipmentId",
        "AssetName",
        "CategoryName",
        "ManufacturerName",
        "SiteName",
        "MaintenancePlanId",
        "MaintenancePlanName",
        "MaintenanceTaskId",
        "MaintenanceTaskName",
        "NextServiceDate",
        "AdvanceRecallDate",
        "GracePeriodDate",
        "CertificateNextServiceDate",
        "ServiceInterval",
        "IntervalCycle",
        "IntervalLength",
        "OnDay",
        "OnMonth",
        "OnWeekDays",
        "WeekdayOfMonth",
        "AdvanceRecallPeriod",
        "DaysBeforeDue",
        "PastDueGracePeriod",
        "DaysAfterDue",
    ]

    @validator("on_day")
    def on_day_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Day1",
            "Day2",
            "Day3",
            "Day4",
            "Day5",
            "Day6",
            "Day7",
            "Day8",
            "Day9",
            "Day10",
            "Day11",
            "Day12",
            "Day13",
            "Day14",
            "Day15",
            "Day16",
            "Day17",
            "Day18",
            "Day19",
            "Day20",
            "Day21",
            "Day22",
            "Day23",
            "Day24",
            "Day25",
            "Day26",
            "Day27",
            "Day28",
            "Day29",
            "Day30",
            "Day31",
            "First",
            "Second",
            "Third",
            "Fourth",
            "Last",
        ):
            raise ValueError(
                "must be one of enum values ('Day1', 'Day2', 'Day3', 'Day4', 'Day5', 'Day6', 'Day7', 'Day8', 'Day9', 'Day10', 'Day11', 'Day12', 'Day13', 'Day14', 'Day15', 'Day16', 'Day17', 'Day18', 'Day19', 'Day20', 'Day21', 'Day22', 'Day23', 'Day24', 'Day25', 'Day26', 'Day27', 'Day28', 'Day29', 'Day30', 'Day31', 'First', 'Second', 'Third', 'Fourth', 'Last')"
            )
        return value

    @validator("on_month")
    def on_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "None",
            "January",
            "February",
            "March",
            "April",
            "May",
            "June",
            "July",
            "August",
            "September",
            "October",
            "November",
            "December",
            "All",
        ):
            raise ValueError(
                "must be one of enum values ('None', 'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December', 'All')"
            )
        return value

    @validator("on_week_days")
    def on_week_days_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "None",
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
            "WeekendDays",
            "WorkDays",
            "EveryDay",
        ):
            raise ValueError(
                "must be one of enum values ('None', 'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'WeekendDays', 'WorkDays', 'EveryDay')"
            )
        return value

    @validator("weekday_of_month")
    def weekday_of_month_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in (
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday",
        ):
            raise ValueError(
                "must be one of enum values ('Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday')"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsAssetToAssetServiceForecastModel:
        """Create an instance of QualerApiModelsAssetToAssetServiceForecastModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsAssetToAssetServiceForecastModel:
        """Create an instance of QualerApiModelsAssetToAssetServiceForecastModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsAssetToAssetServiceForecastModel.parse_obj(obj)

        _obj = QualerApiModelsAssetToAssetServiceForecastModel.parse_obj(
            {
                "company_id": obj.get("CompanyId"),
                "asset_id": obj.get("AssetId"),
                "site_id": obj.get("SiteId"),
                "asset_service_record_id": obj.get("AssetServiceRecordId"),
                "serial_number": obj.get("SerialNumber"),
                "asset_user": obj.get("AssetUser"),
                "asset_tag": obj.get("AssetTag"),
                "equipment_id": obj.get("EquipmentId"),
                "asset_name": obj.get("AssetName"),
                "category_name": obj.get("CategoryName"),
                "manufacturer_name": obj.get("ManufacturerName"),
                "site_name": obj.get("SiteName"),
                "maintenance_plan_id": obj.get("MaintenancePlanId"),
                "maintenance_plan_name": obj.get("MaintenancePlanName"),
                "maintenance_task_id": obj.get("MaintenanceTaskId"),
                "maintenance_task_name": obj.get("MaintenanceTaskName"),
                "next_service_date": obj.get("NextServiceDate"),
                "advance_recall_date": obj.get("AdvanceRecallDate"),
                "grace_period_date": obj.get("GracePeriodDate"),
                "certificate_next_service_date": obj.get("CertificateNextServiceDate"),
                "service_interval": obj.get("ServiceInterval"),
                "interval_cycle": obj.get("IntervalCycle"),
                "interval_length": obj.get("IntervalLength"),
                "on_day": obj.get("OnDay"),
                "on_month": obj.get("OnMonth"),
                "on_week_days": obj.get("OnWeekDays"),
                "weekday_of_month": obj.get("WeekdayOfMonth"),
                "advance_recall_period": obj.get("AdvanceRecallPeriod"),
                "days_before_due": obj.get("DaysBeforeDue"),
                "past_due_grace_period": obj.get("PastDueGracePeriod"),
                "days_after_due": obj.get("DaysAfterDue"),
            }
        )
        return _obj
