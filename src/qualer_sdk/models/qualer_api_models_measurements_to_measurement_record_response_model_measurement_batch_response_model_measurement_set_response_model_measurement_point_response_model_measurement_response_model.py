# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel(
    BaseModel
):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel
    """  # noqa: E501

    values: Optional[StrictStr] = Field(default=None, alias="Values")
    mean: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Mean")
    sd: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="SD")
    range: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Range")
    delta: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Delta")
    cv: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CV")
    cmc: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="CMC")
    mu: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="MU")
    tur: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TUR")
    tar: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="TAR")
    max_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MaxValue"
    )
    min_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="MinValue"
    )
    error: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Error")
    result: Optional[StrictStr] = Field(default=None, alias="Result")
    updated_on: Optional[datetime] = Field(default=None, alias="UpdatedOn")
    updated_by: Optional[StrictStr] = Field(default=None, alias="UpdatedBy")
    __properties: ClassVar[List[str]] = [
        "Values",
        "Mean",
        "SD",
        "Range",
        "Delta",
        "CV",
        "CMC",
        "MU",
        "TUR",
        "TAR",
        "MaxValue",
        "MinValue",
        "Error",
        "Result",
        "UpdatedOn",
        "UpdatedBy",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModelMeasurementSetResponseModelMeasurementPointResponseModelMeasurementResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "Values": obj.get("Values"),
                "Mean": obj.get("Mean"),
                "SD": obj.get("SD"),
                "Range": obj.get("Range"),
                "Delta": obj.get("Delta"),
                "CV": obj.get("CV"),
                "CMC": obj.get("CMC"),
                "MU": obj.get("MU"),
                "TUR": obj.get("TUR"),
                "TAR": obj.get("TAR"),
                "MaxValue": obj.get("MaxValue"),
                "MinValue": obj.get("MinValue"),
                "Error": obj.get("Error"),
                "Result": obj.get("Result"),
                "UpdatedOn": obj.get("UpdatedOn"),
                "UpdatedBy": obj.get("UpdatedBy"),
            }
        )
        return _obj
