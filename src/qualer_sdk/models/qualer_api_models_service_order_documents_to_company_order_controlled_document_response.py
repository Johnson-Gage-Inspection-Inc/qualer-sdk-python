# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr, field_validator
from typing_extensions import Self


class QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse(
    BaseModel
):
    """
    QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse
    """  # noqa: E501

    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    guid: Optional[StrictStr] = Field(default=None, alias="Guid")
    document_name: Optional[StrictStr] = Field(default=None, alias="DocumentName")
    file_name: Optional[StrictStr] = Field(default=None, alias="FileName")
    document_type: Optional[StrictStr] = Field(default=None, alias="DocumentType")
    revision_number: Optional[StrictInt] = Field(default=None, alias="RevisionNumber")
    report_type: Optional[StrictStr] = Field(default=None, alias="ReportType")
    download_url: Optional[StrictStr] = Field(default=None, alias="DownloadUrl")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderId",
        "Guid",
        "DocumentName",
        "FileName",
        "DocumentType",
        "RevisionNumber",
        "ReportType",
        "DownloadUrl",
    ]

    @field_validator("document_type")
    def document_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["0", "1", "2", "3"]):
            raise ValueError("must be one of enum values ('0', '1', '2', '3')")
        return value

    @field_validator("report_type")
    def report_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["0", "1", "11", "2", "21", "3", "31", "32", "5", "51", "6", "7", "71"]
        ):
            raise ValueError(
                "must be one of enum values ('0', '1', '11', '2', '21', '3', '31', '32', '5', '51', '6', '7', '71')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "Guid": obj.get("Guid"),
                "DocumentName": obj.get("DocumentName"),
                "FileName": obj.get("FileName"),
                "DocumentType": obj.get("DocumentType"),
                "RevisionNumber": obj.get("RevisionNumber"),
                "ReportType": obj.get("ReportType"),
                "DownloadUrl": obj.get("DownloadUrl"),
            }
        )
        return _obj
