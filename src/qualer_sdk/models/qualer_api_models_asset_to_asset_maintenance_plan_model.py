# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_asset_to_asset_maintenance_plan_response import (
    QualerApiModelsAssetToAssetMaintenancePlanResponse,
)


class QualerApiModelsAssetToAssetMaintenancePlanModel(BaseModel):
    """
    QualerApiModelsAssetToAssetMaintenancePlanModel
    """  # noqa: E501

    maintenance_plans: Optional[
        List[QualerApiModelsAssetToAssetMaintenancePlanResponse]
    ] = Field(default=None, alias="MaintenancePlans")
    company_id: Optional[StrictInt] = Field(default=None, alias="CompanyId")
    asset_id: Optional[StrictInt] = Field(default=None, alias="AssetId")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    asset_status: Optional[StrictStr] = Field(default=None, alias="AssetStatus")
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(
        default=None, alias="AssetDescription"
    )
    asset_maker: Optional[StrictStr] = Field(default=None, alias="AssetMaker")
    location: Optional[StrictStr] = Field(default=None, alias="Location")
    room_number: Optional[StrictStr] = Field(default=None, alias="RoomNumber")
    barcode: Optional[StrictStr] = Field(default=None, alias="Barcode")
    legacy_identifier: Optional[StrictStr] = Field(
        default=None, alias="LegacyIdentifier"
    )
    root_category_name: Optional[StrictStr] = Field(
        default=None, alias="RootCategoryName"
    )
    category_name: Optional[StrictStr] = Field(default=None, alias="CategoryName")
    var_class: Optional[StrictStr] = Field(default=None, alias="Class")
    custodian_email: Optional[StrictStr] = Field(default=None, alias="CustodianEmail")
    custodian_first_name: Optional[StrictStr] = Field(
        default=None, alias="CustodianFirstName"
    )
    custodian_last_name: Optional[StrictStr] = Field(
        default=None, alias="CustodianLastName"
    )
    custodian_name: Optional[StrictStr] = Field(default=None, alias="CustodianName")
    department: Optional[StrictStr] = Field(default=None, alias="Department")
    station: Optional[StrictStr] = Field(default=None, alias="Station")
    notes: Optional[StrictStr] = Field(default=None, alias="Notes")
    document_number: Optional[StrictStr] = Field(default=None, alias="DocumentNumber")
    document_section: Optional[StrictStr] = Field(default=None, alias="DocumentSection")
    cumulative_service_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="CumulativeServiceCost"
    )
    product_id: Optional[StrictInt] = Field(default=None, alias="ProductId")
    manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerPartNumber"
    )
    product_name: Optional[StrictStr] = Field(default=None, alias="ProductName")
    product_description: Optional[StrictStr] = Field(
        default=None, alias="ProductDescription"
    )
    product_manufacturer: Optional[StrictStr] = Field(
        default=None, alias="ProductManufacturer"
    )
    site_name: Optional[StrictStr] = Field(default=None, alias="SiteName")
    site_id: Optional[StrictInt] = Field(default=None, alias="SiteId")
    condition: Optional[StrictStr] = Field(default=None, alias="Condition")
    criticality: Optional[StrictStr] = Field(default=None, alias="Criticality")
    pool: Optional[StrictStr] = Field(default=None, alias="Pool")
    purchase_date: Optional[datetime] = Field(default=None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PurchaseCost"
    )
    life_span_months: Optional[StrictInt] = Field(default=None, alias="LifeSpanMonths")
    activation_date: Optional[datetime] = Field(default=None, alias="ActivationDate")
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DepreciationBasis"
    )
    depreciation_method: Optional[StrictInt] = Field(
        default=None, alias="DepreciationMethod"
    )
    retirement_date: Optional[datetime] = Field(default=None, alias="RetirementDate")
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="SalvageValue"
    )
    retirment_reason: Optional[StrictStr] = Field(default=None, alias="RetirmentReason")
    composite_parent_id: Optional[StrictInt] = Field(
        default=None, alias="CompositeParentId"
    )
    composite_child_count: Optional[StrictInt] = Field(
        default=None, alias="CompositeChildCount"
    )
    __properties: ClassVar[List[str]] = [
        "MaintenancePlans",
        "CompanyId",
        "AssetId",
        "SerialNumber",
        "AssetUser",
        "AssetTag",
        "EquipmentId",
        "AssetStatus",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "Location",
        "RoomNumber",
        "Barcode",
        "LegacyIdentifier",
        "RootCategoryName",
        "CategoryName",
        "Class",
        "CustodianEmail",
        "CustodianFirstName",
        "CustodianLastName",
        "CustodianName",
        "Department",
        "Station",
        "Notes",
        "DocumentNumber",
        "DocumentSection",
        "CumulativeServiceCost",
        "ProductId",
        "ManufacturerPartNumber",
        "ProductName",
        "ProductDescription",
        "ProductManufacturer",
        "SiteName",
        "SiteId",
        "Condition",
        "Criticality",
        "Pool",
        "PurchaseDate",
        "PurchaseCost",
        "LifeSpanMonths",
        "ActivationDate",
        "DepreciationBasis",
        "DepreciationMethod",
        "RetirementDate",
        "SalvageValue",
        "RetirmentReason",
        "CompositeParentId",
        "CompositeChildCount",
    ]

    @field_validator("asset_status")
    def asset_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["0", "1", "2", "3", "4"]):
            raise ValueError("must be one of enum values ('0', '1', '2', '3', '4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToAssetMaintenancePlanModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "custodian_name",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in maintenance_plans (list)
        _items = []
        if self.maintenance_plans:
            for _item_maintenance_plans in self.maintenance_plans:
                if _item_maintenance_plans:
                    _items.append(_item_maintenance_plans.to_dict())
            _dict["MaintenancePlans"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToAssetMaintenancePlanModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "MaintenancePlans": (
                    [
                        QualerApiModelsAssetToAssetMaintenancePlanResponse.from_dict(
                            _item
                        )
                        for _item in obj["MaintenancePlans"]
                    ]
                    if obj.get("MaintenancePlans") is not None
                    else None
                ),
                "CompanyId": obj.get("CompanyId"),
                "AssetId": obj.get("AssetId"),
                "SerialNumber": obj.get("SerialNumber"),
                "AssetUser": obj.get("AssetUser"),
                "AssetTag": obj.get("AssetTag"),
                "EquipmentId": obj.get("EquipmentId"),
                "AssetStatus": obj.get("AssetStatus"),
                "AssetName": obj.get("AssetName"),
                "AssetDescription": obj.get("AssetDescription"),
                "AssetMaker": obj.get("AssetMaker"),
                "Location": obj.get("Location"),
                "RoomNumber": obj.get("RoomNumber"),
                "Barcode": obj.get("Barcode"),
                "LegacyIdentifier": obj.get("LegacyIdentifier"),
                "RootCategoryName": obj.get("RootCategoryName"),
                "CategoryName": obj.get("CategoryName"),
                "Class": obj.get("Class"),
                "CustodianEmail": obj.get("CustodianEmail"),
                "CustodianFirstName": obj.get("CustodianFirstName"),
                "CustodianLastName": obj.get("CustodianLastName"),
                "CustodianName": obj.get("CustodianName"),
                "Department": obj.get("Department"),
                "Station": obj.get("Station"),
                "Notes": obj.get("Notes"),
                "DocumentNumber": obj.get("DocumentNumber"),
                "DocumentSection": obj.get("DocumentSection"),
                "CumulativeServiceCost": obj.get("CumulativeServiceCost"),
                "ProductId": obj.get("ProductId"),
                "ManufacturerPartNumber": obj.get("ManufacturerPartNumber"),
                "ProductName": obj.get("ProductName"),
                "ProductDescription": obj.get("ProductDescription"),
                "ProductManufacturer": obj.get("ProductManufacturer"),
                "SiteName": obj.get("SiteName"),
                "SiteId": obj.get("SiteId"),
                "Condition": obj.get("Condition"),
                "Criticality": obj.get("Criticality"),
                "Pool": obj.get("Pool"),
                "PurchaseDate": obj.get("PurchaseDate"),
                "PurchaseCost": obj.get("PurchaseCost"),
                "LifeSpanMonths": obj.get("LifeSpanMonths"),
                "ActivationDate": obj.get("ActivationDate"),
                "DepreciationBasis": obj.get("DepreciationBasis"),
                "DepreciationMethod": obj.get("DepreciationMethod"),
                "RetirementDate": obj.get("RetirementDate"),
                "SalvageValue": obj.get("SalvageValue"),
                "RetirmentReason": obj.get("RetirmentReason"),
                "CompositeParentId": obj.get("CompositeParentId"),
                "CompositeChildCount": obj.get("CompositeChildCount"),
            }
        )
        return _obj
