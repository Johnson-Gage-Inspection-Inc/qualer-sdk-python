# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsMaintenancePlansToMaintenanceTaskResponse(BaseModel):
    """
    QualerApiModelsMaintenancePlansToMaintenanceTaskResponse
    """  # noqa: E501

    segment_name: Optional[StrictStr] = Field(default=None, alias="SegmentName")
    service_level_id: Optional[StrictInt] = Field(default=None, alias="ServiceLevelId")
    display_order: Optional[StrictInt] = Field(default=None, alias="DisplayOrder")
    service_notes: Optional[StrictStr] = Field(default=None, alias="ServiceNotes")
    interval_cycle: Optional[StrictStr] = Field(default=None, alias="IntervalCycle")
    interval_length: Optional[StrictInt] = Field(default=None, alias="IntervalLength")
    on_day: Optional[StrictStr] = Field(default=None, alias="OnDay")
    on_month: Optional[StrictStr] = Field(default=None, alias="OnMonth")
    on_week_days: Optional[StrictStr] = Field(default=None, alias="OnWeekDays")
    weekday_of_month: Optional[StrictStr] = Field(default=None, alias="WeekdayOfMonth")
    color_code: Optional[StrictInt] = Field(default=None, alias="ColorCode")
    service_interval: Optional[StrictStr] = Field(default=None, alias="ServiceInterval")
    on_segment_id: Optional[StrictInt] = Field(default=None, alias="OnSegmentId")
    document_number: Optional[StrictStr] = Field(default=None, alias="DocumentNumber")
    document_section: Optional[StrictStr] = Field(default=None, alias="DocumentSection")
    as_found_standard_group_id: Optional[StrictInt] = Field(
        default=None, alias="AsFoundStandardGroupId"
    )
    as_left_standard_group_id: Optional[StrictInt] = Field(
        default=None, alias="AsLeftStandardGroupId"
    )
    task_notes: Optional[StrictStr] = Field(default=None, alias="TaskNotes")
    advance_recall_period: Optional[StrictStr] = Field(
        default=None, alias="AdvanceRecallPeriod"
    )
    days_before_due: Optional[StrictInt] = Field(default=None, alias="DaysBeforeDue")
    past_due_grace_period: Optional[StrictStr] = Field(
        default=None, alias="PastDueGracePeriod"
    )
    days_after_due: Optional[StrictInt] = Field(default=None, alias="DaysAfterDue")
    use_period_in_reports: Optional[StrictStr] = Field(
        default=None, alias="UsePeriodInReports"
    )
    generate_order_automatically: Optional[StrictBool] = Field(
        default=None, alias="GenerateOrderAutomatically"
    )
    approve_upon_generation: Optional[StrictBool] = Field(
        default=None, alias="ApproveUponGeneration"
    )
    generate_separate: Optional[StrictBool] = Field(
        default=None, alias="GenerateSeparate"
    )
    __properties: ClassVar[List[str]] = [
        "SegmentName",
        "ServiceLevelId",
        "DisplayOrder",
        "ServiceNotes",
        "IntervalCycle",
        "IntervalLength",
        "OnDay",
        "OnMonth",
        "OnWeekDays",
        "WeekdayOfMonth",
        "ColorCode",
        "ServiceInterval",
        "OnSegmentId",
        "DocumentNumber",
        "DocumentSection",
        "AsFoundStandardGroupId",
        "AsLeftStandardGroupId",
        "TaskNotes",
        "AdvanceRecallPeriod",
        "DaysBeforeDue",
        "PastDueGracePeriod",
        "DaysAfterDue",
        "UsePeriodInReports",
        "GenerateOrderAutomatically",
        "ApproveUponGeneration",
        "GenerateSeparate",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenanceTaskResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenanceTaskResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "SegmentName": obj.get("SegmentName"),
                "ServiceLevelId": obj.get("ServiceLevelId"),
                "DisplayOrder": obj.get("DisplayOrder"),
                "ServiceNotes": obj.get("ServiceNotes"),
                "IntervalCycle": obj.get("IntervalCycle"),
                "IntervalLength": obj.get("IntervalLength"),
                "OnDay": obj.get("OnDay"),
                "OnMonth": obj.get("OnMonth"),
                "OnWeekDays": obj.get("OnWeekDays"),
                "WeekdayOfMonth": obj.get("WeekdayOfMonth"),
                "ColorCode": obj.get("ColorCode"),
                "ServiceInterval": obj.get("ServiceInterval"),
                "OnSegmentId": obj.get("OnSegmentId"),
                "DocumentNumber": obj.get("DocumentNumber"),
                "DocumentSection": obj.get("DocumentSection"),
                "AsFoundStandardGroupId": obj.get("AsFoundStandardGroupId"),
                "AsLeftStandardGroupId": obj.get("AsLeftStandardGroupId"),
                "TaskNotes": obj.get("TaskNotes"),
                "AdvanceRecallPeriod": obj.get("AdvanceRecallPeriod"),
                "DaysBeforeDue": obj.get("DaysBeforeDue"),
                "PastDueGracePeriod": obj.get("PastDueGracePeriod"),
                "DaysAfterDue": obj.get("DaysAfterDue"),
                "UsePeriodInReports": obj.get("UsePeriodInReports"),
                "GenerateOrderAutomatically": obj.get("GenerateOrderAutomatically"),
                "ApproveUponGeneration": obj.get("ApproveUponGeneration"),
                "GenerateSeparate": obj.get("GenerateSeparate"),
            }
        )
        return _obj
