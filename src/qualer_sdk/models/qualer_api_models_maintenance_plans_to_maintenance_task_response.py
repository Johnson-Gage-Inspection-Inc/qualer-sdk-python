# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr


class QualerApiModelsMaintenancePlansToMaintenanceTaskResponse(BaseModel):
    """
    QualerApiModelsMaintenancePlansToMaintenanceTaskResponse
    """

    segment_name: Optional[StrictStr] = Field(None, alias="SegmentName")
    service_level_id: Optional[StrictInt] = Field(None, alias="ServiceLevelId")
    display_order: Optional[StrictInt] = Field(None, alias="DisplayOrder")
    service_notes: Optional[StrictStr] = Field(None, alias="ServiceNotes")
    interval_cycle: Optional[StrictStr] = Field(None, alias="IntervalCycle")
    interval_length: Optional[StrictInt] = Field(None, alias="IntervalLength")
    on_day: Optional[StrictStr] = Field(None, alias="OnDay")
    on_month: Optional[StrictStr] = Field(None, alias="OnMonth")
    on_week_days: Optional[StrictStr] = Field(None, alias="OnWeekDays")
    weekday_of_month: Optional[StrictStr] = Field(None, alias="WeekdayOfMonth")
    color_code: Optional[StrictInt] = Field(None, alias="ColorCode")
    service_interval: Optional[StrictStr] = Field(None, alias="ServiceInterval")
    on_segment_id: Optional[StrictInt] = Field(None, alias="OnSegmentId")
    document_number: Optional[StrictStr] = Field(None, alias="DocumentNumber")
    document_section: Optional[StrictStr] = Field(None, alias="DocumentSection")
    as_found_standard_group_id: Optional[StrictInt] = Field(
        None, alias="AsFoundStandardGroupId"
    )
    as_left_standard_group_id: Optional[StrictInt] = Field(
        None, alias="AsLeftStandardGroupId"
    )
    task_notes: Optional[StrictStr] = Field(None, alias="TaskNotes")
    advance_recall_period: Optional[StrictStr] = Field(
        None, alias="AdvanceRecallPeriod"
    )
    days_before_due: Optional[StrictInt] = Field(None, alias="DaysBeforeDue")
    past_due_grace_period: Optional[StrictStr] = Field(None, alias="PastDueGracePeriod")
    days_after_due: Optional[StrictInt] = Field(None, alias="DaysAfterDue")
    use_period_in_reports: Optional[StrictStr] = Field(None, alias="UsePeriodInReports")
    generate_order_automatically: Optional[StrictBool] = Field(
        None, alias="GenerateOrderAutomatically"
    )
    approve_upon_generation: Optional[StrictBool] = Field(
        None, alias="ApproveUponGeneration"
    )
    generate_separate: Optional[StrictBool] = Field(None, alias="GenerateSeparate")
    __properties = [
        "SegmentName",
        "ServiceLevelId",
        "DisplayOrder",
        "ServiceNotes",
        "IntervalCycle",
        "IntervalLength",
        "OnDay",
        "OnMonth",
        "OnWeekDays",
        "WeekdayOfMonth",
        "ColorCode",
        "ServiceInterval",
        "OnSegmentId",
        "DocumentNumber",
        "DocumentSection",
        "AsFoundStandardGroupId",
        "AsLeftStandardGroupId",
        "TaskNotes",
        "AdvanceRecallPeriod",
        "DaysBeforeDue",
        "PastDueGracePeriod",
        "DaysAfterDue",
        "UsePeriodInReports",
        "GenerateOrderAutomatically",
        "ApproveUponGeneration",
        "GenerateSeparate",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMaintenancePlansToMaintenanceTaskResponse:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenanceTaskResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMaintenancePlansToMaintenanceTaskResponse:
        """Create an instance of QualerApiModelsMaintenancePlansToMaintenanceTaskResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMaintenancePlansToMaintenanceTaskResponse.parse_obj(
                obj
            )

        _obj = QualerApiModelsMaintenancePlansToMaintenanceTaskResponse.parse_obj(
            {
                "segment_name": obj.get("SegmentName"),
                "service_level_id": obj.get("ServiceLevelId"),
                "display_order": obj.get("DisplayOrder"),
                "service_notes": obj.get("ServiceNotes"),
                "interval_cycle": obj.get("IntervalCycle"),
                "interval_length": obj.get("IntervalLength"),
                "on_day": obj.get("OnDay"),
                "on_month": obj.get("OnMonth"),
                "on_week_days": obj.get("OnWeekDays"),
                "weekday_of_month": obj.get("WeekdayOfMonth"),
                "color_code": obj.get("ColorCode"),
                "service_interval": obj.get("ServiceInterval"),
                "on_segment_id": obj.get("OnSegmentId"),
                "document_number": obj.get("DocumentNumber"),
                "document_section": obj.get("DocumentSection"),
                "as_found_standard_group_id": obj.get("AsFoundStandardGroupId"),
                "as_left_standard_group_id": obj.get("AsLeftStandardGroupId"),
                "task_notes": obj.get("TaskNotes"),
                "advance_recall_period": obj.get("AdvanceRecallPeriod"),
                "days_before_due": obj.get("DaysBeforeDue"),
                "past_due_grace_period": obj.get("PastDueGracePeriod"),
                "days_after_due": obj.get("DaysAfterDue"),
                "use_period_in_reports": obj.get("UsePeriodInReports"),
                "generate_order_automatically": obj.get("GenerateOrderAutomatically"),
                "approve_upon_generation": obj.get("ApproveUponGeneration"),
                "generate_separate": obj.get("GenerateSeparate"),
            }
        )
        return _obj
