# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsAssetToClientAssetManagerResponseModel(BaseModel):
    """
    QualerApiModelsAssetToClientAssetManagerResponseModel
    """  # noqa: E501

    asset_id: Optional[StrictInt] = Field(default=None, alias="AssetId")
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(
        default=None, alias="AssetDescription"
    )
    asset_maker: Optional[StrictStr] = Field(default=None, alias="AssetMaker")
    record_type: Optional[StrictStr] = Field(default=None, alias="RecordType")
    parent_asset_id: Optional[StrictInt] = Field(default=None, alias="ParentAssetId")
    children_count: Optional[StrictInt] = Field(default=None, alias="ChildrenCount")
    site_id: Optional[StrictInt] = Field(default=None, alias="SiteId")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    equipment_id: Optional[StrictStr] = Field(default=None, alias="EquipmentId")
    legacy_identifier: Optional[StrictStr] = Field(
        default=None, alias="LegacyIdentifier"
    )
    criticality: Optional[StrictStr] = Field(default=None, alias="Criticality")
    condition: Optional[StrictStr] = Field(default=None, alias="Condition")
    asset_class: Optional[StrictStr] = Field(default=None, alias="AssetClass")
    activation_date: Optional[datetime] = Field(default=None, alias="ActivationDate")
    retirment_date: Optional[datetime] = Field(default=None, alias="RetirmentDate")
    client_vendor_id: Optional[StrictInt] = Field(default=None, alias="ClientVendorId")
    company_name: Optional[StrictStr] = Field(default=None, alias="CompanyName")
    site_name: Optional[StrictStr] = Field(default=None, alias="SiteName")
    asset_has_image: Optional[StrictBool] = Field(default=None, alias="AssetHasImage")
    has_image: Optional[StrictBool] = Field(default=None, alias="HasImage")
    parent_has_image: Optional[StrictBool] = Field(default=None, alias="ParentHasImage")
    pool_id: Optional[StrictInt] = Field(default=None, alias="PoolId")
    pool: Optional[StrictStr] = Field(default=None, alias="Pool")
    product_id: Optional[StrictInt] = Field(default=None, alias="ProductId")
    parent_product_id: Optional[StrictInt] = Field(
        default=None, alias="ParentProductId"
    )
    product_name: Optional[StrictStr] = Field(default=None, alias="ProductName")
    parent_product_name: Optional[StrictStr] = Field(
        default=None, alias="ParentProductName"
    )
    category_id: Optional[StrictInt] = Field(default=None, alias="CategoryId")
    root_category_id: Optional[StrictInt] = Field(default=None, alias="RootCategoryId")
    category_name: Optional[StrictStr] = Field(default=None, alias="CategoryName")
    root_category_name: Optional[StrictStr] = Field(
        default=None, alias="RootCategoryName"
    )
    manufacturer_id: Optional[StrictInt] = Field(default=None, alias="ManufacturerId")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    display_part_number: Optional[StrictStr] = Field(
        default=None, alias="DisplayPartNumber"
    )
    display_name: Optional[StrictStr] = Field(default=None, alias="DisplayName")
    manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerPartNumber"
    )
    asset_room: Optional[StrictStr] = Field(default=None, alias="AssetRoom")
    location: Optional[StrictStr] = Field(default=None, alias="Location")
    station: Optional[StrictStr] = Field(default=None, alias="Station")
    tool_role: Optional[StrictStr] = Field(default=None, alias="ToolRole")
    tool_id: Optional[StrictInt] = Field(default=None, alias="ToolId")
    department_id: Optional[StrictInt] = Field(default=None, alias="DepartmentId")
    department_name: Optional[StrictStr] = Field(default=None, alias="DepartmentName")
    custodian_name: Optional[StrictStr] = Field(default=None, alias="CustodianName")
    warranty: Optional[StrictStr] = Field(default=None, alias="Warranty")
    warranty_end: Optional[datetime] = Field(default=None, alias="WarrantyEnd")
    is_warranty_expired: Optional[StrictBool] = Field(
        default=None, alias="IsWarrantyExpired"
    )
    depreciation_method: Optional[StrictInt] = Field(
        default=None, alias="DepreciationMethod"
    )
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DepreciationBasis"
    )
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="SalvageValue"
    )
    total_service_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TotalServiceCost"
    )
    life_span_months: Optional[StrictInt] = Field(default=None, alias="LifeSpanMonths")
    due_for_replacement_date: Optional[datetime] = Field(
        default=None, alias="DueForReplacementDate"
    )
    depreciation_proc: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DepreciationProc"
    )
    purchase_date: Optional[datetime] = Field(default=None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PurchaseCost"
    )
    time_in_service: Optional[StrictInt] = Field(default=None, alias="TimeInService")
    retirement_reason: Optional[StrictStr] = Field(
        default=None, alias="RetirementReason"
    )
    residual_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ResidualCost"
    )
    employee_id: Optional[StrictInt] = Field(default=None, alias="EmployeeId")
    asset_collection_id: Optional[StrictInt] = Field(
        default=None, alias="AssetCollectionId"
    )
    asset_service_record_id: Optional[StrictInt] = Field(
        default=None, alias="AssetServiceRecordId"
    )
    result_status: Optional[StrictStr] = Field(default=None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(default=None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(default=None, alias="AsLeftResult")
    last_service_date: Optional[datetime] = Field(default=None, alias="LastServiceDate")
    last_service: Optional[StrictStr] = Field(default=None, alias="LastService")
    next_service_date: Optional[datetime] = Field(default=None, alias="NextServiceDate")
    next_service: Optional[StrictStr] = Field(default=None, alias="NextService")
    service_schedule_segment_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceScheduleSegmentId"
    )
    service_schedule_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceScheduleId"
    )
    service_schedule: Optional[StrictStr] = Field(default=None, alias="ServiceSchedule")
    in_service: Optional[StrictBool] = Field(default=None, alias="InService")
    in_last_service: Optional[StrictBool] = Field(default=None, alias="InLastService")
    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    service_order_status: Optional[StrictStr] = Field(
        default=None, alias="ServiceOrderStatus"
    )
    custom_order_number: Optional[StrictStr] = Field(
        default=None, alias="CustomOrderNumber"
    )
    service_order_item_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemId"
    )
    vendor: Optional[StrictStr] = Field(default=None, alias="Vendor")
    technician: Optional[StrictStr] = Field(default=None, alias="Technician")
    certificate_number: Optional[StrictStr] = Field(
        default=None, alias="CertificateNumber"
    )
    due_trigger_date: Optional[datetime] = Field(default=None, alias="DueTriggerDate")
    past_due_trigger_date: Optional[datetime] = Field(
        default=None, alias="PastDueTriggerDate"
    )
    due_status: Optional[StrictStr] = Field(default=None, alias="DueStatus")
    work_status: Optional[StrictStr] = Field(default=None, alias="WorkStatus")
    service_tag: Optional[StrictStr] = Field(default=None, alias="ServiceTag")
    service_site_name: Optional[StrictStr] = Field(
        default=None, alias="ServiceSiteName"
    )
    service_site_id: Optional[StrictInt] = Field(default=None, alias="ServiceSiteId")
    standard_title: Optional[StrictStr] = Field(default=None, alias="StandardTitle")
    schedules: Optional[StrictStr] = Field(default=None, alias="Schedules")
    __properties: ClassVar[List[str]] = [
        "AssetId",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "RecordType",
        "ParentAssetId",
        "ChildrenCount",
        "SiteId",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "EquipmentId",
        "LegacyIdentifier",
        "Criticality",
        "Condition",
        "AssetClass",
        "ActivationDate",
        "RetirmentDate",
        "ClientVendorId",
        "CompanyName",
        "SiteName",
        "AssetHasImage",
        "HasImage",
        "ParentHasImage",
        "PoolId",
        "Pool",
        "ProductId",
        "ParentProductId",
        "ProductName",
        "ParentProductName",
        "CategoryId",
        "RootCategoryId",
        "CategoryName",
        "RootCategoryName",
        "ManufacturerId",
        "Manufacturer",
        "DisplayPartNumber",
        "DisplayName",
        "ManufacturerPartNumber",
        "AssetRoom",
        "Location",
        "Station",
        "ToolRole",
        "ToolId",
        "DepartmentId",
        "DepartmentName",
        "CustodianName",
        "Warranty",
        "WarrantyEnd",
        "IsWarrantyExpired",
        "DepreciationMethod",
        "DepreciationBasis",
        "SalvageValue",
        "TotalServiceCost",
        "LifeSpanMonths",
        "DueForReplacementDate",
        "DepreciationProc",
        "PurchaseDate",
        "PurchaseCost",
        "TimeInService",
        "RetirementReason",
        "ResidualCost",
        "EmployeeId",
        "AssetCollectionId",
        "AssetServiceRecordId",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "LastServiceDate",
        "LastService",
        "NextServiceDate",
        "NextService",
        "ServiceScheduleSegmentId",
        "ServiceScheduleId",
        "ServiceSchedule",
        "InService",
        "InLastService",
        "ServiceOrderId",
        "ServiceOrderStatus",
        "CustomOrderNumber",
        "ServiceOrderItemId",
        "Vendor",
        "Technician",
        "CertificateNumber",
        "DueTriggerDate",
        "PastDueTriggerDate",
        "DueStatus",
        "WorkStatus",
        "ServiceTag",
        "ServiceSiteName",
        "ServiceSiteId",
        "StandardTitle",
        "Schedules",
    ]

    @field_validator("record_type")
    def record_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            ["WaitingForAgreement", "Equipment", "System", "Agreement"]
        ):
            raise ValueError(
                "must be one of enum values ('WaitingForAgreement', 'Equipment', 'System', 'Agreement')"
            )
        return value

    @field_validator("tool_role")
    def tool_role_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["0", "1", "2", "3"]):
            raise ValueError("must be one of enum values ('0', '1', '2', '3')")
        return value

    @field_validator("result_status")
    def result_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
                "Pending",
                "Missed",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @field_validator("as_found_result")
    def as_found_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
                "Pending",
                "Missed",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @field_validator("as_left_result")
    def as_left_result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "NotAvailable",
                "Fail",
                "FailAmbiguous",
                "FailSignificant",
                "Pass",
                "PassAmbiguous",
                "PassAdjustment",
                "Done",
                "Pending",
                "Missed",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('NotAvailable', 'Fail', 'FailAmbiguous', 'FailSignificant', 'Pass', 'PassAmbiguous', 'PassAdjustment', 'Done', 'Pending', 'Missed')"
            )
        return value

    @field_validator("service_order_status")
    def service_order_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "New",
                "Draft",
                "WaitingForApproval",
                "Submitted",
                "Processing",
                "QualityControl",
                "Cancelled",
                "WaitingForClientSignOff",
                "Completed",
                "Denied",
                "Delayed",
                "Scheduling",
                "Closed",
                "WaitingForVendorSignOff",
                "DelayedApproval",
                "Ready",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('New', 'Draft', 'WaitingForApproval', 'Submitted', 'Processing', 'QualityControl', 'Cancelled', 'WaitingForClientSignOff', 'Completed', 'Denied', 'Delayed', 'Scheduling', 'Closed', 'WaitingForVendorSignOff', 'DelayedApproval', 'Ready')"
            )
        return value

    @field_validator("due_status")
    def due_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["0", "1", "2"]):
            raise ValueError("must be one of enum values ('0', '1', '2')")
        return value

    @field_validator("work_status")
    def work_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(
            [
                "Pending",
                "InProgress",
                "Completed",
                "Delayed",
                "Withdrawn",
                "Locked",
                "New",
                "Closed",
                "Wait",
            ]
        ):
            raise ValueError(
                "must be one of enum values ('Pending', 'InProgress', 'Completed', 'Delayed', 'Withdrawn', 'Locked', 'New', 'Closed', 'Wait')"
            )
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToClientAssetManagerResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "in_service",
                "in_last_service",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsAssetToClientAssetManagerResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "AssetId": obj.get("AssetId"),
                "AssetName": obj.get("AssetName"),
                "AssetDescription": obj.get("AssetDescription"),
                "AssetMaker": obj.get("AssetMaker"),
                "RecordType": obj.get("RecordType"),
                "ParentAssetId": obj.get("ParentAssetId"),
                "ChildrenCount": obj.get("ChildrenCount"),
                "SiteId": obj.get("SiteId"),
                "SerialNumber": obj.get("SerialNumber"),
                "AssetTag": obj.get("AssetTag"),
                "AssetUser": obj.get("AssetUser"),
                "EquipmentId": obj.get("EquipmentId"),
                "LegacyIdentifier": obj.get("LegacyIdentifier"),
                "Criticality": obj.get("Criticality"),
                "Condition": obj.get("Condition"),
                "AssetClass": obj.get("AssetClass"),
                "ActivationDate": obj.get("ActivationDate"),
                "RetirmentDate": obj.get("RetirmentDate"),
                "ClientVendorId": obj.get("ClientVendorId"),
                "CompanyName": obj.get("CompanyName"),
                "SiteName": obj.get("SiteName"),
                "AssetHasImage": obj.get("AssetHasImage"),
                "HasImage": obj.get("HasImage"),
                "ParentHasImage": obj.get("ParentHasImage"),
                "PoolId": obj.get("PoolId"),
                "Pool": obj.get("Pool"),
                "ProductId": obj.get("ProductId"),
                "ParentProductId": obj.get("ParentProductId"),
                "ProductName": obj.get("ProductName"),
                "ParentProductName": obj.get("ParentProductName"),
                "CategoryId": obj.get("CategoryId"),
                "RootCategoryId": obj.get("RootCategoryId"),
                "CategoryName": obj.get("CategoryName"),
                "RootCategoryName": obj.get("RootCategoryName"),
                "ManufacturerId": obj.get("ManufacturerId"),
                "Manufacturer": obj.get("Manufacturer"),
                "DisplayPartNumber": obj.get("DisplayPartNumber"),
                "DisplayName": obj.get("DisplayName"),
                "ManufacturerPartNumber": obj.get("ManufacturerPartNumber"),
                "AssetRoom": obj.get("AssetRoom"),
                "Location": obj.get("Location"),
                "Station": obj.get("Station"),
                "ToolRole": obj.get("ToolRole"),
                "ToolId": obj.get("ToolId"),
                "DepartmentId": obj.get("DepartmentId"),
                "DepartmentName": obj.get("DepartmentName"),
                "CustodianName": obj.get("CustodianName"),
                "Warranty": obj.get("Warranty"),
                "WarrantyEnd": obj.get("WarrantyEnd"),
                "IsWarrantyExpired": obj.get("IsWarrantyExpired"),
                "DepreciationMethod": obj.get("DepreciationMethod"),
                "DepreciationBasis": obj.get("DepreciationBasis"),
                "SalvageValue": obj.get("SalvageValue"),
                "TotalServiceCost": obj.get("TotalServiceCost"),
                "LifeSpanMonths": obj.get("LifeSpanMonths"),
                "DueForReplacementDate": obj.get("DueForReplacementDate"),
                "DepreciationProc": obj.get("DepreciationProc"),
                "PurchaseDate": obj.get("PurchaseDate"),
                "PurchaseCost": obj.get("PurchaseCost"),
                "TimeInService": obj.get("TimeInService"),
                "RetirementReason": obj.get("RetirementReason"),
                "ResidualCost": obj.get("ResidualCost"),
                "EmployeeId": obj.get("EmployeeId"),
                "AssetCollectionId": obj.get("AssetCollectionId"),
                "AssetServiceRecordId": obj.get("AssetServiceRecordId"),
                "ResultStatus": obj.get("ResultStatus"),
                "AsFoundResult": obj.get("AsFoundResult"),
                "AsLeftResult": obj.get("AsLeftResult"),
                "LastServiceDate": obj.get("LastServiceDate"),
                "LastService": obj.get("LastService"),
                "NextServiceDate": obj.get("NextServiceDate"),
                "NextService": obj.get("NextService"),
                "ServiceScheduleSegmentId": obj.get("ServiceScheduleSegmentId"),
                "ServiceScheduleId": obj.get("ServiceScheduleId"),
                "ServiceSchedule": obj.get("ServiceSchedule"),
                "InService": obj.get("InService"),
                "InLastService": obj.get("InLastService"),
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "ServiceOrderStatus": obj.get("ServiceOrderStatus"),
                "CustomOrderNumber": obj.get("CustomOrderNumber"),
                "ServiceOrderItemId": obj.get("ServiceOrderItemId"),
                "Vendor": obj.get("Vendor"),
                "Technician": obj.get("Technician"),
                "CertificateNumber": obj.get("CertificateNumber"),
                "DueTriggerDate": obj.get("DueTriggerDate"),
                "PastDueTriggerDate": obj.get("PastDueTriggerDate"),
                "DueStatus": obj.get("DueStatus"),
                "WorkStatus": obj.get("WorkStatus"),
                "ServiceTag": obj.get("ServiceTag"),
                "ServiceSiteName": obj.get("ServiceSiteName"),
                "ServiceSiteId": obj.get("ServiceSiteId"),
                "StandardTitle": obj.get("StandardTitle"),
                "Schedules": obj.get("Schedules"),
            }
        )
        return _obj
