# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Optional

from pydantic import BaseModel, Field, conlist

from qualer_sdk.models.qualer_api_models_measurements_from_update_measurement_batch_model import (
    QualerApiModelsMeasurementsFromUpdateMeasurementBatchModel,
)


class QualerApiModelsMeasurementsFromUpdateMeasurementFormModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromUpdateMeasurementFormModel
    """

    measurement_batches: Optional[
        conlist(QualerApiModelsMeasurementsFromUpdateMeasurementBatchModel)
    ] = Field(None, alias="MeasurementBatches")
    __properties = ["MeasurementBatches"]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsFromUpdateMeasurementFormModel:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementFormModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_batches (list)
        _items = []
        if self.measurement_batches:
            for _item in self.measurement_batches:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MeasurementBatches"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsFromUpdateMeasurementFormModel:
        """Create an instance of QualerApiModelsMeasurementsFromUpdateMeasurementFormModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsMeasurementsFromUpdateMeasurementFormModel.parse_obj(
                obj
            )

        _obj = QualerApiModelsMeasurementsFromUpdateMeasurementFormModel.parse_obj(
            {
                "measurement_batches": (
                    [
                        QualerApiModelsMeasurementsFromUpdateMeasurementBatchModel.from_dict(
                            _item
                        )
                        for _item in obj.get("MeasurementBatches")
                    ]
                    if obj.get("MeasurementBatches") is not None
                    else None
                )
            }
        )
        return _obj
