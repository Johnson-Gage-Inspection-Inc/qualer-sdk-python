# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictBool, StrictInt, StrictStr
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_measurements_from_create_measurement_point_model import (
    QualerApiModelsMeasurementsFromCreateMeasurementPointModel,
)
from qualer_sdk.models.qualer_api_models_measurements_from_custom_fields import (
    QualerApiModelsMeasurementsFromCustomFields,
)
from qualer_sdk.models.qualer_api_models_measurements_from_display_options import (
    QualerApiModelsMeasurementsFromDisplayOptions,
)


class QualerApiModelsMeasurementsFromCreateMeasurementSetModel(BaseModel):
    """
    QualerApiModelsMeasurementsFromCreateMeasurementSetModel
    """  # noqa: E501

    measurement_name: Optional[StrictStr] = Field(default=None, alias="MeasurementName")
    is_accredited: Optional[StrictBool] = Field(default=None, alias="IsAccredited")
    measurement_quantity_id: Optional[StrictInt] = Field(
        default=None, alias="MeasurementQuantityId"
    )
    default_unit_of_measure_id: Optional[StrictInt] = Field(
        default=None, alias="DefaultUnitOfMeasureId"
    )
    decimal_places: Optional[StrictInt] = Field(default=None, alias="DecimalPlaces")
    significant_figures: Optional[StrictInt] = Field(
        default=None, alias="SignificantFigures"
    )
    display_options: Optional[QualerApiModelsMeasurementsFromDisplayOptions] = Field(
        default=None, alias="DisplayOptions"
    )
    custom_fields: Optional[QualerApiModelsMeasurementsFromCustomFields] = Field(
        default=None, alias="CustomFields"
    )
    measurement_points: Optional[
        List[QualerApiModelsMeasurementsFromCreateMeasurementPointModel]
    ] = Field(default=None, alias="MeasurementPoints")
    __properties: ClassVar[List[str]] = [
        "MeasurementName",
        "IsAccredited",
        "MeasurementQuantityId",
        "DefaultUnitOfMeasureId",
        "DecimalPlaces",
        "SignificantFigures",
        "DisplayOptions",
        "CustomFields",
        "MeasurementPoints",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementSetModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of display_options
        if self.display_options:
            _dict["DisplayOptions"] = self.display_options.to_dict()
        # override the default output from pydantic by calling `to_dict()` of custom_fields
        if self.custom_fields:
            _dict["CustomFields"] = self.custom_fields.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_points (list)
        _items = []
        if self.measurement_points:
            for _item_measurement_points in self.measurement_points:
                if _item_measurement_points:
                    _items.append(_item_measurement_points.to_dict())
            _dict["MeasurementPoints"] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsMeasurementsFromCreateMeasurementSetModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "MeasurementName": obj.get("MeasurementName"),
                "IsAccredited": obj.get("IsAccredited"),
                "MeasurementQuantityId": obj.get("MeasurementQuantityId"),
                "DefaultUnitOfMeasureId": obj.get("DefaultUnitOfMeasureId"),
                "DecimalPlaces": obj.get("DecimalPlaces"),
                "SignificantFigures": obj.get("SignificantFigures"),
                "DisplayOptions": (
                    QualerApiModelsMeasurementsFromDisplayOptions.from_dict(
                        obj["DisplayOptions"]
                    )
                    if obj.get("DisplayOptions") is not None
                    else None
                ),
                "CustomFields": (
                    QualerApiModelsMeasurementsFromCustomFields.from_dict(
                        obj["CustomFields"]
                    )
                    if obj.get("CustomFields") is not None
                    else None
                ),
                "MeasurementPoints": (
                    [
                        QualerApiModelsMeasurementsFromCreateMeasurementPointModel.from_dict(
                            _item
                        )
                        for _item in obj["MeasurementPoints"]
                    ]
                    if obj.get("MeasurementPoints") is not None
                    else None
                ),
            }
        )
        return _obj
