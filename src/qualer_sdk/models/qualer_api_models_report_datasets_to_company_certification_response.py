# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from qualer_sdk.configuration import Configuration


class QualerApiModelsReportDatasetsToCompanyCertificationResponse(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        "logo": "str",
        "initial_date": "datetime",
        "certification_date": "datetime",
        "expiration_date": "datetime",
        "certification_name": "str",
        "certificate_number": "str",
        "certification_authority": "str",
        "certification_standard": "str",
    }

    attribute_map = {
        "logo": "Logo",
        "initial_date": "InitialDate",
        "certification_date": "CertificationDate",
        "expiration_date": "ExpirationDate",
        "certification_name": "CertificationName",
        "certificate_number": "CertificateNumber",
        "certification_authority": "CertificationAuthority",
        "certification_standard": "CertificationStandard",
    }

    def __init__(
        self,
        logo=None,
        initial_date=None,
        certification_date=None,
        expiration_date=None,
        certification_name=None,
        certificate_number=None,
        certification_authority=None,
        certification_standard=None,
        _configuration=None,
    ):  # noqa: E501
        """QualerApiModelsReportDatasetsToCompanyCertificationResponse - a model defined in Swagger"""  # noqa: E501
        if _configuration is None:
            _configuration = Configuration()
        self._configuration = _configuration

        self._logo = None
        self._initial_date = None
        self._certification_date = None
        self._expiration_date = None
        self._certification_name = None
        self._certificate_number = None
        self._certification_authority = None
        self._certification_standard = None
        self.discriminator = None

        if logo is not None:
            self.logo = logo
        if initial_date is not None:
            self.initial_date = initial_date
        if certification_date is not None:
            self.certification_date = certification_date
        if expiration_date is not None:
            self.expiration_date = expiration_date
        if certification_name is not None:
            self.certification_name = certification_name
        if certificate_number is not None:
            self.certificate_number = certificate_number
        if certification_authority is not None:
            self.certification_authority = certification_authority
        if certification_standard is not None:
            self.certification_standard = certification_standard

    @property
    def logo(self):
        """Gets the logo of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The logo of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._logo

    @logo.setter
    def logo(self, logo):
        """Sets the logo of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param logo: The logo of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: str
        """
        if (
            self._configuration.client_side_validation
            and logo is not None
            and not re.search(
                r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
                logo,
            )
        ):  # noqa: E501
            raise ValueError(
                r"Invalid value for `logo`, must be a follow pattern or equal to `/^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/`"
            )  # noqa: E501

        self._logo = logo

    @property
    def initial_date(self):
        """Gets the initial_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The initial_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_date

    @initial_date.setter
    def initial_date(self, initial_date):
        """Sets the initial_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param initial_date: The initial_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: datetime
        """

        self._initial_date = initial_date

    @property
    def certification_date(self):
        """Gets the certification_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The certification_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._certification_date

    @certification_date.setter
    def certification_date(self, certification_date):
        """Sets the certification_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param certification_date: The certification_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: datetime
        """

        self._certification_date = certification_date

    @property
    def expiration_date(self):
        """Gets the expiration_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The expiration_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: datetime
        """
        return self._expiration_date

    @expiration_date.setter
    def expiration_date(self, expiration_date):
        """Sets the expiration_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param expiration_date: The expiration_date of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: datetime
        """

        self._expiration_date = expiration_date

    @property
    def certification_name(self):
        """Gets the certification_name of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The certification_name of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._certification_name

    @certification_name.setter
    def certification_name(self, certification_name):
        """Sets the certification_name of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param certification_name: The certification_name of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: str
        """

        self._certification_name = certification_name

    @property
    def certificate_number(self):
        """Gets the certificate_number of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The certificate_number of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._certificate_number

    @certificate_number.setter
    def certificate_number(self, certificate_number):
        """Sets the certificate_number of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param certificate_number: The certificate_number of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: str
        """

        self._certificate_number = certificate_number

    @property
    def certification_authority(self):
        """Gets the certification_authority of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The certification_authority of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._certification_authority

    @certification_authority.setter
    def certification_authority(self, certification_authority):
        """Sets the certification_authority of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param certification_authority: The certification_authority of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: str
        """

        self._certification_authority = certification_authority

    @property
    def certification_standard(self):
        """Gets the certification_standard of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501


        :return: The certification_standard of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :rtype: str
        """
        return self._certification_standard

    @certification_standard.setter
    def certification_standard(self, certification_standard):
        """Sets the certification_standard of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.


        :param certification_standard: The certification_standard of this QualerApiModelsReportDatasetsToCompanyCertificationResponse.  # noqa: E501
        :type: str
        """

        self._certification_standard = certification_standard

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(
                    map(lambda x: x.to_dict() if hasattr(x, "to_dict") else x, value)
                )
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(
                    map(
                        lambda item: (
                            (item[0], item[1].to_dict())
                            if hasattr(item[1], "to_dict")
                            else item
                        ),
                        value.items(),
                    )
                )
            else:
                result[attr] = value
        if issubclass(
            QualerApiModelsReportDatasetsToCompanyCertificationResponse, dict
        ):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(
            other, QualerApiModelsReportDatasetsToCompanyCertificationResponse
        ):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(
            other, QualerApiModelsReportDatasetsToCompanyCertificationResponse
        ):
            return True

        return self.to_dict() != other.to_dict()
