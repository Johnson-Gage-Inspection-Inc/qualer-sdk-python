# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictStr, conbytes, constr, validator


class QualerApiModelsReportDatasetsToCompanyCertificationResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToCompanyCertificationResponse
    """

    logo: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(
        None, alias="Logo"
    )
    initial_date: Optional[datetime] = Field(None, alias="InitialDate")
    certification_date: Optional[datetime] = Field(None, alias="CertificationDate")
    expiration_date: Optional[datetime] = Field(None, alias="ExpirationDate")
    certification_name: Optional[StrictStr] = Field(None, alias="CertificationName")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    certification_authority: Optional[StrictStr] = Field(
        None, alias="CertificationAuthority"
    )
    certification_standard: Optional[StrictStr] = Field(
        None, alias="CertificationStandard"
    )
    __properties = [
        "Logo",
        "InitialDate",
        "CertificationDate",
        "ExpirationDate",
        "CertificationName",
        "CertificateNumber",
        "CertificationAuthority",
        "CertificationStandard",
    ]

    @validator("logo")
    def logo_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToCompanyCertificationResponse:
        """Create an instance of QualerApiModelsReportDatasetsToCompanyCertificationResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToCompanyCertificationResponse:
        """Create an instance of QualerApiModelsReportDatasetsToCompanyCertificationResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return (
                QualerApiModelsReportDatasetsToCompanyCertificationResponse.parse_obj(
                    obj
                )
            )

        _obj = QualerApiModelsReportDatasetsToCompanyCertificationResponse.parse_obj(
            {
                "logo": obj.get("Logo"),
                "initial_date": obj.get("InitialDate"),
                "certification_date": obj.get("CertificationDate"),
                "expiration_date": obj.get("ExpirationDate"),
                "certification_name": obj.get("CertificationName"),
                "certificate_number": obj.get("CertificateNumber"),
                "certification_authority": obj.get("CertificationAuthority"),
                "certification_standard": obj.get("CertificationStandard"),
            }
        )
        return _obj
