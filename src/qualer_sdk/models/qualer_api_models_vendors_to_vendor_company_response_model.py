# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set

from pydantic import BaseModel, ConfigDict, Field, StrictInt, StrictStr
from typing_extensions import Self

from qualer_sdk.models.qualer_api_models_address_to_address_response_model import (
    QualerApiModelsAddressToAddressResponseModel,
)


class QualerApiModelsVendorsToVendorCompanyResponseModel(BaseModel):
    """
    QualerApiModelsVendorsToVendorCompanyResponseModel
    """  # noqa: E501

    account_number_text: Optional[StrictStr] = Field(
        default=None, alias="AccountNumberText"
    )
    account_number: Optional[StrictInt] = Field(default=None, alias="AccountNumber")
    currency_id: Optional[StrictInt] = Field(default=None, alias="CurrencyId")
    company_id: Optional[StrictInt] = Field(default=None, alias="CompanyId")
    company_name: Optional[StrictStr] = Field(default=None, alias="CompanyName")
    domain_name: Optional[StrictStr] = Field(default=None, alias="DomainName")
    custom_name: Optional[StrictStr] = Field(default=None, alias="CustomName")
    billing_address: Optional[QualerApiModelsAddressToAddressResponseModel] = Field(
        default=None, alias="BillingAddress"
    )
    shipping_address: Optional[QualerApiModelsAddressToAddressResponseModel] = Field(
        default=None, alias="ShippingAddress"
    )
    updated_on_utc: Optional[datetime] = Field(default=None, alias="UpdatedOnUtc")
    __properties: ClassVar[List[str]] = [
        "AccountNumberText",
        "AccountNumber",
        "CurrencyId",
        "CompanyId",
        "CompanyName",
        "DomainName",
        "CustomName",
        "BillingAddress",
        "ShippingAddress",
        "UpdatedOnUtc",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsVendorsToVendorCompanyResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of billing_address
        if self.billing_address:
            _dict["BillingAddress"] = self.billing_address.to_dict()
        # override the default output from pydantic by calling `to_dict()` of shipping_address
        if self.shipping_address:
            _dict["ShippingAddress"] = self.shipping_address.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsVendorsToVendorCompanyResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "AccountNumberText": obj.get("AccountNumberText"),
                "AccountNumber": obj.get("AccountNumber"),
                "CurrencyId": obj.get("CurrencyId"),
                "CompanyId": obj.get("CompanyId"),
                "CompanyName": obj.get("CompanyName"),
                "DomainName": obj.get("DomainName"),
                "CustomName": obj.get("CustomName"),
                "BillingAddress": (
                    QualerApiModelsAddressToAddressResponseModel.from_dict(
                        obj["BillingAddress"]
                    )
                    if obj.get("BillingAddress") is not None
                    else None
                ),
                "ShippingAddress": (
                    QualerApiModelsAddressToAddressResponseModel.from_dict(
                        obj["ShippingAddress"]
                    )
                    if obj.get("ShippingAddress") is not None
                    else None
                ),
                "UpdatedOnUtc": obj.get("UpdatedOnUtc"),
            }
        )
        return _obj
