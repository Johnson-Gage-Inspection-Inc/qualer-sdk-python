# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import BaseModel, ConfigDict, Field, StrictFloat, StrictInt, StrictStr
from typing_extensions import Self


class QualerApiModelsServiceOrdersToPaymentResponseModel(BaseModel):
    """
    QualerApiModelsServiceOrdersToPaymentResponseModel
    """  # noqa: E501

    service_order_id: Optional[StrictInt] = Field(default=None, alias="ServiceOrderId")
    created_by_id: Optional[StrictInt] = Field(default=None, alias="CreatedById")
    transaction_id: Optional[StrictStr] = Field(default=None, alias="TransactionId")
    transaction_status: Optional[StrictStr] = Field(
        default=None, alias="TransactionStatus"
    )
    payment_type: Optional[StrictStr] = Field(default=None, alias="PaymentType")
    service_order_payment_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderPaymentId"
    )
    payment_amount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PaymentAmount"
    )
    details: Optional[StrictStr] = Field(default=None, alias="Details")
    __properties: ClassVar[List[str]] = [
        "ServiceOrderId",
        "CreatedById",
        "TransactionId",
        "TransactionStatus",
        "PaymentType",
        "ServiceOrderPaymentId",
        "PaymentAmount",
        "Details",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToPaymentResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToPaymentResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderId": obj.get("ServiceOrderId"),
                "CreatedById": obj.get("CreatedById"),
                "TransactionId": obj.get("TransactionId"),
                "TransactionStatus": obj.get("TransactionStatus"),
                "PaymentType": obj.get("PaymentType"),
                "ServiceOrderPaymentId": obj.get("ServiceOrderPaymentId"),
                "PaymentAmount": obj.get("PaymentAmount"),
                "Details": obj.get("Details"),
            }
        )
        return _obj
