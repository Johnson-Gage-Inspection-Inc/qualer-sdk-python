# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conlist,
)

from qualer_sdk.models.qualer_api_models_measurements_to_measurement_record_response_model_measurement_batch_response_model import (
    QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModel,
)


class QualerApiModelsMeasurementsToMeasurementRecordResponseModel(BaseModel):
    """
    QualerApiModelsMeasurementsToMeasurementRecordResponseModel
    """

    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    service_order_number: Optional[StrictInt] = Field(None, alias="ServiceOrderNumber")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    order_item_number: Optional[StrictInt] = Field(None, alias="OrderItemNumber")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    result_status: Optional[StrictStr] = Field(None, alias="ResultStatus")
    as_found_result: Optional[StrictStr] = Field(None, alias="AsFoundResult")
    as_left_result: Optional[StrictStr] = Field(None, alias="AsLeftResult")
    service_date: Optional[datetime] = Field(None, alias="ServiceDate")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_tag_change: Optional[StrictStr] = Field(None, alias="AssetTagChange")
    asset_user_change: Optional[StrictStr] = Field(None, alias="AssetUserChange")
    service_notes: Optional[StrictStr] = Field(None, alias="ServiceNotes")
    serial_number_change: Optional[StrictStr] = Field(None, alias="SerialNumberChange")
    due_date: Optional[datetime] = Field(None, alias="DueDate")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    service_level: Optional[StrictStr] = Field(None, alias="ServiceLevel")
    service_level_code: Optional[StrictStr] = Field(None, alias="ServiceLevelCode")
    next_service_level: Optional[StrictStr] = Field(None, alias="NextServiceLevel")
    next_service_level_code: Optional[StrictStr] = Field(
        None, alias="NextServiceLevelCode"
    )
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    parts_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsCharge"
    )
    parts_charge_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsChargeBeforeDiscount"
    )
    service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ServiceCharge"
    )
    repairs_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="RepairsCharge"
    )
    segment_name: Optional[StrictStr] = Field(None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(None, alias="ScheduleName")
    service_schedule_segment_id: Optional[StrictInt] = Field(
        None, alias="ServiceScheduleSegmentId"
    )
    forward_next_service: Optional[StrictBool] = Field(None, alias="ForwardNextService")
    forward_segment_id: Optional[StrictInt] = Field(None, alias="ForwardSegmentId")
    measurement_batches: Optional[
        conlist(
            QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModel
        )
    ] = Field(None, alias="MeasurementBatches")
    __properties = [
        "ServiceOrderId",
        "ServiceOrderNumber",
        "CustomOrderNumber",
        "OrderItemNumber",
        "CertificateNumber",
        "ResultStatus",
        "AsFoundResult",
        "AsLeftResult",
        "ServiceDate",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "AssetTagChange",
        "AssetUserChange",
        "ServiceNotes",
        "SerialNumberChange",
        "DueDate",
        "NextServiceDate",
        "ServiceLevel",
        "ServiceLevelCode",
        "NextServiceLevel",
        "NextServiceLevelCode",
        "AssetName",
        "AssetDescription",
        "PartsCharge",
        "PartsChargeBeforeDiscount",
        "ServiceCharge",
        "RepairsCharge",
        "SegmentName",
        "ScheduleName",
        "ServiceScheduleSegmentId",
        "ForwardNextService",
        "ForwardSegmentId",
        "MeasurementBatches",
    ]

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in measurement_batches (list)
        _items = []
        if self.measurement_batches:
            for _item in self.measurement_batches:
                if _item:
                    _items.append(_item.to_dict())
            _dict["MeasurementBatches"] = _items
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsMeasurementsToMeasurementRecordResponseModel:
        """Create an instance of QualerApiModelsMeasurementsToMeasurementRecordResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return (
                QualerApiModelsMeasurementsToMeasurementRecordResponseModel.parse_obj(
                    obj
                )
            )

        _obj = QualerApiModelsMeasurementsToMeasurementRecordResponseModel.parse_obj(
            {
                "service_order_id": obj.get("ServiceOrderId"),
                "service_order_number": obj.get("ServiceOrderNumber"),
                "custom_order_number": obj.get("CustomOrderNumber"),
                "order_item_number": obj.get("OrderItemNumber"),
                "certificate_number": obj.get("CertificateNumber"),
                "result_status": obj.get("ResultStatus"),
                "as_found_result": obj.get("AsFoundResult"),
                "as_left_result": obj.get("AsLeftResult"),
                "service_date": obj.get("ServiceDate"),
                "serial_number": obj.get("SerialNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "asset_tag_change": obj.get("AssetTagChange"),
                "asset_user_change": obj.get("AssetUserChange"),
                "service_notes": obj.get("ServiceNotes"),
                "serial_number_change": obj.get("SerialNumberChange"),
                "due_date": obj.get("DueDate"),
                "next_service_date": obj.get("NextServiceDate"),
                "service_level": obj.get("ServiceLevel"),
                "service_level_code": obj.get("ServiceLevelCode"),
                "next_service_level": obj.get("NextServiceLevel"),
                "next_service_level_code": obj.get("NextServiceLevelCode"),
                "asset_name": obj.get("AssetName"),
                "asset_description": obj.get("AssetDescription"),
                "parts_charge": obj.get("PartsCharge"),
                "parts_charge_before_discount": obj.get("PartsChargeBeforeDiscount"),
                "service_charge": obj.get("ServiceCharge"),
                "repairs_charge": obj.get("RepairsCharge"),
                "segment_name": obj.get("SegmentName"),
                "schedule_name": obj.get("ScheduleName"),
                "service_schedule_segment_id": obj.get("ServiceScheduleSegmentId"),
                "forward_next_service": obj.get("ForwardNextService"),
                "forward_segment_id": obj.get("ForwardSegmentId"),
                "measurement_batches": (
                    [
                        QualerApiModelsMeasurementsToMeasurementRecordResponseModelMeasurementBatchResponseModel.from_dict(
                            _item
                        )
                        for _item in obj.get("MeasurementBatches")
                    ]
                    if obj.get("MeasurementBatches") is not None
                    else None
                ),
            }
        )
        return _obj
