# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class QualerApiModelsProductToProductApiResponseModel(BaseModel):
    """
    QualerApiModelsProductToProductApiResponseModel
    """  # noqa: E501

    product_id: Optional[StrictInt] = Field(default=None, alias="ProductId")
    parent_product_id: Optional[StrictInt] = Field(
        default=None, alias="ParentProductId"
    )
    category_id: Optional[StrictInt] = Field(default=None, alias="CategoryId")
    manufacturer_id: Optional[StrictInt] = Field(default=None, alias="ManufacturerId")
    manufacturer_name: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerName"
    )
    product_name: Optional[StrictStr] = Field(default=None, alias="ProductName")
    parent_product_name: Optional[StrictStr] = Field(
        default=None, alias="ParentProductName"
    )
    manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerPartNumber"
    )
    product_description: Optional[StrictStr] = Field(
        default=None, alias="ProductDescription"
    )
    is_family: Optional[StrictBool] = Field(default=None, alias="IsFamily")
    is_discontinued: Optional[StrictBool] = Field(default=None, alias="IsDiscontinued")
    is_stock_item: Optional[StrictBool] = Field(default=None, alias="IsStockItem")
    unit_sale_price: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="UnitSalePrice"
    )
    supplier_information: Optional[StrictStr] = Field(
        default=None, alias="SupplierInformation"
    )
    quantity_on_hand: Optional[StrictInt] = Field(default=None, alias="QuantityOnHand")
    product_code: Optional[StrictStr] = Field(default=None, alias="ProductCode")
    category_name: Optional[StrictStr] = Field(default=None, alias="CategoryName")
    parent_category_name: Optional[StrictStr] = Field(
        default=None, alias="ParentCategoryName"
    )
    __properties: ClassVar[List[str]] = [
        "ProductId",
        "ParentProductId",
        "CategoryId",
        "ManufacturerId",
        "ManufacturerName",
        "ProductName",
        "ParentProductName",
        "ManufacturerPartNumber",
        "ProductDescription",
        "IsFamily",
        "IsDiscontinued",
        "IsStockItem",
        "UnitSalePrice",
        "SupplierInformation",
        "QuantityOnHand",
        "ProductCode",
        "CategoryName",
        "ParentCategoryName",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsProductToProductApiResponseModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsProductToProductApiResponseModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ProductId": obj.get("ProductId"),
                "ParentProductId": obj.get("ParentProductId"),
                "CategoryId": obj.get("CategoryId"),
                "ManufacturerId": obj.get("ManufacturerId"),
                "ManufacturerName": obj.get("ManufacturerName"),
                "ProductName": obj.get("ProductName"),
                "ParentProductName": obj.get("ParentProductName"),
                "ManufacturerPartNumber": obj.get("ManufacturerPartNumber"),
                "ProductDescription": obj.get("ProductDescription"),
                "IsFamily": obj.get("IsFamily"),
                "IsDiscontinued": obj.get("IsDiscontinued"),
                "IsStockItem": obj.get("IsStockItem"),
                "UnitSalePrice": obj.get("UnitSalePrice"),
                "SupplierInformation": obj.get("SupplierInformation"),
                "QuantityOnHand": obj.get("QuantityOnHand"),
                "ProductCode": obj.get("ProductCode"),
                "CategoryName": obj.get("CategoryName"),
                "ParentCategoryName": obj.get("ParentCategoryName"),
            }
        )
        return _obj
