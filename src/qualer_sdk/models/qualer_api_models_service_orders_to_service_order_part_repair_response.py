# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
)
from typing_extensions import Self


class QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse(BaseModel):
    """
    QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse
    """  # noqa: E501

    service_order_item_part_id: Optional[StrictInt] = Field(
        default=None, alias="ServiceOrderItemPartId"
    )
    price: Optional[Union[StrictFloat, StrictInt]] = Field(default=None, alias="Price")
    description: Optional[StrictStr] = Field(default=None, alias="Description")
    name: Optional[StrictStr] = Field(default=None, alias="Name")
    unit_name: Optional[StrictStr] = Field(default=None, alias="UnitName")
    quantity: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Quantity"
    )
    discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="Discount"
    )
    delivery_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DeliveryCharge"
    )
    is_taxable: Optional[StrictBool] = Field(default=None, alias="IsTaxable")
    time_spent_in_minutes: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TimeSpentInMinutes"
    )
    is_hourly_pricing: Optional[StrictBool] = Field(
        default=None, alias="IsHourlyPricing"
    )
    free_quantity: Optional[StrictInt] = Field(default=None, alias="FreeQuantity")
    currency_iso_symbol: Optional[StrictStr] = Field(
        default=None, alias="CurrencyIsoSymbol"
    )
    created_by_id: Optional[StrictInt] = Field(default=None, alias="CreatedById")
    created_by: Optional[StrictStr] = Field(default=None, alias="CreatedBy")
    created_on_utc: Optional[datetime] = Field(default=None, alias="CreatedOnUtc")
    charge_date: Optional[datetime] = Field(default=None, alias="ChargeDate")
    contract_repairs_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ContractRepairsDiscount"
    )
    contract_parts_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="ContractPartsDiscount"
    )
    service_order_charge_type: Optional[StrictStr] = Field(
        default=None, alias="ServiceOrderChargeType"
    )
    total_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TotalDiscount"
    )
    total_price: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="TotalPrice"
    )
    discount_price: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DiscountPrice"
    )
    __properties: ClassVar[List[str]] = [
        "ServiceOrderItemPartId",
        "Price",
        "Description",
        "Name",
        "UnitName",
        "Quantity",
        "Discount",
        "DeliveryCharge",
        "IsTaxable",
        "TimeSpentInMinutes",
        "IsHourlyPricing",
        "FreeQuantity",
        "CurrencyIsoSymbol",
        "CreatedById",
        "CreatedBy",
        "CreatedOnUtc",
        "ChargeDate",
        "ContractRepairsDiscount",
        "ContractPartsDiscount",
        "ServiceOrderChargeType",
        "TotalDiscount",
        "TotalPrice",
        "DiscountPrice",
    ]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        * OpenAPI `readOnly` fields are excluded.
        """
        excluded_fields: Set[str] = set(
            [
                "total_discount",
                "total_price",
                "discount_price",
            ]
        )

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsServiceOrdersToServiceOrderPartRepairResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "ServiceOrderItemPartId": obj.get("ServiceOrderItemPartId"),
                "Price": obj.get("Price"),
                "Description": obj.get("Description"),
                "Name": obj.get("Name"),
                "UnitName": obj.get("UnitName"),
                "Quantity": obj.get("Quantity"),
                "Discount": obj.get("Discount"),
                "DeliveryCharge": obj.get("DeliveryCharge"),
                "IsTaxable": obj.get("IsTaxable"),
                "TimeSpentInMinutes": obj.get("TimeSpentInMinutes"),
                "IsHourlyPricing": obj.get("IsHourlyPricing"),
                "FreeQuantity": obj.get("FreeQuantity"),
                "CurrencyIsoSymbol": obj.get("CurrencyIsoSymbol"),
                "CreatedById": obj.get("CreatedById"),
                "CreatedBy": obj.get("CreatedBy"),
                "CreatedOnUtc": obj.get("CreatedOnUtc"),
                "ChargeDate": obj.get("ChargeDate"),
                "ContractRepairsDiscount": obj.get("ContractRepairsDiscount"),
                "ContractPartsDiscount": obj.get("ContractPartsDiscount"),
                "ServiceOrderChargeType": obj.get("ServiceOrderChargeType"),
                "TotalDiscount": obj.get("TotalDiscount"),
                "TotalPrice": obj.get("TotalPrice"),
                "DiscountPrice": obj.get("DiscountPrice"),
            }
        )
        return _obj
