# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, validator


class QualerApiModelsClientsFromAssetModel(BaseModel):
    """
    QualerApiModelsClientsFromAssetModel
    """

    site_id: Optional[StrictInt] = Field(None, alias="SiteId")
    product_id: Optional[StrictInt] = Field(None, alias="ProductId")
    manufacturer: Optional[StrictStr] = Field(None, alias="Manufacturer")
    manufacturer_part_number: Optional[StrictStr] = Field(
        None, alias="ManufacturerPartNumber"
    )
    category_id: Optional[StrictInt] = Field(None, alias="CategoryId")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_status: Optional[StrictStr] = Field(None, alias="AssetStatus")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    asset_maker: Optional[StrictStr] = Field(None, alias="AssetMaker")
    location: Optional[StrictStr] = Field(None, alias="Location")
    retirement_reason: Optional[StrictStr] = Field(None, alias="RetirementReason")
    barcode: Optional[StrictStr] = Field(None, alias="Barcode")
    legacy_identifier: Optional[StrictStr] = Field(None, alias="LegacyIdentifier")
    condition: Optional[StrictStr] = Field(None, alias="Condition")
    criticality: Optional[StrictStr] = Field(None, alias="Criticality")
    purchase_date: Optional[datetime] = Field(None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PurchaseCost"
    )
    life_span_months: Optional[StrictInt] = Field(None, alias="LifeSpanMonths")
    activation_date: Optional[datetime] = Field(None, alias="ActivationDate")
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="DepreciationBasis"
    )
    depreciation_method: Optional[StrictInt] = Field(None, alias="DepreciationMethod")
    retirement_date: Optional[datetime] = Field(None, alias="RetirementDate")
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="SalvageValue"
    )
    __properties = [
        "SiteId",
        "ProductId",
        "Manufacturer",
        "ManufacturerPartNumber",
        "CategoryId",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "AssetStatus",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "Location",
        "RetirementReason",
        "Barcode",
        "LegacyIdentifier",
        "Condition",
        "Criticality",
        "PurchaseDate",
        "PurchaseCost",
        "LifeSpanMonths",
        "ActivationDate",
        "DepreciationBasis",
        "DepreciationMethod",
        "RetirementDate",
        "SalvageValue",
    ]

    @validator("asset_status")
    def asset_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ("0", "1", "2", "3", "4"):
            raise ValueError("must be one of enum values ('0', '1', '2', '3', '4')")
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> QualerApiModelsClientsFromAssetModel:
        """Create an instance of QualerApiModelsClientsFromAssetModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> QualerApiModelsClientsFromAssetModel:
        """Create an instance of QualerApiModelsClientsFromAssetModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsClientsFromAssetModel.parse_obj(obj)

        _obj = QualerApiModelsClientsFromAssetModel.parse_obj(
            {
                "site_id": obj.get("SiteId"),
                "product_id": obj.get("ProductId"),
                "manufacturer": obj.get("Manufacturer"),
                "manufacturer_part_number": obj.get("ManufacturerPartNumber"),
                "category_id": obj.get("CategoryId"),
                "serial_number": obj.get("SerialNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "asset_status": obj.get("AssetStatus"),
                "asset_name": obj.get("AssetName"),
                "asset_description": obj.get("AssetDescription"),
                "asset_maker": obj.get("AssetMaker"),
                "location": obj.get("Location"),
                "retirement_reason": obj.get("RetirementReason"),
                "barcode": obj.get("Barcode"),
                "legacy_identifier": obj.get("LegacyIdentifier"),
                "condition": obj.get("Condition"),
                "criticality": obj.get("Criticality"),
                "purchase_date": obj.get("PurchaseDate"),
                "purchase_cost": obj.get("PurchaseCost"),
                "life_span_months": obj.get("LifeSpanMonths"),
                "activation_date": obj.get("ActivationDate"),
                "depreciation_basis": obj.get("DepreciationBasis"),
                "depreciation_method": obj.get("DepreciationMethod"),
                "retirement_date": obj.get("RetirementDate"),
                "salvage_value": obj.get("SalvageValue"),
            }
        )
        return _obj
