# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Any, ClassVar, Dict, List, Optional, Set, Union

from pydantic import (
    BaseModel,
    ConfigDict,
    Field,
    StrictFloat,
    StrictInt,
    StrictStr,
    field_validator,
)
from typing_extensions import Self


class QualerApiModelsClientsFromAssetModel(BaseModel):
    """
    QualerApiModelsClientsFromAssetModel
    """  # noqa: E501

    site_id: Optional[StrictInt] = Field(default=None, alias="SiteId")
    product_id: Optional[StrictInt] = Field(default=None, alias="ProductId")
    manufacturer: Optional[StrictStr] = Field(default=None, alias="Manufacturer")
    manufacturer_part_number: Optional[StrictStr] = Field(
        default=None, alias="ManufacturerPartNumber"
    )
    category_id: Optional[StrictInt] = Field(default=None, alias="CategoryId")
    serial_number: Optional[StrictStr] = Field(default=None, alias="SerialNumber")
    asset_tag: Optional[StrictStr] = Field(default=None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(default=None, alias="AssetUser")
    asset_status: Optional[StrictStr] = Field(default=None, alias="AssetStatus")
    asset_name: Optional[StrictStr] = Field(default=None, alias="AssetName")
    asset_description: Optional[StrictStr] = Field(
        default=None, alias="AssetDescription"
    )
    asset_maker: Optional[StrictStr] = Field(default=None, alias="AssetMaker")
    location: Optional[StrictStr] = Field(default=None, alias="Location")
    retirement_reason: Optional[StrictStr] = Field(
        default=None, alias="RetirementReason"
    )
    barcode: Optional[StrictStr] = Field(default=None, alias="Barcode")
    legacy_identifier: Optional[StrictStr] = Field(
        default=None, alias="LegacyIdentifier"
    )
    condition: Optional[StrictStr] = Field(default=None, alias="Condition")
    criticality: Optional[StrictStr] = Field(default=None, alias="Criticality")
    purchase_date: Optional[datetime] = Field(default=None, alias="PurchaseDate")
    purchase_cost: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="PurchaseCost"
    )
    life_span_months: Optional[StrictInt] = Field(default=None, alias="LifeSpanMonths")
    activation_date: Optional[datetime] = Field(default=None, alias="ActivationDate")
    depreciation_basis: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="DepreciationBasis"
    )
    depreciation_method: Optional[StrictInt] = Field(
        default=None, alias="DepreciationMethod"
    )
    retirement_date: Optional[datetime] = Field(default=None, alias="RetirementDate")
    salvage_value: Optional[Union[StrictFloat, StrictInt]] = Field(
        default=None, alias="SalvageValue"
    )
    __properties: ClassVar[List[str]] = [
        "SiteId",
        "ProductId",
        "Manufacturer",
        "ManufacturerPartNumber",
        "CategoryId",
        "SerialNumber",
        "AssetTag",
        "AssetUser",
        "AssetStatus",
        "AssetName",
        "AssetDescription",
        "AssetMaker",
        "Location",
        "RetirementReason",
        "Barcode",
        "LegacyIdentifier",
        "Condition",
        "Criticality",
        "PurchaseDate",
        "PurchaseCost",
        "LifeSpanMonths",
        "ActivationDate",
        "DepreciationBasis",
        "DepreciationMethod",
        "RetirementDate",
        "SalvageValue",
    ]

    @field_validator("asset_status")
    def asset_status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in set(["0", "1", "2", "3", "4"]):
            raise ValueError("must be one of enum values ('0', '1', '2', '3', '4')")
        return value

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of QualerApiModelsClientsFromAssetModel from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of QualerApiModelsClientsFromAssetModel from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate(
            {
                "SiteId": obj.get("SiteId"),
                "ProductId": obj.get("ProductId"),
                "Manufacturer": obj.get("Manufacturer"),
                "ManufacturerPartNumber": obj.get("ManufacturerPartNumber"),
                "CategoryId": obj.get("CategoryId"),
                "SerialNumber": obj.get("SerialNumber"),
                "AssetTag": obj.get("AssetTag"),
                "AssetUser": obj.get("AssetUser"),
                "AssetStatus": obj.get("AssetStatus"),
                "AssetName": obj.get("AssetName"),
                "AssetDescription": obj.get("AssetDescription"),
                "AssetMaker": obj.get("AssetMaker"),
                "Location": obj.get("Location"),
                "RetirementReason": obj.get("RetirementReason"),
                "Barcode": obj.get("Barcode"),
                "LegacyIdentifier": obj.get("LegacyIdentifier"),
                "Condition": obj.get("Condition"),
                "Criticality": obj.get("Criticality"),
                "PurchaseDate": obj.get("PurchaseDate"),
                "PurchaseCost": obj.get("PurchaseCost"),
                "LifeSpanMonths": obj.get("LifeSpanMonths"),
                "ActivationDate": obj.get("ActivationDate"),
                "DepreciationBasis": obj.get("DepreciationBasis"),
                "DepreciationMethod": obj.get("DepreciationMethod"),
                "RetirementDate": obj.get("RetirementDate"),
                "SalvageValue": obj.get("SalvageValue"),
            }
        )
        return _obj
