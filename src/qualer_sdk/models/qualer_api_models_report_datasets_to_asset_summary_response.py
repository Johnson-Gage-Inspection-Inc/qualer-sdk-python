# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


from __future__ import annotations

import json
import pprint
import re  # noqa: F401
from datetime import datetime
from typing import Optional, Union

from pydantic import (
    BaseModel,
    Field,
    StrictBool,
    StrictFloat,
    StrictInt,
    StrictStr,
    conbytes,
    constr,
    validator,
)


class QualerApiModelsReportDatasetsToAssetSummaryResponse(BaseModel):
    """
    QualerApiModelsReportDatasetsToAssetSummaryResponse
    """

    service_order_number: Optional[StrictInt] = Field(None, alias="ServiceOrderNumber")
    service_order_id: Optional[StrictInt] = Field(None, alias="ServiceOrderId")
    service_order_item_id: Optional[StrictInt] = Field(None, alias="ServiceOrderItemId")
    custom_order_number: Optional[StrictStr] = Field(None, alias="CustomOrderNumber")
    order_item_number: Optional[StrictInt] = Field(None, alias="OrderItemNumber")
    is_limited: Optional[StrictBool] = Field(None, alias="IsLimited")
    certificate_number: Optional[StrictStr] = Field(None, alias="CertificateNumber")
    serial_number: Optional[StrictStr] = Field(None, alias="SerialNumber")
    next_service_date: Optional[datetime] = Field(None, alias="NextServiceDate")
    service_date: Optional[datetime] = Field(None, alias="ServiceDate")
    part_number: Optional[StrictStr] = Field(None, alias="PartNumber")
    display_part_number: Optional[StrictStr] = Field(None, alias="DisplayPartNumber")
    asset_tag: Optional[StrictStr] = Field(None, alias="AssetTag")
    asset_user: Optional[StrictStr] = Field(None, alias="AssetUser")
    asset_name: Optional[StrictStr] = Field(None, alias="AssetName")
    equipment_id: Optional[StrictStr] = Field(None, alias="EquipmentId")
    legacy_identifier: Optional[StrictStr] = Field(None, alias="LegacyIdentifier")
    asset_description: Optional[StrictStr] = Field(None, alias="AssetDescription")
    var_class: Optional[StrictStr] = Field(None, alias="Class")
    condition: Optional[StrictStr] = Field(None, alias="Condition")
    criticality: Optional[StrictStr] = Field(None, alias="Criticality")
    asset_pool: Optional[StrictStr] = Field(None, alias="AssetPool")
    room: Optional[StrictStr] = Field(None, alias="Room")
    station: Optional[StrictStr] = Field(None, alias="Station")
    service_notes: Optional[StrictStr] = Field(None, alias="ServiceNotes")
    service_level: Optional[StrictStr] = Field(None, alias="ServiceLevel")
    service_level_code: Optional[StrictStr] = Field(None, alias="ServiceLevelCode")
    next_service_level: Optional[StrictStr] = Field(None, alias="NextServiceLevel")
    next_service_level_code: Optional[StrictStr] = Field(
        None, alias="NextServiceLevelCode"
    )
    asset_id: Optional[StrictInt] = Field(None, alias="AssetId")
    result_status: Optional[StrictInt] = Field(None, alias="ResultStatus")
    serial_number_change: Optional[StrictStr] = Field(None, alias="SerialNumberChange")
    provider_technician: Optional[StrictStr] = Field(None, alias="ProviderTechnician")
    provider_technician_alias: Optional[StrictStr] = Field(
        None, alias="ProviderTechnicianAlias"
    )
    provider_phone: Optional[StrictStr] = Field(None, alias="ProviderPhone")
    provider_company: Optional[StrictStr] = Field(None, alias="ProviderCompany")
    qr_code: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(
        None, alias="QrCode"
    )
    bar_code: Optional[Union[conbytes(strict=True), constr(strict=True)]] = Field(
        None, alias="BarCode"
    )
    bar_code_string: Optional[StrictStr] = Field(None, alias="BarCodeString")
    owner_company_id: Optional[StrictInt] = Field(None, alias="OwnerCompanyId")
    owner_company_name: Optional[StrictStr] = Field(None, alias="OwnerCompanyName")
    as_found_result: Optional[StrictInt] = Field(None, alias="AsFoundResult")
    as_left_result: Optional[StrictInt] = Field(None, alias="AsLeftResult")
    asset_tag_change: Optional[StrictStr] = Field(None, alias="AssetTagChange")
    asset_user_change: Optional[StrictStr] = Field(None, alias="AssetUserChange")
    due_date: Optional[datetime] = Field(None, alias="DueDate")
    parts_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsCharge"
    )
    parts_charge_before_discount: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="PartsChargeBeforeDiscount"
    )
    service_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="ServiceCharge"
    )
    repairs_charge: Optional[Union[StrictFloat, StrictInt]] = Field(
        None, alias="RepairsCharge"
    )
    segment_name: Optional[StrictStr] = Field(None, alias="SegmentName")
    schedule_name: Optional[StrictStr] = Field(None, alias="ScheduleName")
    next_segment_name: Optional[StrictStr] = Field(None, alias="NextSegmentName")
    client_id: Optional[StrictInt] = Field(None, alias="ClientId")
    interval_length: Optional[StrictInt] = Field(None, alias="IntervalLength")
    interval_cycle: Optional[StrictStr] = Field(None, alias="IntervalCycle")
    __properties = [
        "ServiceOrderNumber",
        "ServiceOrderId",
        "ServiceOrderItemId",
        "CustomOrderNumber",
        "OrderItemNumber",
        "IsLimited",
        "CertificateNumber",
        "SerialNumber",
        "NextServiceDate",
        "ServiceDate",
        "PartNumber",
        "DisplayPartNumber",
        "AssetTag",
        "AssetUser",
        "AssetName",
        "EquipmentId",
        "LegacyIdentifier",
        "AssetDescription",
        "Class",
        "Condition",
        "Criticality",
        "AssetPool",
        "Room",
        "Station",
        "ServiceNotes",
        "ServiceLevel",
        "ServiceLevelCode",
        "NextServiceLevel",
        "NextServiceLevelCode",
        "AssetId",
        "ResultStatus",
        "SerialNumberChange",
        "ProviderTechnician",
        "ProviderTechnicianAlias",
        "ProviderPhone",
        "ProviderCompany",
        "QrCode",
        "BarCode",
        "BarCodeString",
        "OwnerCompanyId",
        "OwnerCompanyName",
        "AsFoundResult",
        "AsLeftResult",
        "AssetTagChange",
        "AssetUserChange",
        "DueDate",
        "PartsCharge",
        "PartsChargeBeforeDiscount",
        "ServiceCharge",
        "RepairsCharge",
        "SegmentName",
        "ScheduleName",
        "NextSegmentName",
        "ClientId",
        "IntervalLength",
        "IntervalCycle",
    ]

    @validator("qr_code")
    def qr_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/"
            )
        return value

    @validator("bar_code")
    def bar_code_validate_regular_expression(cls, value):
        """Validates the regular expression"""
        if value is None:
            return value

        if not re.match(
            r"^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$",
            value,
        ):
            raise ValueError(
                r"must validate the regular expression /^(?:[A-Za-z0-9+\/]{4})*(?:[A-Za-z0-9+\/]{2}==|[A-Za-z0-9+\/]{3}=)?$/"
            )
        return value

    class Config:
        """Pydantic configuration"""

        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(
        cls, json_str: str
    ) -> QualerApiModelsReportDatasetsToAssetSummaryResponse:
        """Create an instance of QualerApiModelsReportDatasetsToAssetSummaryResponse from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True, exclude={}, exclude_none=True)
        return _dict

    @classmethod
    def from_dict(
        cls, obj: dict
    ) -> QualerApiModelsReportDatasetsToAssetSummaryResponse:
        """Create an instance of QualerApiModelsReportDatasetsToAssetSummaryResponse from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return QualerApiModelsReportDatasetsToAssetSummaryResponse.parse_obj(obj)

        _obj = QualerApiModelsReportDatasetsToAssetSummaryResponse.parse_obj(
            {
                "service_order_number": obj.get("ServiceOrderNumber"),
                "service_order_id": obj.get("ServiceOrderId"),
                "service_order_item_id": obj.get("ServiceOrderItemId"),
                "custom_order_number": obj.get("CustomOrderNumber"),
                "order_item_number": obj.get("OrderItemNumber"),
                "is_limited": obj.get("IsLimited"),
                "certificate_number": obj.get("CertificateNumber"),
                "serial_number": obj.get("SerialNumber"),
                "next_service_date": obj.get("NextServiceDate"),
                "service_date": obj.get("ServiceDate"),
                "part_number": obj.get("PartNumber"),
                "display_part_number": obj.get("DisplayPartNumber"),
                "asset_tag": obj.get("AssetTag"),
                "asset_user": obj.get("AssetUser"),
                "asset_name": obj.get("AssetName"),
                "equipment_id": obj.get("EquipmentId"),
                "legacy_identifier": obj.get("LegacyIdentifier"),
                "asset_description": obj.get("AssetDescription"),
                "var_class": obj.get("Class"),
                "condition": obj.get("Condition"),
                "criticality": obj.get("Criticality"),
                "asset_pool": obj.get("AssetPool"),
                "room": obj.get("Room"),
                "station": obj.get("Station"),
                "service_notes": obj.get("ServiceNotes"),
                "service_level": obj.get("ServiceLevel"),
                "service_level_code": obj.get("ServiceLevelCode"),
                "next_service_level": obj.get("NextServiceLevel"),
                "next_service_level_code": obj.get("NextServiceLevelCode"),
                "asset_id": obj.get("AssetId"),
                "result_status": obj.get("ResultStatus"),
                "serial_number_change": obj.get("SerialNumberChange"),
                "provider_technician": obj.get("ProviderTechnician"),
                "provider_technician_alias": obj.get("ProviderTechnicianAlias"),
                "provider_phone": obj.get("ProviderPhone"),
                "provider_company": obj.get("ProviderCompany"),
                "qr_code": obj.get("QrCode"),
                "bar_code": obj.get("BarCode"),
                "bar_code_string": obj.get("BarCodeString"),
                "owner_company_id": obj.get("OwnerCompanyId"),
                "owner_company_name": obj.get("OwnerCompanyName"),
                "as_found_result": obj.get("AsFoundResult"),
                "as_left_result": obj.get("AsLeftResult"),
                "asset_tag_change": obj.get("AssetTagChange"),
                "asset_user_change": obj.get("AssetUserChange"),
                "due_date": obj.get("DueDate"),
                "parts_charge": obj.get("PartsCharge"),
                "parts_charge_before_discount": obj.get("PartsChargeBeforeDiscount"),
                "service_charge": obj.get("ServiceCharge"),
                "repairs_charge": obj.get("RepairsCharge"),
                "segment_name": obj.get("SegmentName"),
                "schedule_name": obj.get("ScheduleName"),
                "next_segment_name": obj.get("NextSegmentName"),
                "client_id": obj.get("ClientId"),
                "interval_length": obj.get("IntervalLength"),
                "interval_cycle": obj.get("IntervalCycle"),
            }
        )
        return _obj
