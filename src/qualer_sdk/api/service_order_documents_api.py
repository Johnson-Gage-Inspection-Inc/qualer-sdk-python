# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderDocumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_document(self, guid, **kwargs):  # noqa: E501
        """Retrieve work order document by Unique Id  # noqa: E501

        Sample request:                GET api/service/workorders/documents/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9                GET api/wd/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: Document unique id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_document_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def get_document_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve work order document by Unique Id  # noqa: E501

        Sample request:                GET api/service/workorders/documents/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9                GET api/wd/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: Document unique id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["guid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and (
            "guid" not in params or params["guid"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `guid` when calling `get_document`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "guid" in params:
            path_params["guid"] = params["guid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/documents/{guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_document_0(self, guid, **kwargs):  # noqa: E501
        """Retrieve work order document by Unique Id  # noqa: E501

        Sample request:                GET api/service/workorders/documents/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9                GET api/wd/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_0(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: Document unique id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_document_0_with_http_info(guid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_0_with_http_info(guid, **kwargs)  # noqa: E501
            return data

    def get_document_0_with_http_info(self, guid, **kwargs):  # noqa: E501
        """Retrieve work order document by Unique Id  # noqa: E501

        Sample request:                GET api/service/workorders/documents/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9                GET api/wd/FE6B21DC-8061-46FF-AAB8-12C2030FE4B9  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_0_with_http_info(guid, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str guid: Document unique id (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["guid"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_0" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'guid' is set
        if self.api_client.client_side_validation and (
            "guid" not in params or params["guid"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `guid` when calling `get_document_0`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "guid" in params:
            path_params["guid"] = params["guid"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/wd/{guid}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_document_list(self, _from, to, **kwargs):  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET /api/service/workorders/documents/list                GET /api/service/workorders/documents/list?status=reportType                GET /api/service/workorders/documents/list?from=2020-12-01T10:11:12&amp;to=2021-01-01T10:11:12&amp;reportType=OrderInvoice&amp;ServiceOrderId=1                reportType:<br />  Unset = 0,<br />  AssetSummary = 1,<br />  AssetLabel = 11,<br />  AssetDetail = 2,<br />  AssetCertificate = 21,<br />  OrderSummary / ServiceOrderSummary = 3,<br />  OrderInvoice / ServiceOrderInvoice = 31,<br />  OrderEstimate / ServiceOrderEstimate = 32,<br />  Dashboard = 4,<br />  OrderDetail / ServiceOrderDetail = 5,<br />  OrderCertificate / ServiceOrderCertificate = 5<br />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_list(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :param datetime to: Retrieve documents where CreatedOnUtc less than To parameter (required)
        :param str report_type: Retrieve documents given types (Optional)
        :param int service_order_id: Retrieve documents by given service order id (Optional)
        :return: list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_document_list_with_http_info(
                _from, to, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_document_list_with_http_info(
                _from, to, **kwargs
            )  # noqa: E501
            return data

    def get_document_list_with_http_info(self, _from, to, **kwargs):  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET /api/service/workorders/documents/list                GET /api/service/workorders/documents/list?status=reportType                GET /api/service/workorders/documents/list?from=2020-12-01T10:11:12&amp;to=2021-01-01T10:11:12&amp;reportType=OrderInvoice&amp;ServiceOrderId=1                reportType:<br />  Unset = 0,<br />  AssetSummary = 1,<br />  AssetLabel = 11,<br />  AssetDetail = 2,<br />  AssetCertificate = 21,<br />  OrderSummary / ServiceOrderSummary = 3,<br />  OrderInvoice / ServiceOrderInvoice = 31,<br />  OrderEstimate / ServiceOrderEstimate = 32,<br />  Dashboard = 4,<br />  OrderDetail / ServiceOrderDetail = 5,<br />  OrderCertificate / ServiceOrderCertificate = 5<br />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_document_list_with_http_info(_from, to, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param datetime _from: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :param datetime to: Retrieve documents where CreatedOnUtc less than To parameter (required)
        :param str report_type: Retrieve documents given types (Optional)
        :param int service_order_id: Retrieve documents by given service order id (Optional)
        :return: list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["_from", "to", "report_type", "service_order_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_list" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter '_from' is set
        if self.api_client.client_side_validation and (
            "_from" not in params or params["_from"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `_from` when calling `get_document_list`"
            )  # noqa: E501
        # verify the required parameter 'to' is set
        if self.api_client.client_side_validation and (
            "to" not in params or params["to"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `to` when calling `get_document_list`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "_from" in params:
            query_params.append(("from", params["_from"]))  # noqa: E501
        if "to" in params:
            query_params.append(("to", params["to"]))  # noqa: E501
        if "report_type" in params:
            query_params.append(("reportType", params["report_type"]))  # noqa: E501
        if "service_order_id" in params:
            query_params.append(
                ("serviceOrderId", params["service_order_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/documents/list",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_documents(self, service_order_id, **kwargs):  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET api/service/workorders/1000/documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_documents_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_documents_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
            return data

    def get_documents_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET api/service/workorders/1000/documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["service_order_id", "model_file_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and (
            "service_order_id" not in params or params["service_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `service_order_id` when calling `get_documents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service_order_id" in params:
            path_params["serviceOrderId"] = params["service_order_id"]  # noqa: E501

        query_params = []
        if "model_file_name" in params:
            query_params.append(
                ("model.fileName", params["model_file_name"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/documents",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_documents_list(self, service_order_id, **kwargs):  # noqa: E501
        """get_documents_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_list(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param str model_report_type:
        :return: list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_documents_list_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_documents_list_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
            return data

    def get_documents_list_with_http_info(
        self, service_order_id, **kwargs
    ):  # noqa: E501
        """get_documents_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_documents_list_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param str model_report_type:
        :return: list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["service_order_id", "model_report_type"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_list" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and (
            "service_order_id" not in params or params["service_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `service_order_id` when calling `get_documents_list`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service_order_id" in params:
            path_params["serviceOrderId"] = params["service_order_id"]  # noqa: E501

        query_params = []
        if "model_report_type" in params:
            query_params.append(
                ("model.reportType", params["model_report_type"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/documents/list",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsServiceOrderDocumentsToCompanyOrderControlledDocumentResponse]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def upload_documents(self, service_order_id, **kwargs):  # noqa: E501
        """# noqa: E501

        reportType:<br />  assetsummary, assetlabel, assetdetail, assetcertificate,<br />  ordersummary / serviceordersummary,<br />  orderinvoice / serviceorderinvoice,<br />  orderestimate / serviceorderestimate,<br />  orderdetail / serviceorderdetail,<br />  ordercertificate / serviceordercertificate,<br />  general  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_documents(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str model_report_type:
        :param bool model_is_private:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.upload_documents_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.upload_documents_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
            return data

    def upload_documents_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """# noqa: E501

        reportType:<br />  assetsummary, assetlabel, assetdetail, assetcertificate,<br />  ordersummary / serviceordersummary,<br />  orderinvoice / serviceorderinvoice,<br />  orderestimate / serviceorderestimate,<br />  orderdetail / serviceorderdetail,<br />  ordercertificate / serviceordercertificate,<br />  general  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_documents_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id:  (required)
        :param str model_report_type:
        :param bool model_is_private:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "service_order_id",
            "model_report_type",
            "model_is_private",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_documents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and (
            "service_order_id" not in params or params["service_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `service_order_id` when calling `upload_documents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service_order_id" in params:
            path_params["serviceOrderId"] = params["service_order_id"]  # noqa: E501

        query_params = []
        if "model_report_type" in params:
            query_params.append(
                ("model.reportType", params["model_report_type"])
            )  # noqa: E501
        if "model_is_private" in params:
            query_params.append(
                ("model.isPrivate", params["model_is_private"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/documents",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
