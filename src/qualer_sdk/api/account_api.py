# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AccountApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def companies(self, model, **kwargs):  # noqa: E501
        """companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.companies_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.companies_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def companies_with_http_info(self, model, **kwargs):  # noqa: E501
        """companies  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.companies_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method companies" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `companies`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/user/companies",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_employee_message(self, message_id, **kwargs):  # noqa: E501
        """get_employee_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employee_message(message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int message_id: (required)
        :return: QualerApiModelsAccountToEmployeeEventMessageResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_employee_message_with_http_info(
                message_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_employee_message_with_http_info(
                message_id, **kwargs
            )  # noqa: E501
            return data

    def get_employee_message_with_http_info(self, message_id, **kwargs):  # noqa: E501
        """get_employee_message  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employee_message_with_http_info(message_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int message_id: (required)
        :return: QualerApiModelsAccountToEmployeeEventMessageResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["message_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_employee_message" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'message_id' is set
        if self.api_client.client_side_validation and (
            "message_id" not in params or params["message_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `message_id` when calling `get_employee_message`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "message_id" in params:
            path_params["messageId"] = params["message_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/user/messages/{messageId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsAccountToEmployeeEventMessageResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_employee_messages(self, **kwargs):  # noqa: E501
        """get_employee_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employee_messages(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_period:
        :param int model_site_id:
        :return: list[QualerApiModelsAccountToEmployeeEventResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_employee_messages_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_employee_messages_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_employee_messages_with_http_info(self, **kwargs):  # noqa: E501
        """get_employee_messages  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_employee_messages_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_period:
        :param int model_site_id:
        :return: list[QualerApiModelsAccountToEmployeeEventResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["model_period", "model_site_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_employee_messages" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "model_period" in params:
            query_params.append(("model.period", params["model_period"]))  # noqa: E501
        if "model_site_id" in params:
            query_params.append(("model.siteId", params["model_site_id"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/user/messages",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsAccountToEmployeeEventResponseModel]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def login(self, model, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel model: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.login_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.login_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def login_with_http_info(self, model, **kwargs):  # noqa: E501
        """Login  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.login_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerWebMvcAreasApiModelsAccountToLoginModel model: (required)
        :return: QualerApiModelsAccountFromLoginResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method login" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `login`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/login",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsAccountFromLoginResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def logout(self, model, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAccountToLogoutModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.logout_with_http_info(model, **kwargs)  # noqa: E501
        else:
            (data) = self.logout_with_http_info(model, **kwargs)  # noqa: E501
            return data

    def logout_with_http_info(self, model, **kwargs):  # noqa: E501
        """Logout  # noqa: E501

        LogoutAction:<br />  Logout - remove the passed token from the list of active sessions (default value)<br />  LogoutAll - remove this token and all other tokens created for the same user from the list of active sessions<br />  LogoutAllOther - remove all tokens created for the same user from the list of session except for the one that is passed in<br />  Rotate - change the current token to a different GUID and return the new GUID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.logout_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsAccountToLogoutModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'" " to method logout" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `logout`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/logout",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def post_employee_location(self, model, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_employee_location(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeLocationModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.post_employee_location_with_http_info(
                model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.post_employee_location_with_http_info(
                model, **kwargs
            )  # noqa: E501
            return data

    def post_employee_location_with_http_info(self, model, **kwargs):  # noqa: E501
        """Post Employee Location  # noqa: E501

        Sample request:                POST api/user/location                Latitude - The latitude in degrees.<br />  Longitude - The longitude in degrees.<br />  Accuracy - The radius of uncertainty for the location, measured in meters.<br />  Altitude - The altitude in meters above the WGS 84 reference ellipsoid.<br />  AltitudeAccuracy - The accuracy of the altitude value, in meters.<br />  Heading - Horizontal direction of travel of this device, measured in degrees starting at due north and continuing clockwise around the compass. Thus, north is 0 degrees, east is 90 degrees, south is 180 degrees, and so on.<br />  Speed - The instantaneous speed of the device in meters per second.<br />  Timestamp - The time at which this position information was obtained, in seconds.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.post_employee_location_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param QualerApiModelsEmployeesFromEmployeeLocationModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method post_employee_location" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `post_employee_location`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/user/location",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
