# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from typing import List, Optional

from pydantic import StrictInt, StrictStr, validate_arguments

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_asset_to_asset_response_model import (
    QualerApiModelsAssetToAssetResponseModel,
)
from qualer_sdk.models.qualer_api_models_asset_to_client_asset_counters_response_model import (
    QualerApiModelsAssetToClientAssetCountersResponseModel,
)
from qualer_sdk.models.qualer_api_models_asset_to_client_asset_manager_response_model import (
    QualerApiModelsAssetToClientAssetManagerResponseModel,
)
from qualer_sdk.models.qualer_api_models_clients_from_asset_model import (
    QualerApiModelsClientsFromAssetModel,
)


class ClientAssetsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_asset(
        self, model: QualerApiModelsClientsFromAssetModel, **kwargs
    ) -> object:  # noqa: E501
        """create_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_asset(model, async_req=True)
        >>> result = thread.get()

        :param model: (required)
        :type model: QualerApiModelsClientsFromAssetModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_asset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_asset_with_http_info(model, **kwargs)  # noqa: E501

    @validate_arguments
    def create_asset_with_http_info(
        self, model: QualerApiModelsClientsFromAssetModel, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """create_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_asset_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param model: (required)
        :type model: QualerApiModelsClientsFromAssetModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_asset" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "201": "QualerApiModelsClientsToCreatedClientAssetResponse",
        }

        return self.api_client.call_api(
            "/api/service/clients/assets",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_all_assets_get2(
        self,
        query_equipment_id: Optional[StrictStr] = None,
        query_serial_number: Optional[StrictStr] = None,
        query_asset_tag: Optional[StrictStr] = None,
        query_barcode: Optional[StrictStr] = None,
        query_legacy_id: Optional[StrictStr] = None,
        **kwargs,
    ) -> List[QualerApiModelsAssetToAssetResponseModel]:  # noqa: E501
        """get_all_assets_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_assets_get2(query_equipment_id, query_serial_number, query_asset_tag, query_barcode, query_legacy_id, async_req=True)
        >>> result = thread.get()

        :param query_equipment_id:
        :type query_equipment_id: str
        :param query_serial_number:
        :type query_serial_number: str
        :param query_asset_tag:
        :type query_asset_tag: str
        :param query_barcode:
        :type query_barcode: str
        :param query_legacy_id:
        :type query_legacy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsAssetToAssetResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_all_assets_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_all_assets_get2_with_http_info(
            query_equipment_id,
            query_serial_number,
            query_asset_tag,
            query_barcode,
            query_legacy_id,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_all_assets_get2_with_http_info(
        self,
        query_equipment_id: Optional[StrictStr] = None,
        query_serial_number: Optional[StrictStr] = None,
        query_asset_tag: Optional[StrictStr] = None,
        query_barcode: Optional[StrictStr] = None,
        query_legacy_id: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_all_assets_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_assets_get2_with_http_info(query_equipment_id, query_serial_number, query_asset_tag, query_barcode, query_legacy_id, async_req=True)
        >>> result = thread.get()

        :param query_equipment_id:
        :type query_equipment_id: str
        :param query_serial_number:
        :type query_serial_number: str
        :param query_asset_tag:
        :type query_asset_tag: str
        :param query_barcode:
        :type query_barcode: str
        :param query_legacy_id:
        :type query_legacy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsAssetToAssetResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "query_equipment_id",
            "query_serial_number",
            "query_asset_tag",
            "query_barcode",
            "query_legacy_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_assets_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("query_equipment_id") is not None:  # noqa: E501
            _query_params.append(("query.equipmentId", _params["query_equipment_id"]))

        if _params.get("query_serial_number") is not None:  # noqa: E501
            _query_params.append(("query.serialNumber", _params["query_serial_number"]))

        if _params.get("query_asset_tag") is not None:  # noqa: E501
            _query_params.append(("query.assetTag", _params["query_asset_tag"]))

        if _params.get("query_barcode") is not None:  # noqa: E501
            _query_params.append(("query.barcode", _params["query_barcode"]))

        if _params.get("query_legacy_id") is not None:  # noqa: E501
            _query_params.append(("query.legacyId", _params["query_legacy_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsAssetToAssetResponseModel]",
        }

        return self.api_client.call_api(
            "/api/service/clients/assets",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_counters(
        self, client_company_id: StrictInt, **kwargs
    ) -> QualerApiModelsAssetToClientAssetCountersResponseModel:  # noqa: E501
        """get_asset_counters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_counters(client_company_id, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsAssetToClientAssetCountersResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_counters_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_counters_with_http_info(
            client_company_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_asset_counters_with_http_info(
        self, client_company_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_asset_counters  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_counters_with_http_info(client_company_id, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsAssetToClientAssetCountersResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["client_company_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_counters" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["client_company_id"]:
            _path_params["clientCompanyId"] = _params["client_company_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsAssetToClientAssetCountersResponseModel",
        }

        return self.api_client.call_api(
            "/api/service/clients/{clientCompanyId}/counters",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_get2(
        self,
        asset_id2: StrictStr,
        asset_id: Optional[StrictStr] = None,
        model_asset_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> QualerApiModelsAssetToAssetResponseModel:  # noqa: E501
        """get_asset_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_get2(asset_id2, asset_id, model_asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id2: (required)
        :type asset_id2: str
        :param asset_id:
        :type asset_id: str
        :param model_asset_id:
        :type model_asset_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsAssetToAssetResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_get2_with_http_info(
            asset_id2, asset_id, model_asset_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_asset_get2_with_http_info(
        self,
        asset_id2: StrictStr,
        asset_id: Optional[StrictStr] = None,
        model_asset_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_asset_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_get2_with_http_info(asset_id2, asset_id, model_asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id2: (required)
        :type asset_id2: str
        :param asset_id:
        :type asset_id: str
        :param model_asset_id:
        :type model_asset_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsAssetToAssetResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_id2", "asset_id", "model_asset_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_id2"]:
            _path_params["AssetId"] = _params["asset_id2"]

        # process the query parameters
        _query_params = []
        if _params.get("asset_id") is not None:  # noqa: E501
            _query_params.append(("assetId", _params["asset_id"]))

        if _params.get("model_asset_id") is not None:  # noqa: E501
            _query_params.append(("model.assetId", _params["model_asset_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsAssetToAssetResponseModel",
        }

        return self.api_client.call_api(
            "/api/service/clients/assets/{AssetId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_manager_list_get2(
        self,
        client_company_id: StrictInt,
        query_filter_type: Optional[StrictStr] = None,
        query_search_string: Optional[StrictStr] = None,
        query_page: Optional[StrictInt] = None,
        query_page_size: Optional[StrictInt] = None,
        **kwargs,
    ) -> List[QualerApiModelsAssetToClientAssetManagerResponseModel]:  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        assetFilterType: ClientUnset, ClientAssetsCollected, ClientPastDue, ClientDueForService, ClientOutOfService, ClientWithoutSchedule                ClientDueForService - depends on Employee Filter Preference  POST api/user/filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_manager_list_get2(client_company_id, query_filter_type, query_search_string, query_page, query_page_size, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param query_filter_type:
        :type query_filter_type: str
        :param query_search_string:
        :type query_search_string: str
        :param query_page:
        :type query_page: int
        :param query_page_size:
        :type query_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsAssetToClientAssetManagerResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_manager_list_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_manager_list_get2_with_http_info(
            client_company_id,
            query_filter_type,
            query_search_string,
            query_page,
            query_page_size,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_asset_manager_list_get2_with_http_info(
        self,
        client_company_id: StrictInt,
        query_filter_type: Optional[StrictStr] = None,
        query_search_string: Optional[StrictStr] = None,
        query_page: Optional[StrictInt] = None,
        query_page_size: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """GetAssetManagerList  # noqa: E501

        assetFilterType: ClientUnset, ClientAssetsCollected, ClientPastDue, ClientDueForService, ClientOutOfService, ClientWithoutSchedule                ClientDueForService - depends on Employee Filter Preference  POST api/user/filters  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_manager_list_get2_with_http_info(client_company_id, query_filter_type, query_search_string, query_page, query_page_size, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param query_filter_type:
        :type query_filter_type: str
        :param query_search_string:
        :type query_search_string: str
        :param query_page:
        :type query_page: int
        :param query_page_size:
        :type query_page_size: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsAssetToClientAssetManagerResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "client_company_id",
            "query_filter_type",
            "query_search_string",
            "query_page",
            "query_page_size",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_manager_list_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["client_company_id"]:
            _path_params["clientCompanyId"] = _params["client_company_id"]

        # process the query parameters
        _query_params = []
        if _params.get("query_filter_type") is not None:  # noqa: E501
            _query_params.append(("query.filterType", _params["query_filter_type"]))

        if _params.get("query_search_string") is not None:  # noqa: E501
            _query_params.append(("query.searchString", _params["query_search_string"]))

        if _params.get("query_page") is not None:  # noqa: E501
            _query_params.append(("query.page", _params["query_page"]))

        if _params.get("query_page_size") is not None:  # noqa: E501
            _query_params.append(("query.pageSize", _params["query_page_size"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsAssetToClientAssetManagerResponseModel]",
        }

        return self.api_client.call_api(
            "/api/service/clients/{clientCompanyId}/assets/byfilter",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_assets(
        self,
        client_company_id: StrictInt,
        query_equipment_id: Optional[StrictStr] = None,
        query_serial_number: Optional[StrictStr] = None,
        query_asset_tag: Optional[StrictStr] = None,
        query_barcode: Optional[StrictStr] = None,
        query_legacy_id: Optional[StrictStr] = None,
        **kwargs,
    ) -> List[QualerApiModelsAssetToAssetResponseModel]:  # noqa: E501
        """get_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_assets(client_company_id, query_equipment_id, query_serial_number, query_asset_tag, query_barcode, query_legacy_id, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param query_equipment_id:
        :type query_equipment_id: str
        :param query_serial_number:
        :type query_serial_number: str
        :param query_asset_tag:
        :type query_asset_tag: str
        :param query_barcode:
        :type query_barcode: str
        :param query_legacy_id:
        :type query_legacy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsAssetToAssetResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_assets_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_assets_with_http_info(
            client_company_id,
            query_equipment_id,
            query_serial_number,
            query_asset_tag,
            query_barcode,
            query_legacy_id,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_assets_with_http_info(
        self,
        client_company_id: StrictInt,
        query_equipment_id: Optional[StrictStr] = None,
        query_serial_number: Optional[StrictStr] = None,
        query_asset_tag: Optional[StrictStr] = None,
        query_barcode: Optional[StrictStr] = None,
        query_legacy_id: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_assets  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_assets_with_http_info(client_company_id, query_equipment_id, query_serial_number, query_asset_tag, query_barcode, query_legacy_id, async_req=True)
        >>> result = thread.get()

        :param client_company_id: (required)
        :type client_company_id: int
        :param query_equipment_id:
        :type query_equipment_id: str
        :param query_serial_number:
        :type query_serial_number: str
        :param query_asset_tag:
        :type query_asset_tag: str
        :param query_barcode:
        :type query_barcode: str
        :param query_legacy_id:
        :type query_legacy_id: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsAssetToAssetResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "client_company_id",
            "query_equipment_id",
            "query_serial_number",
            "query_asset_tag",
            "query_barcode",
            "query_legacy_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assets" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["client_company_id"]:
            _path_params["clientCompanyId"] = _params["client_company_id"]

        # process the query parameters
        _query_params = []
        if _params.get("query_equipment_id") is not None:  # noqa: E501
            _query_params.append(("query.equipmentId", _params["query_equipment_id"]))

        if _params.get("query_serial_number") is not None:  # noqa: E501
            _query_params.append(("query.serialNumber", _params["query_serial_number"]))

        if _params.get("query_asset_tag") is not None:  # noqa: E501
            _query_params.append(("query.assetTag", _params["query_asset_tag"]))

        if _params.get("query_barcode") is not None:  # noqa: E501
            _query_params.append(("query.barcode", _params["query_barcode"]))

        if _params.get("query_legacy_id") is not None:  # noqa: E501
            _query_params.append(("query.legacyId", _params["query_legacy_id"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsAssetToAssetResponseModel]",
        }

        return self.api_client.call_api(
            "/api/service/clients/{clientCompanyId}/assets",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
