# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import Field, StrictBool, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_service_order_documents_to_company_order_item_controlled_document_response import (
    QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse,
)


class ServiceOrderItemDocumentsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def get_document_list_get2(
        self,
        var_from: Annotated[
            datetime,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc greater than From parameter",
            ),
        ],
        to: Annotated[
            datetime,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc less than To parameter",
            ),
        ],
        report_type: Annotated[
            Optional[StrictStr],
            Field(description="Retrieve documents given types (Optional)"),
        ] = None,
        service_order_item_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Retrieve documents by given service order item id (Optional)"
            ),
        ] = None,
        **kwargs,
    ) -> List[
        QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse
    ]:  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET /api/service/workitems/documents/list                GET /api/service/workitems/documents/list?status=reportType                GET /api/service/workitems/documents/list?from=2020-12-01T10:11:12&amp;to=2021-01-01T10:11:12&amp;reportType=OrderInvoice&amp;ServiceOrderItemId=1                reportType:<br />  Unset = 0,<br />  AssetSummary = 1,<br />  AssetLabel = 11,<br />  AssetDetail = 2,<br />  AssetCertificate = 21,<br />  OrderSummary / ServiceOrderSummary = 3,<br />  OrderInvoice / ServiceOrderInvoice = 31,<br />  OrderEstimate / ServiceOrderEstimate = 32,<br />  Dashboard = 4,<br />  OrderDetail / ServiceOrderDetail = 5,<br />  OrderCertificate / ServiceOrderCertificate = 5<br />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_list_get2(var_from, to, report_type, service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param var_from: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :type var_from: datetime
        :param to: Retrieve documents where CreatedOnUtc less than To parameter (required)
        :type to: datetime
        :param report_type: Retrieve documents given types (Optional)
        :type report_type: str
        :param service_order_item_id: Retrieve documents by given service order item id (Optional)
        :type service_order_item_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_document_list_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_document_list_get2_with_http_info(
            var_from, to, report_type, service_order_item_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_document_list_get2_with_http_info(
        self,
        var_from: Annotated[
            datetime,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc greater than From parameter",
            ),
        ],
        to: Annotated[
            datetime,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc less than To parameter",
            ),
        ],
        report_type: Annotated[
            Optional[StrictStr],
            Field(description="Retrieve documents given types (Optional)"),
        ] = None,
        service_order_item_id: Annotated[
            Optional[StrictInt],
            Field(
                description="Retrieve documents by given service order item id (Optional)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET /api/service/workitems/documents/list                GET /api/service/workitems/documents/list?status=reportType                GET /api/service/workitems/documents/list?from=2020-12-01T10:11:12&amp;to=2021-01-01T10:11:12&amp;reportType=OrderInvoice&amp;ServiceOrderItemId=1                reportType:<br />  Unset = 0,<br />  AssetSummary = 1,<br />  AssetLabel = 11,<br />  AssetDetail = 2,<br />  AssetCertificate = 21,<br />  OrderSummary / ServiceOrderSummary = 3,<br />  OrderInvoice / ServiceOrderInvoice = 31,<br />  OrderEstimate / ServiceOrderEstimate = 32,<br />  Dashboard = 4,<br />  OrderDetail / ServiceOrderDetail = 5,<br />  OrderCertificate / ServiceOrderCertificate = 5<br />  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_document_list_get2_with_http_info(var_from, to, report_type, service_order_item_id, async_req=True)
        >>> result = thread.get()

        :param var_from: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :type var_from: datetime
        :param to: Retrieve documents where CreatedOnUtc less than To parameter (required)
        :type to: datetime
        :param report_type: Retrieve documents given types (Optional)
        :type report_type: str
        :param service_order_item_id: Retrieve documents by given service order item id (Optional)
        :type service_order_item_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["var_from", "to", "report_type", "service_order_item_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_list_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("var_from") is not None:  # noqa: E501
            if isinstance(_params["var_from"], datetime):
                _query_params.append(
                    (
                        "from",
                        _params["var_from"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("from", _params["var_from"]))

        if _params.get("to") is not None:  # noqa: E501
            if isinstance(_params["to"], datetime):
                _query_params.append(
                    (
                        "to",
                        _params["to"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("to", _params["to"]))

        if _params.get("report_type") is not None:  # noqa: E501
            _query_params.append(("reportType", _params["report_type"]))

        if _params.get("service_order_item_id") is not None:  # noqa: E501
            _query_params.append(
                ("serviceOrderItemId", _params["service_order_item_id"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse]",
            "400": None,
        }

        return self.api_client.call_api(
            "/api/service/workitems/documents/list",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_documents_get2(
        self,
        service_order_item_id: Annotated[
            StrictInt,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc greater than From parameter",
            ),
        ],
        model_file_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET api/service/workitems/1000/documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents_get2(service_order_item_id, model_file_name, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :type service_order_item_id: int
        :param model_file_name:
        :type model_file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_documents_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_documents_get2_with_http_info(
            service_order_item_id, model_file_name, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_documents_get2_with_http_info(
        self,
        service_order_item_id: Annotated[
            StrictInt,
            Field(
                ...,
                description="Retrieve documents where CreatedOnUtc greater than From parameter",
            ),
        ],
        model_file_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Retrieve work order documents  # noqa: E501

        Sample request:                GET api/service/workitems/1000/documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents_get2_with_http_info(service_order_item_id, model_file_name, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: Retrieve documents where CreatedOnUtc greater than From parameter (required)
        :type service_order_item_id: int
        :param model_file_name:
        :type model_file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_item_id", "model_file_name"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_item_id"]:
            _path_params["serviceOrderItemId"] = _params["service_order_item_id"]

        # process the query parameters
        _query_params = []
        if _params.get("model_file_name") is not None:  # noqa: E501
            _query_params.append(("model.fileName", _params["model_file_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "403": None,
            "404": None,
        }

        return self.api_client.call_api(
            "/api/service/workitems/{serviceOrderItemId}/documents",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_documents_list_get2(
        self,
        service_order_item_id: StrictInt,
        model_report_type: Optional[StrictStr] = None,
        **kwargs,
    ) -> List[
        QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse
    ]:  # noqa: E501
        """get_documents_list_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents_list_get2(service_order_item_id, model_report_type, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: (required)
        :type service_order_item_id: int
        :param model_report_type:
        :type model_report_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_documents_list_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_documents_list_get2_with_http_info(
            service_order_item_id, model_report_type, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_documents_list_get2_with_http_info(
        self,
        service_order_item_id: StrictInt,
        model_report_type: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_documents_list_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_documents_list_get2_with_http_info(service_order_item_id, model_report_type, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: (required)
        :type service_order_item_id: int
        :param model_report_type:
        :type model_report_type: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_item_id", "model_report_type"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_list_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_item_id"]:
            _path_params["serviceOrderItemId"] = _params["service_order_item_id"]

        # process the query parameters
        _query_params = []
        if _params.get("model_report_type") is not None:  # noqa: E501
            _query_params.append(("model.reportType", _params["model_report_type"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsServiceOrderDocumentsToCompanyOrderItemControlledDocumentResponse]",
            "403": None,
            "404": None,
        }

        return self.api_client.call_api(
            "/api/service/workitems/{serviceOrderItemId}/documents/list",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def upload_documents_post3(
        self,
        service_order_item_id: StrictInt,
        model_report_type: Optional[StrictStr] = None,
        model_is_private: Optional[StrictBool] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        """upload_documents_post3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_documents_post3(service_order_item_id, model_report_type, model_is_private, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: (required)
        :type service_order_item_id: int
        :param model_report_type:
        :type model_report_type: str
        :param model_is_private:
        :type model_is_private: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the upload_documents_post3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.upload_documents_post3_with_http_info(
            service_order_item_id, model_report_type, model_is_private, **kwargs
        )  # noqa: E501

    @validate_arguments
    def upload_documents_post3_with_http_info(
        self,
        service_order_item_id: StrictInt,
        model_report_type: Optional[StrictStr] = None,
        model_is_private: Optional[StrictBool] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """upload_documents_post3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_documents_post3_with_http_info(service_order_item_id, model_report_type, model_is_private, async_req=True)
        >>> result = thread.get()

        :param service_order_item_id: (required)
        :type service_order_item_id: int
        :param model_report_type:
        :type model_report_type: str
        :param model_is_private:
        :type model_is_private: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_item_id", "model_report_type", "model_is_private"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_documents_post3" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_item_id"]:
            _path_params["serviceOrderItemId"] = _params["service_order_item_id"]

        # process the query parameters
        _query_params = []
        if _params.get("model_report_type") is not None:  # noqa: E501
            _query_params.append(("model.reportType", _params["model_report_type"]))

        if _params.get("model_is_private") is not None:  # noqa: E501
            _query_params.append(("model.isPrivate", _params["model_is_private"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/service/workitems/{serviceOrderItemId}/documents",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
