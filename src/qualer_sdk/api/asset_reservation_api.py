# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""  # noqa: E501

from datetime import datetime
from typing import Any, Dict, List, Optional, Tuple, Union

from pydantic import Field, StrictFloat, StrictInt, StrictStr, validate_call
from typing_extensions import Annotated

from qualer_sdk.api_client import ApiClient, RequestSerialized
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.models.qualer_api_models_asset_reservation_from_upsert_asset_reservation_model import (
    QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
)
from qualer_sdk.models.qualer_api_models_asset_reservation_to_asset_reservation_response import (
    QualerApiModelsAssetReservationToAssetReservationResponse,
)
from qualer_sdk.models.qualer_api_models_asset_reservation_to_upsert_asset_reservation_response import (
    QualerApiModelsAssetReservationToUpsertAssetReservationResponse,
)
from qualer_sdk.rest import RESTResponseType


class AssetReservationApi:
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None) -> None:
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_call
    def close(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> object:
        """close


        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._close_serialize(
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def close_with_http_info(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[object]:
        """close


        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._close_serialize(
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def close_without_preload_content(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """close


        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._close_serialize(
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "object",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _close_serialize(
        self,
        model_asset_id,
        model_area_id,
        model_product_id,
        model_serial_number,
        model_asset_tag,
        model_reservation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if model_asset_id is not None:

            _query_params.append(("model.assetId", model_asset_id))

        if model_area_id is not None:

            _query_params.append(("model.areaId", model_area_id))

        if model_product_id is not None:

            _query_params.append(("model.productId", model_product_id))

        if model_serial_number is not None:

            _query_params.append(("model.serialNumber", model_serial_number))

        if model_asset_tag is not None:

            _query_params.append(("model.assetTag", model_asset_tag))

        if model_reservation_id is not None:

            _query_params.append(("model.reservationId", model_reservation_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/api/assetsreservations/close",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def get_get2(
        self,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> List[QualerApiModelsAssetReservationToAssetReservationResponse]:
        """get_get2


        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_get2_serialize(
            model_from=model_from,
            model_to=model_to,
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[QualerApiModelsAssetReservationToAssetReservationResponse]",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def get_get2_with_http_info(
        self,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[List[QualerApiModelsAssetReservationToAssetReservationResponse]]:
        """get_get2


        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_get2_serialize(
            model_from=model_from,
            model_to=model_to,
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[QualerApiModelsAssetReservationToAssetReservationResponse]",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def get_get2_without_preload_content(
        self,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """get_get2


        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._get_get2_serialize(
            model_from=model_from,
            model_to=model_to,
            model_asset_id=model_asset_id,
            model_area_id=model_area_id,
            model_product_id=model_product_id,
            model_serial_number=model_serial_number,
            model_asset_tag=model_asset_tag,
            model_reservation_id=model_reservation_id,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "List[QualerApiModelsAssetReservationToAssetReservationResponse]",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _get_get2_serialize(
        self,
        model_from,
        model_to,
        model_asset_id,
        model_area_id,
        model_product_id,
        model_serial_number,
        model_asset_tag,
        model_reservation_id,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        if model_from is not None:
            if isinstance(model_from, datetime):
                _query_params.append(
                    (
                        "model.from",
                        model_from.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.from", model_from))

        if model_to is not None:
            if isinstance(model_to, datetime):
                _query_params.append(
                    (
                        "model.to",
                        model_to.strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.to", model_to))

        if model_asset_id is not None:

            _query_params.append(("model.assetId", model_asset_id))

        if model_area_id is not None:

            _query_params.append(("model.areaId", model_area_id))

        if model_product_id is not None:

            _query_params.append(("model.productId", model_product_id))

        if model_serial_number is not None:

            _query_params.append(("model.serialNumber", model_serial_number))

        if model_asset_tag is not None:

            _query_params.append(("model.assetTag", model_asset_tag))

        if model_reservation_id is not None:

            _query_params.append(("model.reservationId", model_reservation_id))

        # process the header parameters
        # process the form parameters
        # process the body parameter

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="GET",
            resource_path="/api/assetsreservations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )

    @validate_call
    def upsert(
        self,
        model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> QualerApiModelsAssetReservationToUpsertAssetReservationResponse:
        """upsert


        :param model: (required)
        :type model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._upsert_serialize(
            model=model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "QualerApiModelsAssetReservationToUpsertAssetReservationResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        ).data

    @validate_call
    def upsert_with_http_info(
        self,
        model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> ApiResponse[QualerApiModelsAssetReservationToUpsertAssetReservationResponse]:
        """upsert


        :param model: (required)
        :type model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._upsert_serialize(
            model=model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "QualerApiModelsAssetReservationToUpsertAssetReservationResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        response_data.read()
        return self.api_client.response_deserialize(
            response_data=response_data,
            response_types_map=_response_types_map,
        )

    @validate_call
    def upsert_without_preload_content(
        self,
        model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
        _request_timeout: Union[
            None,
            Annotated[StrictFloat, Field(gt=0)],
            Tuple[
                Annotated[StrictFloat, Field(gt=0)], Annotated[StrictFloat, Field(gt=0)]
            ],
        ] = None,
        _request_auth: Optional[Dict[StrictStr, Any]] = None,
        _content_type: Optional[StrictStr] = None,
        _headers: Optional[Dict[StrictStr, Any]] = None,
        _host_index: Annotated[StrictInt, Field(ge=0, le=0)] = 0,
    ) -> RESTResponseType:
        """upsert


        :param model: (required)
        :type model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :type _request_timeout: int, tuple(int, int), optional
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the
                              authentication in the spec for a single request.
        :type _request_auth: dict, optional
        :param _content_type: force content-type for the request.
        :type _content_type: str, Optional
        :param _headers: set to override the headers for a single
                         request; this effectively ignores the headers
                         in the spec for a single request.
        :type _headers: dict, optional
        :param _host_index: set to override the host_index for a single
                            request; this effectively ignores the host_index
                            in the spec for a single request.
        :type _host_index: int, optional
        :return: Returns the result object.
        """  # noqa: E501

        _param = self._upsert_serialize(
            model=model,
            _request_auth=_request_auth,
            _content_type=_content_type,
            _headers=_headers,
            _host_index=_host_index,
        )

        _response_types_map: Dict[str, Optional[str]] = {
            "200": "QualerApiModelsAssetReservationToUpsertAssetReservationResponse",
        }
        response_data = self.api_client.call_api(
            *_param, _request_timeout=_request_timeout
        )
        return response_data.response

    def _upsert_serialize(
        self,
        model,
        _request_auth,
        _content_type,
        _headers,
        _host_index,
    ) -> RequestSerialized:

        _host = None

        _collection_formats: Dict[str, str] = {}

        _path_params: Dict[str, str] = {}
        _query_params: List[Tuple[str, str]] = []
        _header_params: Dict[str, Optional[str]] = _headers or {}
        _form_params: List[Tuple[str, str]] = []
        _files: Dict[
            str, Union[str, bytes, List[str], List[bytes], List[Tuple[str, bytes]]]
        ] = {}
        _body_params: Optional[bytes] = None

        # process the path parameters
        # process the query parameters
        # process the header parameters
        # process the form parameters
        # process the body parameter
        if model is not None:
            _body_params = model

        # set the HTTP header `Accept`
        if "Accept" not in _header_params:
            _header_params["Accept"] = self.api_client.select_header_accept(
                ["application/json"]
            )

        # set the HTTP header `Content-Type`
        if _content_type:
            _header_params["Content-Type"] = _content_type
        else:
            _default_content_type = self.api_client.select_header_content_type(
                ["application/json"]
            )
            if _default_content_type is not None:
                _header_params["Content-Type"] = _default_content_type

        # authentication setting
        _auth_settings: List[str] = []

        return self.api_client.param_serialize(
            method="PUT",
            resource_path="/api/assetsreservations",
            path_params=_path_params,
            query_params=_query_params,
            header_params=_header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            auth_settings=_auth_settings,
            collection_formats=_collection_formats,
            _host=_host,
            _request_auth=_request_auth,
        )
