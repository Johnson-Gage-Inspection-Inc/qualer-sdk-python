# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import StrictInt, StrictStr, validate_arguments

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_asset_reservation_from_upsert_asset_reservation_model import (
    QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
)
from qualer_sdk.models.qualer_api_models_asset_reservation_to_asset_reservation_response import (
    QualerApiModelsAssetReservationToAssetReservationResponse,
)
from qualer_sdk.models.qualer_api_models_asset_reservation_to_upsert_asset_reservation_response import (
    QualerApiModelsAssetReservationToUpsertAssetReservationResponse,
)


class AssetReservationApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def close(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        """close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.close(model_asset_id, model_area_id, model_product_id, model_serial_number, model_asset_tag, model_reservation_id, async_req=True)
        >>> result = thread.get()

        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the close_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.close_with_http_info(
            model_asset_id,
            model_area_id,
            model_product_id,
            model_serial_number,
            model_asset_tag,
            model_reservation_id,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def close_with_http_info(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """close  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.close_with_http_info(model_asset_id, model_area_id, model_product_id, model_serial_number, model_asset_tag, model_reservation_id, async_req=True)
        >>> result = thread.get()

        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "model_asset_id",
            "model_area_id",
            "model_product_id",
            "model_serial_number",
            "model_asset_tag",
            "model_reservation_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method close" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("model_asset_id") is not None:  # noqa: E501
            _query_params.append(("model.assetId", _params["model_asset_id"]))

        if _params.get("model_area_id") is not None:  # noqa: E501
            _query_params.append(("model.areaId", _params["model_area_id"]))

        if _params.get("model_product_id") is not None:  # noqa: E501
            _query_params.append(("model.productId", _params["model_product_id"]))

        if _params.get("model_serial_number") is not None:  # noqa: E501
            _query_params.append(("model.serialNumber", _params["model_serial_number"]))

        if _params.get("model_asset_tag") is not None:  # noqa: E501
            _query_params.append(("model.assetTag", _params["model_asset_tag"]))

        if _params.get("model_reservation_id") is not None:  # noqa: E501
            _query_params.append(
                ("model.reservationId", _params["model_reservation_id"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/assetsreservations/close",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_get2(
        self,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> List[QualerApiModelsAssetReservationToAssetReservationResponse]:  # noqa: E501
        """get_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_get2(model_from, model_to, model_asset_id, model_area_id, model_product_id, model_serial_number, model_asset_tag, model_reservation_id, async_req=True)
        >>> result = thread.get()

        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsAssetReservationToAssetReservationResponse]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_get2_with_http_info(
            model_from,
            model_to,
            model_asset_id,
            model_area_id,
            model_product_id,
            model_serial_number,
            model_asset_tag,
            model_reservation_id,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_get2_with_http_info(
        self,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        model_asset_id: Optional[StrictInt] = None,
        model_area_id: Optional[StrictInt] = None,
        model_product_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_asset_tag: Optional[StrictStr] = None,
        model_reservation_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_get2_with_http_info(model_from, model_to, model_asset_id, model_area_id, model_product_id, model_serial_number, model_asset_tag, model_reservation_id, async_req=True)
        >>> result = thread.get()

        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param model_asset_id:
        :type model_asset_id: int
        :param model_area_id:
        :type model_area_id: int
        :param model_product_id:
        :type model_product_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_asset_tag:
        :type model_asset_tag: str
        :param model_reservation_id:
        :type model_reservation_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsAssetReservationToAssetReservationResponse], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "model_from",
            "model_to",
            "model_asset_id",
            "model_area_id",
            "model_product_id",
            "model_serial_number",
            "model_asset_tag",
            "model_reservation_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("model_from") is not None:  # noqa: E501
            if isinstance(_params["model_from"], datetime):
                _query_params.append(
                    (
                        "model.from",
                        _params["model_from"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.from", _params["model_from"]))

        if _params.get("model_to") is not None:  # noqa: E501
            if isinstance(_params["model_to"], datetime):
                _query_params.append(
                    (
                        "model.to",
                        _params["model_to"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.to", _params["model_to"]))

        if _params.get("model_asset_id") is not None:  # noqa: E501
            _query_params.append(("model.assetId", _params["model_asset_id"]))

        if _params.get("model_area_id") is not None:  # noqa: E501
            _query_params.append(("model.areaId", _params["model_area_id"]))

        if _params.get("model_product_id") is not None:  # noqa: E501
            _query_params.append(("model.productId", _params["model_product_id"]))

        if _params.get("model_serial_number") is not None:  # noqa: E501
            _query_params.append(("model.serialNumber", _params["model_serial_number"]))

        if _params.get("model_asset_tag") is not None:  # noqa: E501
            _query_params.append(("model.assetTag", _params["model_asset_tag"]))

        if _params.get("model_reservation_id") is not None:  # noqa: E501
            _query_params.append(
                ("model.reservationId", _params["model_reservation_id"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsAssetReservationToAssetReservationResponse]",
        }

        return self.api_client.call_api(
            "/api/assetsreservations",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def upsert(
        self,
        model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
        **kwargs,
    ) -> QualerApiModelsAssetReservationToUpsertAssetReservationResponse:  # noqa: E501
        """upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upsert(model, async_req=True)
        >>> result = thread.get()

        :param model: (required)
        :type model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsAssetReservationToUpsertAssetReservationResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the upsert_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.upsert_with_http_info(model, **kwargs)  # noqa: E501

    @validate_arguments
    def upsert_with_http_info(
        self,
        model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """upsert  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upsert_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param model: (required)
        :type model: QualerApiModelsAssetReservationFromUpsertAssetReservationModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsAssetReservationToUpsertAssetReservationResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'" " to method upsert" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsAssetReservationToUpsertAssetReservationResponse",
        }

        return self.api_client.call_api(
            "/api/assetsreservations",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
