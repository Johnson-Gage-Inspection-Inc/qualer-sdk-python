# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import Field, StrictBool, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_service_orders_from_change_service_order_status_model import (
    QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_from_charge_update_model import (
    QualerApiModelsServiceOrdersFromChargeUpdateModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_from_create_order_model import (
    QualerApiModelsServiceOrdersFromCreateOrderModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_client_order_response_model import (
    QualerApiModelsServiceOrdersToClientOrderResponseModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_order_assignment_response_model import (
    QualerApiModelsServiceOrdersToOrderAssignmentResponseModel,
)
from qualer_sdk.models.qualer_api_models_service_orders_to_provider_service_order_response_model import (
    QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel,
)
from qualer_sdk.models.qualer_web_mvc_areas_api_models_service_orders_to_charge_response_model import (
    QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel,
)


class ServiceOrdersApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def change_order_status(
        self,
        service_order_id: StrictInt,
        model: QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel,
        **kwargs,
    ) -> object:  # noqa: E501
        """Change Work Order Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.change_order_status(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param model: (required)
        :type model: QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the change_order_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.change_order_status_with_http_info(
            service_order_id, model, **kwargs
        )  # noqa: E501

    @validate_arguments
    def change_order_status_with_http_info(
        self,
        service_order_id: StrictInt,
        model: QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Change Work Order Status  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.change_order_status_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param model: (required)
        :type model: QualerApiModelsServiceOrdersFromChangeServiceOrderStatusModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id", "model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method change_order_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "400": None,
            "403": None,
            "404": None,
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/status",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_async(
        self,
        model: Annotated[
            QualerApiModelsServiceOrdersFromCreateOrderModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> object:  # noqa: E501
        """Create service order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_async(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsServiceOrdersFromCreateOrderModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_async_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_async_with_http_info(model, **kwargs)  # noqa: E501

    @validate_arguments
    def create_async_with_http_info(
        self,
        model: Annotated[
            QualerApiModelsServiceOrdersFromCreateOrderModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create service order.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_async_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsServiceOrdersFromCreateOrderModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_async" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "201": "object",
            "400": None,
        }

        return self.api_client.call_api(
            "/api/service/workorders",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def create_order_by_schedule(
        self, service_schedule_id: StrictInt, **kwargs
    ) -> object:  # noqa: E501
        """create_order_by_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_order_by_schedule(service_schedule_id, async_req=True)
        >>> result = thread.get()

        :param service_schedule_id: (required)
        :type service_schedule_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_order_by_schedule_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_order_by_schedule_with_http_info(
            service_schedule_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def create_order_by_schedule_with_http_info(
        self, service_schedule_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """create_order_by_schedule  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_order_by_schedule_with_http_info(service_schedule_id, async_req=True)
        >>> result = thread.get()

        :param service_schedule_id: (required)
        :type service_schedule_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_schedule_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_order_by_schedule" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_schedule_id"]:
            _path_params["serviceScheduleId"] = _params["service_schedule_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/service/workorders/byplan/{serviceScheduleId}",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_assignments(
        self, service_order_id: StrictInt, **kwargs
    ) -> List[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]:  # noqa: E501
        """get_assignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_assignments(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_assignments_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_assignments_with_http_info(
            service_order_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_assignments_with_http_info(
        self, service_order_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_assignments  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_assignments_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_assignments" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsServiceOrdersToOrderAssignmentResponseModel]",
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/assignments",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_charges(
        self, service_order_id: StrictInt, **kwargs
    ) -> QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel:  # noqa: E501
        """get_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_charges(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_charges_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_charges_with_http_info(service_order_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_charges_with_http_info(
        self, service_order_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_charges_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_charges" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerWebMvcAreasApiModelsServiceOrdersToChargeResponseModel",
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/charges",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_order_status(
        self, service_order_id: StrictInt, **kwargs
    ) -> object:  # noqa: E501
        """Gets current status and next status according to the workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_order_status(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_order_status_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_order_status_with_http_info(
            service_order_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_order_status_with_http_info(
        self, service_order_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """Gets current status and next status according to the workflow  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_order_status_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_order_status" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "403": None,
            "404": None,
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/status",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_work_order(
        self, service_order_id: StrictInt, **kwargs
    ) -> QualerApiModelsServiceOrdersToClientOrderResponseModel:  # noqa: E501
        """get_work_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_order(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsServiceOrdersToClientOrderResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_work_order_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_work_order_with_http_info(
            service_order_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_work_order_with_http_info(
        self, service_order_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_work_order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_order_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsServiceOrdersToClientOrderResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_order" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsServiceOrdersToClientOrderResponseModel",
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_work_orders(
        self,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite."
            ),
        ] = None,
        company_id: Annotated[
            Optional[StrictInt], Field(description="Filter by Client Company ID")
        ] = None,
        var_from: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn greater than From parameter"
            ),
        ] = None,
        to: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn less than To parameter"
            ),
        ] = None,
        modified_after: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter"
            ),
        ] = None,
        work_order_number: Annotated[
            Optional[StrictStr], Field(description="Filter by WorkOrderNumber")
        ] = None,
        assigned_employees: Annotated[
            Optional[StrictStr],
            Field(
                description="Comma separated list of assigned employees (using full name, alias or login email of the employee)"
            ),
        ] = None,
        **kwargs,
    ) -> List[QualerApiModelsServiceOrdersToClientOrderResponseModel]:  # noqa: E501
        """Retrieve work orders by filters  # noqa: E501

        Sample request:                GET /api/service/workorders                GET /api/service/workorders?status=submitted                GET /api/service/workorders?&amp;status=onsite,submitted&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;modifiedAfter=2010-12-15T10:11:12&amp;workOrderNumber=00567  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_orders(status, company_id, var_from, to, modified_after, work_order_number, assigned_employees, async_req=True)
        >>> result = thread.get()

        :param status: Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite.
        :type status: str
        :param company_id: Filter by Client Company ID
        :type company_id: int
        :param var_from: Retrieve Work Orders where LastUpdatedOn greater than From parameter
        :type var_from: datetime
        :param to: Retrieve Work Orders where LastUpdatedOn less than To parameter
        :type to: datetime
        :param modified_after: Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter
        :type modified_after: datetime
        :param work_order_number: Filter by WorkOrderNumber
        :type work_order_number: str
        :param assigned_employees: Comma separated list of assigned employees (using full name, alias or login email of the employee)
        :type assigned_employees: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsServiceOrdersToClientOrderResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_work_orders_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_work_orders_with_http_info(
            status,
            company_id,
            var_from,
            to,
            modified_after,
            work_order_number,
            assigned_employees,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_work_orders_with_http_info(
        self,
        status: Annotated[
            Optional[StrictStr],
            Field(
                description="Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite."
            ),
        ] = None,
        company_id: Annotated[
            Optional[StrictInt], Field(description="Filter by Client Company ID")
        ] = None,
        var_from: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn greater than From parameter"
            ),
        ] = None,
        to: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn less than To parameter"
            ),
        ] = None,
        modified_after: Annotated[
            Optional[datetime],
            Field(
                description="Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter"
            ),
        ] = None,
        work_order_number: Annotated[
            Optional[StrictStr], Field(description="Filter by WorkOrderNumber")
        ] = None,
        assigned_employees: Annotated[
            Optional[StrictStr],
            Field(
                description="Comma separated list of assigned employees (using full name, alias or login email of the employee)"
            ),
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Retrieve work orders by filters  # noqa: E501

        Sample request:                GET /api/service/workorders                GET /api/service/workorders?status=submitted                GET /api/service/workorders?&amp;status=onsite,submitted&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;modifiedAfter=2010-12-15T10:11:12&amp;workOrderNumber=00567  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_orders_with_http_info(status, company_id, var_from, to, modified_after, work_order_number, assigned_employees, async_req=True)
        >>> result = thread.get()

        :param status: Comma separated list of statuses.               Order statuses: WaitingForApproval, Submitted, Processing, QualityControl, Cancelled, WaitingForClientSignOff, Completed, Denied, Delayed, Scheduling, Closed, WaitingForVendorSignOff, DelayedApproval.               Payment statuses: NotInvoiced, Invoiced, PartiallyPaid, PaidInFull, NoCharge, Overpaid.               Shipment statuses: Delivered, Shipped, PartialShipment, NotShipped, PickUp, OnSite.
        :type status: str
        :param company_id: Filter by Client Company ID
        :type company_id: int
        :param var_from: Retrieve Work Orders where LastUpdatedOn greater than From parameter
        :type var_from: datetime
        :param to: Retrieve Work Orders where LastUpdatedOn less than To parameter
        :type to: datetime
        :param modified_after: Retrieve Work Orders where LastUpdatedOn greater than ModifiedAfter parameter
        :type modified_after: datetime
        :param work_order_number: Filter by WorkOrderNumber
        :type work_order_number: str
        :param assigned_employees: Comma separated list of assigned employees (using full name, alias or login email of the employee)
        :type assigned_employees: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsServiceOrdersToClientOrderResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "status",
            "company_id",
            "var_from",
            "to",
            "modified_after",
            "work_order_number",
            "assigned_employees",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_orders" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("status") is not None:  # noqa: E501
            _query_params.append(("status", _params["status"]))

        if _params.get("company_id") is not None:  # noqa: E501
            _query_params.append(("companyId", _params["company_id"]))

        if _params.get("var_from") is not None:  # noqa: E501
            if isinstance(_params["var_from"], datetime):
                _query_params.append(
                    (
                        "from",
                        _params["var_from"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("from", _params["var_from"]))

        if _params.get("to") is not None:  # noqa: E501
            if isinstance(_params["to"], datetime):
                _query_params.append(
                    (
                        "to",
                        _params["to"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("to", _params["to"]))

        if _params.get("modified_after") is not None:  # noqa: E501
            if isinstance(_params["modified_after"], datetime):
                _query_params.append(
                    (
                        "modifiedAfter",
                        _params["modified_after"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("modifiedAfter", _params["modified_after"]))

        if _params.get("work_order_number") is not None:  # noqa: E501
            _query_params.append(("workOrderNumber", _params["work_order_number"]))

        if _params.get("assigned_employees") is not None:  # noqa: E501
            _query_params.append(("assignedEmployees", _params["assigned_employees"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsServiceOrdersToClientOrderResponseModel]",
            "400": None,
        }

        return self.api_client.call_api(
            "/api/service/workorders",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_work_orders_get2(
        self, employee_id: StrictInt, is_internal: Optional[StrictBool] = None, **kwargs
    ) -> List[
        QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel
    ]:  # noqa: E501
        """get_work_orders_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_orders_get2(employee_id, is_internal, async_req=True)
        >>> result = thread.get()

        :param employee_id: (required)
        :type employee_id: int
        :param is_internal:
        :type is_internal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_work_orders_get2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_work_orders_get2_with_http_info(
            employee_id, is_internal, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_work_orders_get2_with_http_info(
        self, employee_id: StrictInt, is_internal: Optional[StrictBool] = None, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_work_orders_get2  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_work_orders_get2_with_http_info(employee_id, is_internal, async_req=True)
        >>> result = thread.get()

        :param employee_id: (required)
        :type employee_id: int
        :param is_internal:
        :type is_internal: bool
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["employee_id", "is_internal"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_orders_get2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["employee_id"]:
            _path_params["employeeId"] = _params["employee_id"]

        # process the query parameters
        _query_params = []
        if _params.get("is_internal") is not None:  # noqa: E501
            _query_params.append(("isInternal", _params["is_internal"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsServiceOrdersToProviderServiceOrderResponseModel]",
        }

        return self.api_client.call_api(
            "/api/employee/{employeeId}/workorders",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def order_cancel(
        self,
        service_order_id: StrictInt,
        reason_text: Annotated[
            Optional[StrictStr], Field(description="cancel description")
        ] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        """Cancel work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.order_cancel(service_order_id, reason_text, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param reason_text: cancel description
        :type reason_text: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the order_cancel_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.order_cancel_with_http_info(
            service_order_id, reason_text, **kwargs
        )  # noqa: E501

    @validate_arguments
    def order_cancel_with_http_info(
        self,
        service_order_id: StrictInt,
        reason_text: Annotated[
            Optional[StrictStr], Field(description="cancel description")
        ] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Cancel work order  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.order_cancel_with_http_info(service_order_id, reason_text, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param reason_text: cancel description
        :type reason_text: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id", "reason_text"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method order_cancel" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        if _params.get("reason_text") is not None:  # noqa: E501
            _query_params.append(("reasonText", _params["reason_text"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/cancel",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def put_charges_put2(
        self,
        service_order_id: StrictInt,
        model: QualerApiModelsServiceOrdersFromChargeUpdateModel,
        **kwargs,
    ) -> object:  # noqa: E501
        """Charge Names: LateFee, ServiceDiscount, PrepaidCredit, TradeInCredit, TravelCharge, TaxAmount, ShippingFee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_charges_put2(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param model: (required)
        :type model: QualerApiModelsServiceOrdersFromChargeUpdateModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the put_charges_put2_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.put_charges_put2_with_http_info(
            service_order_id, model, **kwargs
        )  # noqa: E501

    @validate_arguments
    def put_charges_put2_with_http_info(
        self,
        service_order_id: StrictInt,
        model: QualerApiModelsServiceOrdersFromChargeUpdateModel,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Charge Names: LateFee, ServiceDiscount, PrepaidCredit, TradeInCredit, TravelCharge, TaxAmount, ShippingFee  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.put_charges_put2_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param service_order_id: (required)
        :type service_order_id: int
        :param model: (required)
        :type model: QualerApiModelsServiceOrdersFromChargeUpdateModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["service_order_id", "model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_charges_put2" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["service_order_id"]:
            _path_params["serviceOrderId"] = _params["service_order_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/charges",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
