# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class AssetServiceRecordsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_asset_service_record(self, asset_id, model, **kwargs):  # noqa: E501
        """add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_asset_service_record(asset_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_asset_service_record_with_http_info(
                asset_id, model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.add_asset_service_record_with_http_info(
                asset_id, model, **kwargs
            )  # noqa: E501
            return data

    def add_asset_service_record_with_http_info(
        self, asset_id, model, **kwargs
    ):  # noqa: E501
        """add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_asset_service_record_with_http_info(asset_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :param QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["asset_id", "model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_asset_service_record" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_id' is set
        if self.api_client.client_side_validation and (
            "asset_id" not in params or params["asset_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_id` when calling `add_asset_service_record`"
            )  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `add_asset_service_record`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_id" in params:
            path_params["assetId"] = params["asset_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assets/{assetId}/assetservicerecords",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def document_list(self, asset_service_record_id, **kwargs):  # noqa: E501
        """document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_list(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.document_list_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.document_list_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
            return data

    def document_list_with_http_info(
        self, asset_service_record_id, **kwargs
    ):  # noqa: E501
        """document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.document_list_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "asset_service_record_id",
            "model_asset_service_record_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_list" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `document_list`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "asset_service_record_id" in params:
            query_params.append(
                ("assetServiceRecordId", params["asset_service_record_id"])
            )  # noqa: E501
        if "model_asset_service_record_id" in params:
            query_params.append(
                ("model.assetServiceRecordId", params["model_asset_service_record_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}/documents/files",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[str]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def download_document(
        self, asset_service_record_id, file_name, **kwargs
    ):  # noqa: E501
        """download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_document(asset_service_record_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param str file_name: (required)
        :param int model_asset_service_record_id:
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.download_document_with_http_info(
                asset_service_record_id, file_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.download_document_with_http_info(
                asset_service_record_id, file_name, **kwargs
            )  # noqa: E501
            return data

    def download_document_with_http_info(
        self, asset_service_record_id, file_name, **kwargs
    ):  # noqa: E501
        """download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_document_with_http_info(asset_service_record_id, file_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param str file_name: (required)
        :param int model_asset_service_record_id:
        :param str model_file_name:
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "asset_service_record_id",
            "file_name",
            "model_asset_service_record_id",
            "model_file_name",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_document" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `download_document`"
            )  # noqa: E501
        # verify the required parameter 'file_name' is set
        if self.api_client.client_side_validation and (
            "file_name" not in params or params["file_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `file_name` when calling `download_document`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if "asset_service_record_id" in params:
            query_params.append(
                ("assetServiceRecordId", params["asset_service_record_id"])
            )  # noqa: E501
        if "file_name" in params:
            query_params.append(("fileName", params["file_name"]))  # noqa: E501
        if "model_asset_service_record_id" in params:
            query_params.append(
                ("model.assetServiceRecordId", params["model_asset_service_record_id"])
            )  # noqa: E501
        if "model_file_name" in params:
            query_params.append(
                ("model.fileName", params["model_file_name"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}/documents/{FileName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def download_documents(self, asset_service_record_id, **kwargs):  # noqa: E501
        """download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.download_documents_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.download_documents_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
            return data

    def download_documents_with_http_info(
        self, asset_service_record_id, **kwargs
    ):  # noqa: E501
        """download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.download_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["asset_service_record_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_documents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `download_documents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_service_record_id" in params:
            path_params["assetServiceRecordId"] = params[
                "asset_service_record_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}/documents",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_asset_service_record(self, asset_service_record_id, **kwargs):  # noqa: E501
        """get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_record(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_asset_service_record_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_asset_service_record_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
            return data

    def get_asset_service_record_with_http_info(
        self, asset_service_record_id, **kwargs
    ):  # noqa: E501
        """get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_record_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str asset_service_record_id: (required)
        :param int model_asset_service_record_id:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "asset_service_record_id",
            "model_asset_service_record_id",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_record" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `get_asset_service_record`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_service_record_id" in params:
            path_params["AssetServiceRecordId"] = params[
                "asset_service_record_id"
            ]  # noqa: E501

        query_params = []
        if "model_asset_service_record_id" in params:
            query_params.append(
                ("model.assetServiceRecordId", params["model_asset_service_record_id"])
            )  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_asset_service_records(self, **kwargs):  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param str model_serial_number:
        :param datetime model_from:
        :param datetime model_to:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_asset_service_records_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_asset_service_records_with_http_info(
                **kwargs
            )  # noqa: E501
            return data

    def get_asset_service_records_with_http_info(self, **kwargs):  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int model_asset_id:
        :param str model_serial_number:
        :param datetime model_from:
        :param datetime model_to:
        :return: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "model_asset_id",
            "model_serial_number",
            "model_from",
            "model_to",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_records" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "model_asset_id" in params:
            query_params.append(
                ("model.assetId", params["model_asset_id"])
            )  # noqa: E501
        if "model_serial_number" in params:
            query_params.append(
                ("model.serialNumber", params["model_serial_number"])
            )  # noqa: E501
        if "model_from" in params:
            query_params.append(("model.from", params["model_from"]))  # noqa: E501
        if "model_to" in params:
            query_params.append(("model.to", params["model_to"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_asset_service_records_by_asset(self, asset_id, **kwargs):  # noqa: E501
        """get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records_by_asset(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :return: list[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_asset_service_records_by_asset_with_http_info(
                asset_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_asset_service_records_by_asset_with_http_info(
                asset_id, **kwargs
            )  # noqa: E501
            return data

    def get_asset_service_records_by_asset_with_http_info(
        self, asset_id, **kwargs
    ):  # noqa: E501
        """get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_asset_service_records_by_asset_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_id: (required)
        :return: list[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["asset_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_records_by_asset" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_id' is set
        if self.api_client.client_side_validation and (
            "asset_id" not in params or params["asset_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_id` when calling `get_asset_service_records_by_asset`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_id" in params:
            path_params["assetId"] = params["asset_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assets/{assetId}/assetservicerecords",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def update_asset_service_record(
        self, asset_service_record_id, model, **kwargs
    ):  # noqa: E501
        """update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_service_record(asset_service_record_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :param QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.update_asset_service_record_with_http_info(
                asset_service_record_id, model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.update_asset_service_record_with_http_info(
                asset_service_record_id, model, **kwargs
            )  # noqa: E501
            return data

    def update_asset_service_record_with_http_info(
        self, asset_service_record_id, model, **kwargs
    ):  # noqa: E501
        """update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_asset_service_record_with_http_info(asset_service_record_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :param QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["asset_service_record_id", "model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_service_record" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `update_asset_service_record`"
            )  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `update_asset_service_record`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_service_record_id" in params:
            path_params["assetServiceRecordId"] = params[
                "asset_service_record_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def upload_documents(self, asset_service_record_id, **kwargs):  # noqa: E501
        """upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.upload_documents_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.upload_documents_with_http_info(
                asset_service_record_id, **kwargs
            )  # noqa: E501
            return data

    def upload_documents_with_http_info(
        self, asset_service_record_id, **kwargs
    ):  # noqa: E501
        """upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int asset_service_record_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["asset_service_record_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_documents" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'asset_service_record_id' is set
        if self.api_client.client_side_validation and (
            "asset_service_record_id" not in params
            or params["asset_service_record_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `asset_service_record_id` when calling `upload_documents`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "asset_service_record_id" in params:
            path_params["assetServiceRecordId"] = params[
                "asset_service_record_id"
            ]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}/documents",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
