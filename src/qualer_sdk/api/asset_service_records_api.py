# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import StrictInt, StrictStr, validate_arguments

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_asset_service_records_from_add_asset_service_record_model import (
    QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel,
)
from qualer_sdk.models.qualer_api_models_asset_service_records_from_update_asset_service_record_model import (
    QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel,
)
from qualer_sdk.models.qualer_api_models_asset_service_records_to_asset_service_record_response_model import (
    QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel,
)


class AssetServiceRecordsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def add_asset_service_record(
        self,
        asset_id: StrictInt,
        model: QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel,
        **kwargs,
    ) -> object:  # noqa: E501
        """add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_asset_service_record(asset_id, model, async_req=True)
        >>> result = thread.get()

        :param asset_id: (required)
        :type asset_id: int
        :param model: (required)
        :type model: QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the add_asset_service_record_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.add_asset_service_record_with_http_info(
            asset_id, model, **kwargs
        )  # noqa: E501

    @validate_arguments
    def add_asset_service_record_with_http_info(
        self,
        asset_id: StrictInt,
        model: QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """add_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.add_asset_service_record_with_http_info(asset_id, model, async_req=True)
        >>> result = thread.get()

        :param asset_id: (required)
        :type asset_id: int
        :param model: (required)
        :type model: QualerApiModelsAssetServiceRecordsFromAddAssetServiceRecordModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_id", "model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_asset_service_record" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_id"]:
            _path_params["assetId"] = _params["asset_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "201": "QualerApiModelsAssetServiceRecordsToAddAssetServiceRecordResponse",
        }

        return self.api_client.call_api(
            "/api/assets/{assetId}/assetservicerecords",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def document_list(
        self,
        asset_service_record_id2: StrictStr,
        asset_service_record_id: Optional[StrictStr] = None,
        model_asset_service_record_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> List[str]:  # noqa: E501
        """document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_list(asset_service_record_id2, asset_service_record_id, model_asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id2: (required)
        :type asset_service_record_id2: str
        :param asset_service_record_id:
        :type asset_service_record_id: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[str]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the document_list_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.document_list_with_http_info(
            asset_service_record_id2,
            asset_service_record_id,
            model_asset_service_record_id,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def document_list_with_http_info(
        self,
        asset_service_record_id2: StrictStr,
        asset_service_record_id: Optional[StrictStr] = None,
        model_asset_service_record_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """document_list  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.document_list_with_http_info(asset_service_record_id2, asset_service_record_id, model_asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id2: (required)
        :type asset_service_record_id2: str
        :param asset_service_record_id:
        :type asset_service_record_id: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[str], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "asset_service_record_id2",
            "asset_service_record_id",
            "model_asset_service_record_id",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method document_list" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id2"]:
            _path_params["AssetServiceRecordId"] = _params["asset_service_record_id2"]

        # process the query parameters
        _query_params = []
        if _params.get("asset_service_record_id") is not None:  # noqa: E501
            _query_params.append(
                ("assetServiceRecordId", _params["asset_service_record_id"])
            )

        if _params.get("model_asset_service_record_id") is not None:  # noqa: E501
            _query_params.append(
                ("model.assetServiceRecordId", _params["model_asset_service_record_id"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[str]",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}/documents/files",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def download_document(
        self,
        asset_service_record_id2: StrictStr,
        file_name2: StrictStr,
        asset_service_record_id: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        model_asset_service_record_id: Optional[StrictInt] = None,
        model_file_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> object:  # noqa: E501
        """download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_document(asset_service_record_id2, file_name2, asset_service_record_id, file_name, model_asset_service_record_id, model_file_name, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id2: (required)
        :type asset_service_record_id2: str
        :param file_name2: (required)
        :type file_name2: str
        :param asset_service_record_id:
        :type asset_service_record_id: str
        :param file_name:
        :type file_name: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param model_file_name:
        :type model_file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the download_document_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.download_document_with_http_info(
            asset_service_record_id2,
            file_name2,
            asset_service_record_id,
            file_name,
            model_asset_service_record_id,
            model_file_name,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def download_document_with_http_info(
        self,
        asset_service_record_id2: StrictStr,
        file_name2: StrictStr,
        asset_service_record_id: Optional[StrictStr] = None,
        file_name: Optional[StrictStr] = None,
        model_asset_service_record_id: Optional[StrictInt] = None,
        model_file_name: Optional[StrictStr] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """download_document  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_document_with_http_info(asset_service_record_id2, file_name2, asset_service_record_id, file_name, model_asset_service_record_id, model_file_name, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id2: (required)
        :type asset_service_record_id2: str
        :param file_name2: (required)
        :type file_name2: str
        :param asset_service_record_id:
        :type asset_service_record_id: str
        :param file_name:
        :type file_name: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param model_file_name:
        :type model_file_name: str
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "asset_service_record_id2",
            "file_name2",
            "asset_service_record_id",
            "file_name",
            "model_asset_service_record_id",
            "model_file_name",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_document" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id2"]:
            _path_params["AssetServiceRecordId"] = _params["asset_service_record_id2"]

        if _params["file_name2"]:
            _path_params["FileName"] = _params["file_name2"]

        # process the query parameters
        _query_params = []
        if _params.get("asset_service_record_id") is not None:  # noqa: E501
            _query_params.append(
                ("assetServiceRecordId", _params["asset_service_record_id"])
            )

        if _params.get("file_name") is not None:  # noqa: E501
            _query_params.append(("fileName", _params["file_name"]))

        if _params.get("model_asset_service_record_id") is not None:  # noqa: E501
            _query_params.append(
                ("model.assetServiceRecordId", _params["model_asset_service_record_id"])
            )

        if _params.get("model_file_name") is not None:  # noqa: E501
            _query_params.append(("model.fileName", _params["model_file_name"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}/documents/{FileName}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def download_documents(
        self, asset_service_record_id: StrictInt, **kwargs
    ) -> object:  # noqa: E501
        """download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the download_documents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.download_documents_with_http_info(
            asset_service_record_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def download_documents_with_http_info(
        self, asset_service_record_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """download_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.download_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_service_record_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_documents" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id"]:
            _path_params["assetServiceRecordId"] = _params["asset_service_record_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}/documents",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_service_record(
        self,
        asset_service_record_id: StrictStr,
        model_asset_service_record_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> (
        QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
    ):  # noqa: E501
        """get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_record(asset_service_record_id, model_asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_service_record_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_service_record_with_http_info(
            asset_service_record_id, model_asset_service_record_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_asset_service_record_with_http_info(
        self,
        asset_service_record_id: StrictStr,
        model_asset_service_record_id: Optional[StrictInt] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_record_with_http_info(asset_service_record_id, model_asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: str
        :param model_asset_service_record_id:
        :type model_asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_service_record_id", "model_asset_service_record_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_record" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id"]:
            _path_params["AssetServiceRecordId"] = _params["asset_service_record_id"]

        # process the query parameters
        _query_params = []
        if _params.get("model_asset_service_record_id") is not None:  # noqa: E501
            _query_params.append(
                ("model.assetServiceRecordId", _params["model_asset_service_record_id"])
            )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{AssetServiceRecordId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_service_records(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        **kwargs,
    ) -> (
        QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
    ):  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_records(model_asset_id, model_serial_number, model_from, model_to, async_req=True)
        >>> result = thread.get()

        :param model_asset_id:
        :type model_asset_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_service_records_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_service_records_with_http_info(
            model_asset_id, model_serial_number, model_from, model_to, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_asset_service_records_with_http_info(
        self,
        model_asset_id: Optional[StrictInt] = None,
        model_serial_number: Optional[StrictStr] = None,
        model_from: Optional[datetime] = None,
        model_to: Optional[datetime] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_asset_service_records  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_records_with_http_info(model_asset_id, model_serial_number, model_from, model_to, async_req=True)
        >>> result = thread.get()

        :param model_asset_id:
        :type model_asset_id: int
        :param model_serial_number:
        :type model_serial_number: str
        :param model_from:
        :type model_from: datetime
        :param model_to:
        :type model_to: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "model_asset_id",
            "model_serial_number",
            "model_from",
            "model_to",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_records" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("model_asset_id") is not None:  # noqa: E501
            _query_params.append(("model.assetId", _params["model_asset_id"]))

        if _params.get("model_serial_number") is not None:  # noqa: E501
            _query_params.append(("model.serialNumber", _params["model_serial_number"]))

        if _params.get("model_from") is not None:  # noqa: E501
            if isinstance(_params["model_from"], datetime):
                _query_params.append(
                    (
                        "model.from",
                        _params["model_from"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.from", _params["model_from"]))

        if _params.get("model_to") is not None:  # noqa: E501
            if isinstance(_params["model_to"], datetime):
                _query_params.append(
                    (
                        "model.to",
                        _params["model_to"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(("model.to", _params["model_to"]))

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_asset_service_records_by_asset(
        self, asset_id: StrictInt, **kwargs
    ) -> List[
        QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel
    ]:  # noqa: E501
        """get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_records_by_asset(asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id: (required)
        :type asset_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_asset_service_records_by_asset_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_asset_service_records_by_asset_with_http_info(
            asset_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def get_asset_service_records_by_asset_with_http_info(
        self, asset_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_asset_service_records_by_asset  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_asset_service_records_by_asset_with_http_info(asset_id, async_req=True)
        >>> result = thread.get()

        :param asset_id: (required)
        :type asset_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_asset_service_records_by_asset" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_id"]:
            _path_params["assetId"] = _params["asset_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsAssetServiceRecordsToAssetServiceRecordResponseModel]",
        }

        return self.api_client.call_api(
            "/api/assets/{assetId}/assetservicerecords",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_asset_service_record(
        self,
        asset_service_record_id: StrictInt,
        model: QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel,
        **kwargs,
    ) -> object:  # noqa: E501
        """update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_asset_service_record(asset_service_record_id, model, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param model: (required)
        :type model: QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_asset_service_record_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_asset_service_record_with_http_info(
            asset_service_record_id, model, **kwargs
        )  # noqa: E501

    @validate_arguments
    def update_asset_service_record_with_http_info(
        self,
        asset_service_record_id: StrictInt,
        model: QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """update_asset_service_record  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_asset_service_record_with_http_info(asset_service_record_id, model, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param model: (required)
        :type model: QualerApiModelsAssetServiceRecordsFromUpdateAssetServiceRecordModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_service_record_id", "model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_asset_service_record" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id"]:
            _path_params["assetServiceRecordId"] = _params["asset_service_record_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(["application/json"]),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def upload_documents(
        self, asset_service_record_id: StrictInt, **kwargs
    ) -> object:  # noqa: E501
        """upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_documents(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the upload_documents_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.upload_documents_with_http_info(
            asset_service_record_id, **kwargs
        )  # noqa: E501

    @validate_arguments
    def upload_documents_with_http_info(
        self, asset_service_record_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """upload_documents  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.upload_documents_with_http_info(asset_service_record_id, async_req=True)
        >>> result = thread.get()

        :param asset_service_record_id: (required)
        :type asset_service_record_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["asset_service_record_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_documents" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["asset_service_record_id"]:
            _path_params["assetServiceRecordId"] = _params["asset_service_record_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
        }

        return self.api_client.call_api(
            "/api/assetservicerecords/{assetServiceRecordId}/documents",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
