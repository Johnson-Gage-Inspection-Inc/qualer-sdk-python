# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

OpenAPI spec version: v1

Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from qualer_sdk.api_client import ApiClient


class ServiceOrderItemsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_work_items(self, service_order_id, model, **kwargs):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_work_items(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromAddWorkItemsModel model: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.add_work_items_with_http_info(
                service_order_id, model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.add_work_items_with_http_info(
                service_order_id, model, **kwargs
            )  # noqa: E501
            return data

    def add_work_items_with_http_info(
        self, service_order_id, model, **kwargs
    ):  # noqa: E501
        """Add work items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_work_items_with_http_info(service_order_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :param QualerApiModelsServiceOrdersFromAddWorkItemsModel model: (required)
        :return: QualerApiModelsServiceOrdersToAssetAddResultResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["service_order_id", "model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_work_items" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and (
            "service_order_id" not in params or params["service_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `service_order_id` when calling `add_work_items`"
            )  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `add_work_items`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service_order_id" in params:
            path_params["serviceOrderId"] = params["service_order_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/workitems",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsServiceOrdersToAssetAddResultResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def delete_work_item_image(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """delete_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_work_item_image(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.delete_work_item_image_with_http_info(
                work_item_id, image_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.delete_work_item_image_with_http_info(
                work_item_id, image_name, **kwargs
            )  # noqa: E501
            return data

    def delete_work_item_image_with_http_info(
        self, work_item_id, image_name, **kwargs
    ):  # noqa: E501
        """delete_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_work_item_image_with_http_info(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id", "image_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_work_item_image" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `delete_work_item_image`"
            )  # noqa: E501
        # verify the required parameter 'image_name' is set
        if self.api_client.client_side_validation and (
            "image_name" not in params or params["image_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `image_name` when calling `delete_work_item_image`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501
        if "image_name" in params:
            path_params["imageName"] = params["image_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/images/{imageName}",
            "DELETE",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_item(self, work_item_id, **kwargs):  # noqa: E501
        """get_work_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderItemResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_item_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_work_item_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
            return data

    def get_work_item_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """get_work_item  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: QualerApiModelsServiceOrdersToClientOrderItemResponseModel
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_item" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `get_work_item`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="QualerApiModelsServiceOrdersToClientOrderItemResponseModel",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_item_charges(self, work_item_id, **kwargs):  # noqa: E501
        """get_work_item_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_charges(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_item_charges_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_work_item_charges_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
            return data

    def get_work_item_charges_with_http_info(
        self, work_item_id, **kwargs
    ):  # noqa: E501
        """get_work_item_charges  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_charges_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_item_charges" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `get_work_item_charges`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/charges",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_item_image(self, work_item_id, image_name, **kwargs):  # noqa: E501
        """get_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_image(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_item_image_with_http_info(
                work_item_id, image_name, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_work_item_image_with_http_info(
                work_item_id, image_name, **kwargs
            )  # noqa: E501
            return data

    def get_work_item_image_with_http_info(
        self, work_item_id, image_name, **kwargs
    ):  # noqa: E501
        """get_work_item_image  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_image_with_http_info(work_item_id, image_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param str image_name: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id", "image_name"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_item_image" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `get_work_item_image`"
            )  # noqa: E501
        # verify the required parameter 'image_name' is set
        if self.api_client.client_side_validation and (
            "image_name" not in params or params["image_name"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `image_name` when calling `get_work_item_image`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501
        if "image_name" in params:
            path_params["imageName"] = params["image_name"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/images/{imageName}",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_item_images(self, work_item_id, **kwargs):  # noqa: E501
        """get_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_images(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_item_images_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_work_item_images_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
            return data

    def get_work_item_images_with_http_info(self, work_item_id, **kwargs):  # noqa: E501
        """get_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_item_images_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_item_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `get_work_item_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/images",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[str]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_items(self, service_order_id, **kwargs):  # noqa: E501
        """get_work_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_items(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_items_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.get_work_items_with_http_info(
                service_order_id, **kwargs
            )  # noqa: E501
            return data

    def get_work_items_with_http_info(self, service_order_id, **kwargs):  # noqa: E501
        """get_work_items  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_items_with_http_info(service_order_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int service_order_id: (required)
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["service_order_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_items" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'service_order_id' is set
        if self.api_client.client_side_validation and (
            "service_order_id" not in params or params["service_order_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `service_order_id` when calling `get_work_items`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "service_order_id" in params:
            path_params["serviceOrderId"] = params["service_order_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workorders/{serviceOrderId}/workitems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def get_work_items_0(self, **kwargs):  # noqa: E501
        """Retrieve work items  # noqa: E501

        Sample request:                GET /api/service/workitems                GET /api/service/workitems?status=pending                GET /api/service/workitems?&amp;status=pending,delayed&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;workItemNumber=0629-000032-02  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_items_0(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of work item statuses: Pending, Completed, Delayed, InProgress, Withdrawn
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Items where CreatedOnUtc greater than From parameter
        :param datetime to: Retrieve Work Items where CreatedOnUtc less than To parameter
        :param str work_item_number: Filter by CustomOrderNumber or CertificateNumber
        :param str asset_search: Filter by asset Search keywords: SerialNumber, EquipmentId, AssetTag, AssetUser, LegacyId, AssetName, AssetDescription, ManufacturerPartNumber
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.get_work_items_0_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_work_items_0_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_work_items_0_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieve work items  # noqa: E501

        Sample request:                GET /api/service/workitems                GET /api/service/workitems?status=pending                GET /api/service/workitems?&amp;status=pending,delayed&amp;companyId=10&amp;from=2010-11-15T10:11:12&amp;to=2011-11-15T10:11:12&amp;workItemNumber=0629-000032-02  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_work_items_0_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str status: Comma separated list of work item statuses: Pending, Completed, Delayed, InProgress, Withdrawn
        :param int company_id: Filter by Client Company ID
        :param datetime _from: Retrieve Work Items where CreatedOnUtc greater than From parameter
        :param datetime to: Retrieve Work Items where CreatedOnUtc less than To parameter
        :param str work_item_number: Filter by CustomOrderNumber or CertificateNumber
        :param str asset_search: Filter by asset Search keywords: SerialNumber, EquipmentId, AssetTag, AssetUser, LegacyId, AssetName, AssetDescription, ManufacturerPartNumber
        :return: list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = [
            "status",
            "company_id",
            "_from",
            "to",
            "work_item_number",
            "asset_search",
        ]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_work_items_0" % key
                )
            params[key] = val
        del params["kwargs"]

        collection_formats = {}

        path_params = {}

        query_params = []
        if "status" in params:
            query_params.append(("status", params["status"]))  # noqa: E501
        if "company_id" in params:
            query_params.append(("companyId", params["company_id"]))  # noqa: E501
        if "_from" in params:
            query_params.append(("from", params["_from"]))  # noqa: E501
        if "to" in params:
            query_params.append(("to", params["to"]))  # noqa: E501
        if "work_item_number" in params:
            query_params.append(
                ("workItemNumber", params["work_item_number"])
            )  # noqa: E501
        if "asset_search" in params:
            query_params.append(("assetSearch", params["asset_search"]))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems",
            "GET",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="list[QualerApiModelsServiceOrdersToClientOrderItemResponseModel]",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def put_charges(self, work_item_id, model, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_charges(work_item_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id:  (required)
        :param QualerApiModelsServiceOrdersFromItemChargeUpdateModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.put_charges_with_http_info(
                work_item_id, model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.put_charges_with_http_info(
                work_item_id, model, **kwargs
            )  # noqa: E501
            return data

    def put_charges_with_http_info(self, work_item_id, model, **kwargs):  # noqa: E501
        """Apply Service Order Item Charges  # noqa: E501

        Allowed Names:      OverrideServiceTotal,      OverridePartsTotal,      OverrideRepairsTotal  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.put_charges_with_http_info(work_item_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id:  (required)
        :param QualerApiModelsServiceOrdersFromItemChargeUpdateModel model:  (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id", "model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method put_charges" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `put_charges`"
            )  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `put_charges`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/charges",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def set_work_item(self, work_item_id, model, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_work_item(work_item_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param QualerApiModelsServiceOrdersFromOrderItemUpdateModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.set_work_item_with_http_info(
                work_item_id, model, **kwargs
            )  # noqa: E501
        else:
            (data) = self.set_work_item_with_http_info(
                work_item_id, model, **kwargs
            )  # noqa: E501
            return data

    def set_work_item_with_http_info(self, work_item_id, model, **kwargs):  # noqa: E501
        """Update work item  # noqa: E501

        WorkStatus:  Pending = 0  InProgress = 1  Completed = 2  Delayed = 3  Withdrawn = 4  Locked = 5<br />  AsFoundCheck/AsLeftCheck (ChecklistResultStatus):  NotServiced = 0,  Fail = 1,  Pass = 2<br />  ResultStatus/AsFoundResult/AsLeftResult (ServiceResultStatus):  NotAvailable = 0,  Fail = 1,  FailAmbiguous = 10,  FailSignificant = 11,  Pass = 2,  PassAmbiguous = 20,  PassAdjustment = 21,  Done = 22,  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_work_item_with_http_info(work_item_id, model, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :param QualerApiModelsServiceOrdersFromOrderItemUpdateModel model: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id", "model"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_work_item" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `set_work_item`"
            )  # noqa: E501
        # verify the required parameter 'model' is set
        if self.api_client.client_side_validation and (
            "model" not in params or params["model"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `model` when calling `set_work_item`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if "model" in params:
            body_params = params["model"]
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # HTTP header `Content-Type`
        header_params["Content-Type"] = (
            self.api_client.select_header_content_type(  # noqa: E501
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            )
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}",
            "PUT",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )

    def upload_work_item_images(self, work_item_id, **kwargs):  # noqa: E501
        """upload_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_work_item_images(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs["_return_http_data_only"] = True
        if kwargs.get("async_req"):
            return self.upload_work_item_images_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
        else:
            (data) = self.upload_work_item_images_with_http_info(
                work_item_id, **kwargs
            )  # noqa: E501
            return data

    def upload_work_item_images_with_http_info(
        self, work_item_id, **kwargs
    ):  # noqa: E501
        """upload_work_item_images  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.upload_work_item_images_with_http_info(work_item_id, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int work_item_id: (required)
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ["work_item_id"]  # noqa: E501
        all_params.append("async_req")
        all_params.append("_return_http_data_only")
        all_params.append("_preload_content")
        all_params.append("_request_timeout")

        params = locals()
        for key, val in six.iteritems(params["kwargs"]):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_work_item_images" % key
                )
            params[key] = val
        del params["kwargs"]
        # verify the required parameter 'work_item_id' is set
        if self.api_client.client_side_validation and (
            "work_item_id" not in params or params["work_item_id"] is None
        ):  # noqa: E501
            raise ValueError(
                "Missing the required parameter `work_item_id` when calling `upload_work_item_images`"
            )  # noqa: E501

        collection_formats = {}

        path_params = {}
        if "work_item_id" in params:
            path_params["workItemId"] = params["work_item_id"]  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            "/api/service/workitems/{workItemId}/images",
            "POST",
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type="object",  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get("async_req"),
            _return_http_data_only=params.get("_return_http_data_only"),
            _preload_content=params.get("_preload_content", True),
            _request_timeout=params.get("_request_timeout"),
            collection_formats=collection_formats,
        )
