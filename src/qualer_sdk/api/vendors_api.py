# coding: utf-8

"""
Qualer.Web.Mvc

No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)  # noqa: E501

The version of the OpenAPI document: v1
Generated by OpenAPI Generator (https://openapi-generator.tech)

Do not edit the class manually.
"""


import re  # noqa: F401
from datetime import datetime
from typing import List, Optional

from pydantic import Field, StrictInt, StrictStr, validate_arguments
from typing_extensions import Annotated

from qualer_sdk.api_client import ApiClient
from qualer_sdk.api_response import ApiResponse
from qualer_sdk.exceptions import ApiTypeError, ApiValueError  # noqa: F401
from qualer_sdk.models.qualer_api_models_vendors_from_sponsored_vendor_create_model import (
    QualerApiModelsVendorsFromSponsoredVendorCreateModel,
)
from qualer_sdk.models.qualer_api_models_vendors_from_sponsored_vendor_edit_model import (
    QualerApiModelsVendorsFromSponsoredVendorEditModel,
)
from qualer_sdk.models.qualer_api_models_vendors_to_created_vendor_company_response import (
    QualerApiModelsVendorsToCreatedVendorCompanyResponse,
)
from qualer_sdk.models.qualer_api_models_vendors_to_vendor_company_response_model import (
    QualerApiModelsVendorsToVendorCompanyResponseModel,
)


class VendorsApi(object):
    """NOTE: This class is auto generated by OpenAPI Generator
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient.get_default()
        self.api_client = api_client

    @validate_arguments
    def create_post3(
        self,
        model: Annotated[
            QualerApiModelsVendorsFromSponsoredVendorCreateModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> QualerApiModelsVendorsToCreatedVendorCompanyResponse:  # noqa: E501
        """Create Vendor information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_post3(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsVendorsFromSponsoredVendorCreateModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsVendorsToCreatedVendorCompanyResponse
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the create_post3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.create_post3_with_http_info(model, **kwargs)  # noqa: E501

    @validate_arguments
    def create_post3_with_http_info(
        self,
        model: Annotated[
            QualerApiModelsVendorsFromSponsoredVendorCreateModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Create Vendor information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.create_post3_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsVendorsFromSponsoredVendorCreateModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsVendorsToCreatedVendorCompanyResponse, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_post3" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "201": "QualerApiModelsVendorsToCreatedVendorCompanyResponse",
            "400": None,
        }

        return self.api_client.call_api(
            "/api/service/vendors",
            "POST",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_all_get3(
        self,
        model_account_number_text: Optional[StrictStr] = None,
        model_company_name: Optional[StrictStr] = None,
        model_take: Optional[StrictInt] = None,
        model_modified_after: Optional[datetime] = None,
        **kwargs,
    ) -> List[QualerApiModelsVendorsToVendorCompanyResponseModel]:  # noqa: E501
        """get_all_get3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_get3(model_account_number_text, model_company_name, model_take, model_modified_after, async_req=True)
        >>> result = thread.get()

        :param model_account_number_text:
        :type model_account_number_text: str
        :param model_company_name:
        :type model_company_name: str
        :param model_take:
        :type model_take: int
        :param model_modified_after:
        :type model_modified_after: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: List[QualerApiModelsVendorsToVendorCompanyResponseModel]
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_all_get3_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_all_get3_with_http_info(
            model_account_number_text,
            model_company_name,
            model_take,
            model_modified_after,
            **kwargs,
        )  # noqa: E501

    @validate_arguments
    def get_all_get3_with_http_info(
        self,
        model_account_number_text: Optional[StrictStr] = None,
        model_company_name: Optional[StrictStr] = None,
        model_take: Optional[StrictInt] = None,
        model_modified_after: Optional[datetime] = None,
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """get_all_get3  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_all_get3_with_http_info(model_account_number_text, model_company_name, model_take, model_modified_after, async_req=True)
        >>> result = thread.get()

        :param model_account_number_text:
        :type model_account_number_text: str
        :param model_company_name:
        :type model_company_name: str
        :param model_take:
        :type model_take: int
        :param model_modified_after:
        :type model_modified_after: datetime
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(List[QualerApiModelsVendorsToVendorCompanyResponseModel], status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = [
            "model_account_number_text",
            "model_company_name",
            "model_take",
            "model_modified_after",
        ]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_get3" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        if _params.get("model_account_number_text") is not None:  # noqa: E501
            _query_params.append(
                ("model.accountNumberText", _params["model_account_number_text"])
            )

        if _params.get("model_company_name") is not None:  # noqa: E501
            _query_params.append(("model.companyName", _params["model_company_name"]))

        if _params.get("model_take") is not None:  # noqa: E501
            _query_params.append(("model.take", _params["model_take"]))

        if _params.get("model_modified_after") is not None:  # noqa: E501
            if isinstance(_params["model_modified_after"], datetime):
                _query_params.append(
                    (
                        "model.modifiedAfter",
                        _params["model_modified_after"].strftime(
                            self.api_client.configuration.datetime_format
                        ),
                    )
                )
            else:
                _query_params.append(
                    ("model.modifiedAfter", _params["model_modified_after"])
                )

        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "List[QualerApiModelsVendorsToVendorCompanyResponseModel]",
        }

        return self.api_client.call_api(
            "/api/service/vendors",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def get_get8(
        self, vendor_company_id: StrictInt, **kwargs
    ) -> QualerApiModelsVendorsToVendorCompanyResponseModel:  # noqa: E501
        """get_get8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_get8(vendor_company_id, async_req=True)
        >>> result = thread.get()

        :param vendor_company_id: (required)
        :type vendor_company_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: QualerApiModelsVendorsToVendorCompanyResponseModel
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the get_get8_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.get_get8_with_http_info(vendor_company_id, **kwargs)  # noqa: E501

    @validate_arguments
    def get_get8_with_http_info(
        self, vendor_company_id: StrictInt, **kwargs
    ) -> ApiResponse:  # noqa: E501
        """get_get8  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.get_get8_with_http_info(vendor_company_id, async_req=True)
        >>> result = thread.get()

        :param vendor_company_id: (required)
        :type vendor_company_id: int
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(QualerApiModelsVendorsToVendorCompanyResponseModel, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["vendor_company_id"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_get8" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}
        if _params["vendor_company_id"]:
            _path_params["vendorCompanyId"] = _params["vendor_company_id"]

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "QualerApiModelsVendorsToVendorCompanyResponseModel",
        }

        return self.api_client.call_api(
            "/api/service/vendors/{vendorCompanyId}",
            "GET",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )

    @validate_arguments
    def update_put4(
        self,
        model: Annotated[
            QualerApiModelsVendorsFromSponsoredVendorEditModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> object:  # noqa: E501
        """Update Vendor information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_put4(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsVendorsFromSponsoredVendorEditModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: object
        """
        kwargs["_return_http_data_only"] = True
        if "_preload_content" in kwargs:
            raise ValueError(
                "Error! Please call the update_put4_with_http_info method with `_preload_content` instead and obtain raw data from ApiResponse.raw_data"
            )
        return self.update_put4_with_http_info(model, **kwargs)  # noqa: E501

    @validate_arguments
    def update_put4_with_http_info(
        self,
        model: Annotated[
            QualerApiModelsVendorsFromSponsoredVendorEditModel,
            Field(..., description="Vendor update model"),
        ],
        **kwargs,
    ) -> ApiResponse:  # noqa: E501
        """Update Vendor information.  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True

        >>> thread = api.update_put4_with_http_info(model, async_req=True)
        >>> result = thread.get()

        :param model: Vendor update model (required)
        :type model: QualerApiModelsVendorsFromSponsoredVendorEditModel
        :param async_req: Whether to execute the request asynchronously.
        :type async_req: bool, optional
        :param _preload_content: if False, the ApiResponse.data will
                                 be set to none and raw_data will store the
                                 HTTP response body without reading/decoding.
                                 Default is True.
        :type _preload_content: bool, optional
        :param _return_http_data_only: response data instead of ApiResponse
                                       object with status code, headers, etc
        :type _return_http_data_only: bool, optional
        :param _request_timeout: timeout setting for this request. If one
                                 number provided, it will be total request
                                 timeout. It can also be a pair (tuple) of
                                 (connection, read) timeouts.
        :param _request_auth: set to override the auth_settings for an a single
                              request; this effectively ignores the authentication
                              in the spec for a single request.
        :type _request_auth: dict, optional
        :type _content_type: string, optional: force content-type for the request
        :return: Returns the result object.
                 If the method is called asynchronously,
                 returns the request thread.
        :rtype: tuple(object, status_code(int), headers(HTTPHeaderDict))
        """

        _params = locals()

        _all_params = ["model"]
        _all_params.extend(
            [
                "async_req",
                "_return_http_data_only",
                "_preload_content",
                "_request_timeout",
                "_request_auth",
                "_content_type",
                "_headers",
            ]
        )

        # validate the arguments
        for _key, _val in _params["kwargs"].items():
            if _key not in _all_params:
                raise ApiTypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_put4" % _key
                )
            _params[_key] = _val
        del _params["kwargs"]

        _collection_formats = {}

        # process the path parameters
        _path_params = {}

        # process the query parameters
        _query_params = []
        # process the header parameters
        _header_params = dict(_params.get("_headers", {}))
        # process the form parameters
        _form_params = []
        _files = {}
        # process the body parameter
        _body_params = None
        if _params["model"] is not None:
            _body_params = _params["model"]

        # set the HTTP header `Accept`
        _header_params["Accept"] = self.api_client.select_header_accept(
            ["application/json", "text/json", "application/xml", "text/xml"]
        )  # noqa: E501

        # set the HTTP header `Content-Type`
        _content_types_list = _params.get(
            "_content_type",
            self.api_client.select_header_content_type(
                [
                    "application/json",
                    "text/json",
                    "application/xml",
                    "text/xml",
                    "application/x-www-form-urlencoded",
                ]
            ),
        )
        if _content_types_list:
            _header_params["Content-Type"] = _content_types_list

        # authentication setting
        _auth_settings = []  # noqa: E501

        _response_types_map = {
            "200": "object",
            "404": None,
            "400": None,
        }

        return self.api_client.call_api(
            "/api/service/vendors",
            "PUT",
            _path_params,
            _query_params,
            _header_params,
            body=_body_params,
            post_params=_form_params,
            files=_files,
            response_types_map=_response_types_map,
            auth_settings=_auth_settings,
            async_req=_params.get("async_req"),
            _return_http_data_only=_params.get("_return_http_data_only"),  # noqa: E501
            _preload_content=_params.get("_preload_content", True),
            _request_timeout=_params.get("_request_timeout"),
            collection_formats=_collection_formats,
            _request_auth=_params.get("_request_auth"),
        )
