name: CI

on:
  push:
    branches: [ master, develop ]
  pull_request:
    branches: [ master, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/qualer_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/qualer_sdk --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Validate OpenAPI spec
      run: |
        java -jar openapi-generator-cli.jar validate -i spec.json

    - name: Test with pytest
      run: |
        pytest tests/ -v --cov=qualer_sdk --cov-report=xml --cov-report=term-missing

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  # Optional: Auto-publish to PyPI on tagged releases
#   publish:
#     runs-on: ubuntu-latest
#     needs: [test, build]
#     if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/')

#     steps:
#     - uses: actions/checkout@v4

#     - name: Set up Python
#       uses: actions/setup-python@v5
#       with:
#         python-version: "3.11"

#     - name: Install build dependencies
#       run: |
#         python -m pip install --upgrade pip
#         pip install build twine

#     - name: Build package
#       run: |
#         python -m build

#     - name: Publish to PyPI
#       env:
#         TWINE_USERNAME: __token__
#         TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
#       run: |
#         twine upload dist/*
