name: CI

on:
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v5

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v4
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 src/qualer_sdk --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        flake8 src/qualer_sdk --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Validate SDK structure
      run: |
        # Basic validation that the SDK is properly structured
        python -c "from qualer_sdk import Client; print('‚úÖ SDK imports successfully')"
        python -c "import qualer_sdk.api; print('‚úÖ API modules available')"
        python -c "import qualer_sdk.models; print('‚úÖ Model modules available')"

    - name: Test with pytest (unit tests)
      run: |
        # Run unit tests only (excluding integration tests)
        pytest tests/ -v --cov=qualer_sdk --cov-report=xml --cov-report=term-missing -m "not integration" --ignore=tests/test_endpoints_integration.py --ignore=tests/test_get_document_integration.py --ignore=tests/test_download_documents_integration.py

    - name: Run integration tests
      env:
        QUALER_API_KEY: ${{ secrets.QUALER_API_KEY }}
      run: |
        # Run integration tests only if API key is available
        if [ -n "$QUALER_API_KEY" ]; then
          echo "üîë API key available, running integration tests..."
          pytest tests/integration/ -v -m "integration" --tb=short || echo "‚ö†Ô∏è  Some integration tests failed, but continuing CI"
        else
          echo "‚ö†Ô∏è  QUALER_API_KEY not available, skipping integration tests"
          echo "To run integration tests locally, set the QUALER_API_KEY environment variable"
        fi

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v5
      with:
        files: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  analyze:
    name: CodeQL
    runs-on: ubuntu-latest
    timeout-minutes: 360
    permissions:
      actions: read
      contents: read
      security-events: write

    strategy:
      fail-fast: false
      matrix:
        language: [ 'python' ]

    steps:
    - name: Checkout repository
      uses: actions/checkout@v5

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements-dev.txt
        pip install -e .

    - name: Initialize CodeQL
      uses: github/codeql-action/init@v3
      with:
        languages: python
        config-file: ./.github/codeql/codeql-config.yml

    - name: Autobuild
      uses: github/codeql-action/autobuild@v3

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3
      with:
        category: "/language:python"
  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v5
      with:
        # Fetch full history for setuptools-scm version detection
        fetch-depth: 0

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.13"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine setuptools-scm

    - name: Verify dynamic versioning
      run: |
        python -c "import setuptools_scm; print(f'üì¶ Version: {setuptools_scm.get_version()}')"

    - name: Build package
      run: |
        python -m build

    - name: Check package integrity
      run: |
        twine check dist/*

    - name: Test installation from wheel
      run: |
        pip install dist/*.whl
        python -c "import qualer_sdk; print(f'‚úÖ Installed version: {qualer_sdk.__version__}')"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: python-package-distributions
        path: dist/
